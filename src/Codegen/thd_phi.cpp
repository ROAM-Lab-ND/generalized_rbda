/* This file was automatically generated by CasADi 3.6.3.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) thd_phi_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

static const casadi_int casadi_s0[6] = {2, 1, 0, 2, 0, 1};
static const casadi_int casadi_s1[7] = {1, 2, 0, 1, 2, 0, 0};

/* thd_phi:(i0[2],i1[2])->(o0[1x2]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a10, a11, a12, a13, a14, a15, a2, a3, a4, a5, a6, a7, a8, a9;
  a0=57.;
  a1=arg[0]? arg[0][0] : 0;
  a2=6.;
  a1=(a1/a2);
  a3=sin(a1);
  a3=(a0*a3);
  a4=2500.;
  a3=(a3/a4);
  a5=49.;
  a6=arg[1]? arg[1][0] : 0;
  a7=cos(a6);
  a7=(a5*a7);
  a8=5000.;
  a7=(a7/a8);
  a3=(a3-a7);
  a7=399.;
  a9=sin(a6);
  a9=(a7*a9);
  a10=20000.;
  a9=(a9/a10);
  a3=(a3-a9);
  a9=8.;
  a11=cos(a1);
  a11=(a9*a11);
  a12=arg[1]? arg[1][1] : 0;
  a13=cos(a12);
  a11=(a11*a13);
  a13=625.;
  a11=(a11/a13);
  a3=(a3-a11);
  a11=cos(a6);
  a11=(a0*a11);
  a14=sin(a12);
  a11=(a11*a14);
  a11=(a11/a4);
  a3=(a3-a11);
  a11=7.;
  a14=sin(a1);
  a14=(a11*a14);
  a15=sin(a6);
  a14=(a14*a15);
  a14=(a14/a13);
  a3=(a3-a14);
  a14=sin(a6);
  a14=(a11*a14);
  a15=sin(a12);
  a14=(a14*a15);
  a14=(a14/a13);
  a3=(a3+a14);
  a14=cos(a6);
  a14=(a9*a14);
  a1=sin(a1);
  a14=(a14*a1);
  a1=sin(a12);
  a14=(a14*a1);
  a14=(a14/a13);
  a3=(a3-a14);
  a14=1.8881249999999999e-02;
  a3=(a3+a14);
  if (res[0]!=0) res[0][0]=a3;
  a3=arg[0]? arg[0][1] : 0;
  a3=(a3/a2);
  a2=sin(a3);
  a2=(a0*a2);
  a2=(a2/a4);
  a1=cos(a6);
  a5=(a5*a1);
  a5=(a5/a8);
  a2=(a2-a5);
  a5=sin(a6);
  a7=(a7*a5);
  a7=(a7/a10);
  a2=(a2+a7);
  a7=cos(a3);
  a7=(a9*a7);
  a10=cos(a12);
  a7=(a7*a10);
  a7=(a7/a13);
  a2=(a2-a7);
  a7=cos(a6);
  a0=(a0*a7);
  a7=sin(a12);
  a0=(a0*a7);
  a0=(a0/a4);
  a2=(a2-a0);
  a0=sin(a3);
  a0=(a11*a0);
  a4=sin(a6);
  a0=(a0*a4);
  a0=(a0/a13);
  a2=(a2+a0);
  a0=sin(a6);
  a11=(a11*a0);
  a0=sin(a12);
  a11=(a11*a0);
  a11=(a11/a13);
  a2=(a2-a11);
  a6=cos(a6);
  a9=(a9*a6);
  a3=sin(a3);
  a9=(a9*a3);
  a12=sin(a12);
  a9=(a9*a12);
  a9=(a9/a13);
  a2=(a2-a9);
  a2=(a2+a14);
  if (res[0]!=0) res[0][1]=a2;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int thd_phi(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int thd_phi_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int thd_phi_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void thd_phi_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int thd_phi_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void thd_phi_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void thd_phi_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void thd_phi_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int thd_phi_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int thd_phi_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real thd_phi_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* thd_phi_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* thd_phi_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* thd_phi_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* thd_phi_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int thd_phi_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}


