/* This file was automatically generated by CasADi 3.6.3.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) tkad_small_g_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

static const casadi_int casadi_s0[6] = {2, 1, 0, 2, 0, 1};
static const casadi_int casadi_s1[8] = {4, 1, 0, 4, 0, 1, 2, 3};

/* tkad_small_g:(i0[2],i1[2],i2[2],i3[2])->(o0[4]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a27, a28, a3, a4, a5, a6, a7, a8, a9;
  a0=0.;
  if (res[0]!=0) res[0][0]=a0;
  if (res[0]!=0) res[0][1]=a0;
  if (res[0]!=0) res[0][2]=a0;
  a0=6.;
  a1=1.6000000000000001e-03;
  a2=13.;
  a3=8.3333333333333329e-02;
  a4=arg[0]? arg[0][0] : 0;
  a4=(a4/a0);
  a5=2.;
  a6=(a4/a5);
  a7=arg[0]? arg[0][1] : 0;
  a7=(a7/a0);
  a8=(a7/a5);
  a6=(a6-a8);
  a8=1.0325367854798453e+00;
  a6=(a6+a8);
  a8=cos(a6);
  a9=5.0000000000000000e-01;
  a10=1.6666666666666666e-01;
  a11=arg[2]? arg[2][0] : 0;
  a12=(a10*a11);
  a13=(a9*a12);
  a14=arg[2]? arg[2][1] : 0;
  a10=(a10*a14);
  a15=(a9*a10);
  a13=(a13-a15);
  a8=(a8*a13);
  a13=(a3*a8);
  a13=(a2*a13);
  a13=(a1*a13);
  a15=1.6000000000000001e-04;
  a16=21.;
  a17=(a4/a5);
  a18=(a7/a5);
  a17=(a17-a18);
  a18=1.3816026358787112e+00;
  a17=(a17+a18);
  a18=cos(a17);
  a19=(a9*a12);
  a20=(a9*a10);
  a19=(a19-a20);
  a18=(a18*a19);
  a19=(a3*a18);
  a19=(a16*a19);
  a19=(a15*a19);
  a13=(a13-a19);
  a19=4.0000000000000002e-04;
  a20=7.;
  a4=(a4/a5);
  a7=(a7/a5);
  a4=(a4-a7);
  a7=arg[1]? arg[1][1] : 0;
  a4=(a4+a7);
  a5=1.4514158059584845e+00;
  a4=(a4+a5);
  a5=sin(a4);
  a12=(a9*a12);
  a9=(a9*a10);
  a12=(a12-a9);
  a5=(a5*a12);
  a9=(a3*a5);
  a9=(a20*a9);
  a9=(a19*a9);
  a13=(a13+a9);
  a9=2.0000000000000001e-04;
  a10=91.;
  a21=4.1887902047863906e-01;
  a21=(a7+a21);
  a22=cos(a21);
  a22=(a10*a22);
  a22=(a9*a22);
  a23=cos(a4);
  a23=(a20*a23);
  a23=(a19*a23);
  a22=(a22-a23);
  a23=2.0000000000000002e-05;
  a24=147.;
  a25=6.9813170079773182e-02;
  a7=(a7+a25);
  a25=cos(a7);
  a25=(a24*a25);
  a25=(a23*a25);
  a22=(a22-a25);
  a13=(a13/a22);
  a6=sin(a6);
  a25=(a3*a6);
  a25=(a2*a25);
  a25=(a1*a25);
  a17=sin(a17);
  a26=(a3*a17);
  a26=(a16*a26);
  a26=(a15*a26);
  a25=(a25-a26);
  a26=cos(a4);
  a27=(a3*a26);
  a27=(a20*a27);
  a27=(a19*a27);
  a25=(a25-a27);
  a25=(a25/a22);
  a27=(a25/a22);
  a28=sin(a4);
  a28=(a28*a12);
  a28=(a20*a28);
  a28=(a19*a28);
  a27=(a27*a28);
  a13=(a13-a27);
  a13=(a0*a13);
  a27=sin(a4);
  a12=arg[3]? arg[3][1] : 0;
  a27=(a27*a12);
  a3=(a3*a27);
  a3=(a20*a3);
  a3=(a19*a3);
  a3=(a3/a22);
  a25=(a25/a22);
  a4=sin(a4);
  a4=(a4*a12);
  a4=(a20*a4);
  a4=(a19*a4);
  a21=sin(a21);
  a21=(a21*a12);
  a10=(a10*a21);
  a9=(a9*a10);
  a4=(a4-a9);
  a7=sin(a7);
  a7=(a7*a12);
  a24=(a24*a7);
  a23=(a23*a24);
  a4=(a4+a23);
  a25=(a25*a4);
  a3=(a3-a25);
  a3=(a0*a3);
  a13=(a13+a3);
  a11=(a11/a0);
  a13=(a13*a11);
  a11=-8.3333333333333329e-02;
  a8=(a11*a8);
  a8=(a2*a8);
  a8=(a1*a8);
  a18=(a11*a18);
  a18=(a16*a18);
  a18=(a15*a18);
  a8=(a8-a18);
  a5=(a11*a5);
  a5=(a20*a5);
  a5=(a19*a5);
  a8=(a8+a5);
  a8=(a8/a22);
  a6=(a11*a6);
  a2=(a2*a6);
  a1=(a1*a2);
  a17=(a11*a17);
  a16=(a16*a17);
  a15=(a15*a16);
  a1=(a1-a15);
  a26=(a11*a26);
  a26=(a20*a26);
  a26=(a19*a26);
  a1=(a1-a26);
  a1=(a1/a22);
  a26=(a1/a22);
  a26=(a26*a28);
  a8=(a8-a26);
  a8=(a0*a8);
  a11=(a11*a27);
  a20=(a20*a11);
  a19=(a19*a20);
  a19=(a19/a22);
  a1=(a1/a22);
  a1=(a1*a4);
  a19=(a19-a1);
  a19=(a0*a19);
  a8=(a8+a19);
  a14=(a14/a0);
  a8=(a8*a14);
  a13=(a13+a8);
  a13=(-a13);
  if (res[0]!=0) res[0][3]=a13;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_small_g(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_small_g_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_small_g_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_small_g_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_small_g_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_small_g_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_small_g_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_small_g_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int tkad_small_g_n_in(void) { return 4;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int tkad_small_g_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real tkad_small_g_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* tkad_small_g_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    case 3: return "i3";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* tkad_small_g_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* tkad_small_g_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s0;
    case 2: return casadi_s0;
    case 3: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* tkad_small_g_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_small_g_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 4;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}


