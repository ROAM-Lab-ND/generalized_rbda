/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class spi_command_lcmt : LCM.LCM.LCMEncodable
    {
        public float[] q_des_abad;
        public float[] q_des_hip;
        public float[] q_des_knee;
        public float[] qd_des_abad;
        public float[] qd_des_hip;
        public float[] qd_des_knee;
        public float[] kp_abad;
        public float[] kp_hip;
        public float[] kp_knee;
        public float[] kd_abad;
        public float[] kd_hip;
        public float[] kd_knee;
        public float[] tau_abad_ff;
        public float[] tau_hip_ff;
        public float[] tau_knee_ff;
        public int[] flags;
 
        public spi_command_lcmt()
        {
            q_des_abad = new float[4];
            q_des_hip = new float[4];
            q_des_knee = new float[4];
            qd_des_abad = new float[4];
            qd_des_hip = new float[4];
            qd_des_knee = new float[4];
            kp_abad = new float[4];
            kp_hip = new float[4];
            kp_knee = new float[4];
            kd_abad = new float[4];
            kd_hip = new float[4];
            kd_knee = new float[4];
            tau_abad_ff = new float[4];
            tau_hip_ff = new float[4];
            tau_knee_ff = new float[4];
            flags = new int[4];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xecc8eaa6369bc167L;
 
        static spi_command_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.spi_command_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.spi_command_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 4; a++) {
                outs.Write(this.q_des_abad[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.q_des_hip[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.q_des_knee[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.qd_des_abad[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.qd_des_hip[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.qd_des_knee[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.kp_abad[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.kp_hip[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.kp_knee[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.kd_abad[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.kd_hip[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.kd_knee[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.tau_abad_ff[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.tau_hip_ff[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.tau_knee_ff[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.flags[a]); 
            }
 
        }
 
        public spi_command_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public spi_command_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.spi_command_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.spi_command_lcmt o = new LCMTypes.spi_command_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.q_des_abad = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.q_des_abad[a] = ins.ReadSingle();
            }
 
            this.q_des_hip = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.q_des_hip[a] = ins.ReadSingle();
            }
 
            this.q_des_knee = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.q_des_knee[a] = ins.ReadSingle();
            }
 
            this.qd_des_abad = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.qd_des_abad[a] = ins.ReadSingle();
            }
 
            this.qd_des_hip = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.qd_des_hip[a] = ins.ReadSingle();
            }
 
            this.qd_des_knee = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.qd_des_knee[a] = ins.ReadSingle();
            }
 
            this.kp_abad = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.kp_abad[a] = ins.ReadSingle();
            }
 
            this.kp_hip = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.kp_hip[a] = ins.ReadSingle();
            }
 
            this.kp_knee = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.kp_knee[a] = ins.ReadSingle();
            }
 
            this.kd_abad = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.kd_abad[a] = ins.ReadSingle();
            }
 
            this.kd_hip = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.kd_hip[a] = ins.ReadSingle();
            }
 
            this.kd_knee = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.kd_knee[a] = ins.ReadSingle();
            }
 
            this.tau_abad_ff = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.tau_abad_ff[a] = ins.ReadSingle();
            }
 
            this.tau_hip_ff = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.tau_hip_ff[a] = ins.ReadSingle();
            }
 
            this.tau_knee_ff = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.tau_knee_ff[a] = ins.ReadSingle();
            }
 
            this.flags = new int[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.flags[a] = ins.ReadInt32();
            }
 
        }
 
        public LCMTypes.spi_command_lcmt Copy()
        {
            LCMTypes.spi_command_lcmt outobj = new LCMTypes.spi_command_lcmt();
            outobj.q_des_abad = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.q_des_abad[a] = this.q_des_abad[a];
            }
 
            outobj.q_des_hip = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.q_des_hip[a] = this.q_des_hip[a];
            }
 
            outobj.q_des_knee = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.q_des_knee[a] = this.q_des_knee[a];
            }
 
            outobj.qd_des_abad = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.qd_des_abad[a] = this.qd_des_abad[a];
            }
 
            outobj.qd_des_hip = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.qd_des_hip[a] = this.qd_des_hip[a];
            }
 
            outobj.qd_des_knee = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.qd_des_knee[a] = this.qd_des_knee[a];
            }
 
            outobj.kp_abad = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.kp_abad[a] = this.kp_abad[a];
            }
 
            outobj.kp_hip = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.kp_hip[a] = this.kp_hip[a];
            }
 
            outobj.kp_knee = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.kp_knee[a] = this.kp_knee[a];
            }
 
            outobj.kd_abad = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.kd_abad[a] = this.kd_abad[a];
            }
 
            outobj.kd_hip = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.kd_hip[a] = this.kd_hip[a];
            }
 
            outobj.kd_knee = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.kd_knee[a] = this.kd_knee[a];
            }
 
            outobj.tau_abad_ff = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.tau_abad_ff[a] = this.tau_abad_ff[a];
            }
 
            outobj.tau_hip_ff = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.tau_hip_ff[a] = this.tau_hip_ff[a];
            }
 
            outobj.tau_knee_ff = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.tau_knee_ff[a] = this.tau_knee_ff[a];
            }
 
            outobj.flags = new int[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.flags[a] = this.flags[a];
            }
 
            return outobj;
        }
    }
}

