/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class state_estimator_lcmt : LCM.LCM.LCMEncodable
    {
        public float[] p;
        public float[] vWorld;
        public float[] vBody;
        public float[] rpy;
        public float[] omegaBody;
        public float[] omegaWorld;
        public float[] quat;
        public float[] contact_estimate;
        public float[] aBody;
        public float[] aWorld;
        public long lcm_published_timestamp;
        public float[] pfoot_rel_body;
        public float[] vfoot;
 
        public state_estimator_lcmt()
        {
            p = new float[3];
            vWorld = new float[3];
            vBody = new float[3];
            rpy = new float[3];
            omegaBody = new float[3];
            omegaWorld = new float[3];
            quat = new float[4];
            contact_estimate = new float[4];
            aBody = new float[3];
            aWorld = new float[3];
            pfoot_rel_body = new float[12];
            vfoot = new float[12];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x6ff4b46951858a4aL;
 
        static state_estimator_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.state_estimator_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.state_estimator_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 3; a++) {
                outs.Write(this.p[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.vWorld[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.vBody[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.rpy[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.omegaBody[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.omegaWorld[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.quat[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.contact_estimate[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.aBody[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.aWorld[a]); 
            }
 
            outs.Write(this.lcm_published_timestamp); 
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.pfoot_rel_body[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.vfoot[a]); 
            }
 
        }
 
        public state_estimator_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public state_estimator_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.state_estimator_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.state_estimator_lcmt o = new LCMTypes.state_estimator_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.p = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.p[a] = ins.ReadSingle();
            }
 
            this.vWorld = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.vWorld[a] = ins.ReadSingle();
            }
 
            this.vBody = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.vBody[a] = ins.ReadSingle();
            }
 
            this.rpy = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.rpy[a] = ins.ReadSingle();
            }
 
            this.omegaBody = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.omegaBody[a] = ins.ReadSingle();
            }
 
            this.omegaWorld = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.omegaWorld[a] = ins.ReadSingle();
            }
 
            this.quat = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.quat[a] = ins.ReadSingle();
            }
 
            this.contact_estimate = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.contact_estimate[a] = ins.ReadSingle();
            }
 
            this.aBody = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.aBody[a] = ins.ReadSingle();
            }
 
            this.aWorld = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.aWorld[a] = ins.ReadSingle();
            }
 
            this.lcm_published_timestamp = ins.ReadInt64();
 
            this.pfoot_rel_body = new float[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.pfoot_rel_body[a] = ins.ReadSingle();
            }
 
            this.vfoot = new float[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.vfoot[a] = ins.ReadSingle();
            }
 
        }
 
        public LCMTypes.state_estimator_lcmt Copy()
        {
            LCMTypes.state_estimator_lcmt outobj = new LCMTypes.state_estimator_lcmt();
            outobj.p = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.p[a] = this.p[a];
            }
 
            outobj.vWorld = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.vWorld[a] = this.vWorld[a];
            }
 
            outobj.vBody = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.vBody[a] = this.vBody[a];
            }
 
            outobj.rpy = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.rpy[a] = this.rpy[a];
            }
 
            outobj.omegaBody = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.omegaBody[a] = this.omegaBody[a];
            }
 
            outobj.omegaWorld = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.omegaWorld[a] = this.omegaWorld[a];
            }
 
            outobj.quat = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.quat[a] = this.quat[a];
            }
 
            outobj.contact_estimate = new float[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.contact_estimate[a] = this.contact_estimate[a];
            }
 
            outobj.aBody = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.aBody[a] = this.aBody[a];
            }
 
            outobj.aWorld = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.aWorld[a] = this.aWorld[a];
            }
 
            outobj.lcm_published_timestamp = this.lcm_published_timestamp;
 
            outobj.pfoot_rel_body = new float[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.pfoot_rel_body[a] = this.pfoot_rel_body[a];
            }
 
            outobj.vfoot = new float[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.vfoot[a] = this.vfoot[a];
            }
 
            return outobj;
        }
    }
}

