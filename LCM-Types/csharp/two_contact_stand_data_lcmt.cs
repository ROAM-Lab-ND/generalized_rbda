/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class two_contact_stand_data_lcmt : LCM.LCM.LCMEncodable
    {
        public double exit_flag;
        public double nWSR;
        public double cpu_time_microseconds;
        public double[] f_opt;
        public double[] f_ref;
        public double[] f_control;
        public double[] f_unc;
        public double[] minForces;
        public double[] maxForces;
        public double[] contact_state;
        public double stance_legs;
        public double[] p_des;
        public double[] p_act;
        public double[] rpy;
        public double[] rpy_act;
        public double[] lbA;
        public double[] ubA;
        public double[] C_times_f;
        public double[] s;
        public double cost_to_go;
        public double[] Q_lqr;
        public double R_lqr;
        public double R_fil;
 
        public two_contact_stand_data_lcmt()
        {
            f_opt = new double[12];
            f_ref = new double[4];
            f_control = new double[12];
            f_unc = new double[12];
            minForces = new double[4];
            maxForces = new double[4];
            contact_state = new double[4];
            p_des = new double[3];
            p_act = new double[3];
            rpy = new double[3];
            rpy_act = new double[3];
            lbA = new double[20];
            ubA = new double[20];
            C_times_f = new double[20];
            s = new double[12];
            Q_lqr = new double[12];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x1d23a52a90d0daacL;
 
        static two_contact_stand_data_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.two_contact_stand_data_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.two_contact_stand_data_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.exit_flag); 
 
            outs.Write(this.nWSR); 
 
            outs.Write(this.cpu_time_microseconds); 
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.f_opt[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.f_ref[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.f_control[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.f_unc[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.minForces[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.maxForces[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.contact_state[a]); 
            }
 
            outs.Write(this.stance_legs); 
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.p_des[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.p_act[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.rpy[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.rpy_act[a]); 
            }
 
            for (int a = 0; a < 20; a++) {
                outs.Write(this.lbA[a]); 
            }
 
            for (int a = 0; a < 20; a++) {
                outs.Write(this.ubA[a]); 
            }
 
            for (int a = 0; a < 20; a++) {
                outs.Write(this.C_times_f[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.s[a]); 
            }
 
            outs.Write(this.cost_to_go); 
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.Q_lqr[a]); 
            }
 
            outs.Write(this.R_lqr); 
 
            outs.Write(this.R_fil); 
 
        }
 
        public two_contact_stand_data_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public two_contact_stand_data_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.two_contact_stand_data_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.two_contact_stand_data_lcmt o = new LCMTypes.two_contact_stand_data_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.exit_flag = ins.ReadDouble();
 
            this.nWSR = ins.ReadDouble();
 
            this.cpu_time_microseconds = ins.ReadDouble();
 
            this.f_opt = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.f_opt[a] = ins.ReadDouble();
            }
 
            this.f_ref = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.f_ref[a] = ins.ReadDouble();
            }
 
            this.f_control = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.f_control[a] = ins.ReadDouble();
            }
 
            this.f_unc = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.f_unc[a] = ins.ReadDouble();
            }
 
            this.minForces = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.minForces[a] = ins.ReadDouble();
            }
 
            this.maxForces = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.maxForces[a] = ins.ReadDouble();
            }
 
            this.contact_state = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.contact_state[a] = ins.ReadDouble();
            }
 
            this.stance_legs = ins.ReadDouble();
 
            this.p_des = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.p_des[a] = ins.ReadDouble();
            }
 
            this.p_act = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.p_act[a] = ins.ReadDouble();
            }
 
            this.rpy = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.rpy[a] = ins.ReadDouble();
            }
 
            this.rpy_act = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.rpy_act[a] = ins.ReadDouble();
            }
 
            this.lbA = new double[(int) 20];
            for (int a = 0; a < 20; a++) {
                this.lbA[a] = ins.ReadDouble();
            }
 
            this.ubA = new double[(int) 20];
            for (int a = 0; a < 20; a++) {
                this.ubA[a] = ins.ReadDouble();
            }
 
            this.C_times_f = new double[(int) 20];
            for (int a = 0; a < 20; a++) {
                this.C_times_f[a] = ins.ReadDouble();
            }
 
            this.s = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.s[a] = ins.ReadDouble();
            }
 
            this.cost_to_go = ins.ReadDouble();
 
            this.Q_lqr = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.Q_lqr[a] = ins.ReadDouble();
            }
 
            this.R_lqr = ins.ReadDouble();
 
            this.R_fil = ins.ReadDouble();
 
        }
 
        public LCMTypes.two_contact_stand_data_lcmt Copy()
        {
            LCMTypes.two_contact_stand_data_lcmt outobj = new LCMTypes.two_contact_stand_data_lcmt();
            outobj.exit_flag = this.exit_flag;
 
            outobj.nWSR = this.nWSR;
 
            outobj.cpu_time_microseconds = this.cpu_time_microseconds;
 
            outobj.f_opt = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.f_opt[a] = this.f_opt[a];
            }
 
            outobj.f_ref = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.f_ref[a] = this.f_ref[a];
            }
 
            outobj.f_control = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.f_control[a] = this.f_control[a];
            }
 
            outobj.f_unc = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.f_unc[a] = this.f_unc[a];
            }
 
            outobj.minForces = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.minForces[a] = this.minForces[a];
            }
 
            outobj.maxForces = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.maxForces[a] = this.maxForces[a];
            }
 
            outobj.contact_state = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.contact_state[a] = this.contact_state[a];
            }
 
            outobj.stance_legs = this.stance_legs;
 
            outobj.p_des = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.p_des[a] = this.p_des[a];
            }
 
            outobj.p_act = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.p_act[a] = this.p_act[a];
            }
 
            outobj.rpy = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.rpy[a] = this.rpy[a];
            }
 
            outobj.rpy_act = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.rpy_act[a] = this.rpy_act[a];
            }
 
            outobj.lbA = new double[(int) 20];
            for (int a = 0; a < 20; a++) {
                outobj.lbA[a] = this.lbA[a];
            }
 
            outobj.ubA = new double[(int) 20];
            for (int a = 0; a < 20; a++) {
                outobj.ubA[a] = this.ubA[a];
            }
 
            outobj.C_times_f = new double[(int) 20];
            for (int a = 0; a < 20; a++) {
                outobj.C_times_f[a] = this.C_times_f[a];
            }
 
            outobj.s = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.s[a] = this.s[a];
            }
 
            outobj.cost_to_go = this.cost_to_go;
 
            outobj.Q_lqr = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.Q_lqr[a] = this.Q_lqr[a];
            }
 
            outobj.R_lqr = this.R_lqr;
 
            outobj.R_fil = this.R_fil;
 
            return outobj;
        }
    }
}

