/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class jump_callback_lcmt : LCM.LCM.LCMEncodable
    {
        public bool success;
        public float net_jump_distance;
        public float net_yaw_change;
 
        public jump_callback_lcmt()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x9e8b2897eacb68b2L;
 
        static jump_callback_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.jump_callback_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.jump_callback_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.success); 
 
            outs.Write(this.net_jump_distance); 
 
            outs.Write(this.net_yaw_change); 
 
        }
 
        public jump_callback_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public jump_callback_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.jump_callback_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.jump_callback_lcmt o = new LCMTypes.jump_callback_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.success = ins.ReadBoolean();
 
            this.net_jump_distance = ins.ReadSingle();
 
            this.net_yaw_change = ins.ReadSingle();
 
        }
 
        public LCMTypes.jump_callback_lcmt Copy()
        {
            LCMTypes.jump_callback_lcmt outobj = new LCMTypes.jump_callback_lcmt();
            outobj.success = this.success;
 
            outobj.net_jump_distance = this.net_jump_distance;
 
            outobj.net_yaw_change = this.net_yaw_change;
 
            return outobj;
        }
    }
}

