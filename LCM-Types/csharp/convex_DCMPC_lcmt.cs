/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class convex_DCMPC_lcmt : LCM.LCM.LCMEncodable
    {
        public float[] X_guess;
        public float[] Xref;
        public float[] Uref;
        public float[] cs;
        public float[] dt;
        public float[] r;
        public float psi;
        public float[] q_min;
        public float[] q_max;
        public float[] qd_min;
        public float[] qd_max;
        public float[] q_init;
        public float[] qd_init;
        public float mu;
        public float fmax;
        public float mass;
        public float[] Ib;
        public float[] Ib_inv;
        public float g;
        public float[] Q;
        public float[] R;
        public float[] X;
        public float[] U;
 
        public convex_DCMPC_lcmt()
        {
            X_guess = new float[252];
            Xref = new float[132];
            Uref = new float[120];
            cs = new float[40];
            dt = new float[10];
            r = new float[12];
            q_min = new float[6];
            q_max = new float[6];
            qd_min = new float[6];
            qd_max = new float[6];
            q_init = new float[6];
            qd_init = new float[6];
            Ib = new float[3];
            Ib_inv = new float[3];
            Q = new float[12];
            R = new float[12];
            X = new float[132];
            U = new float[120];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x02729437cbf038bfL;
 
        static convex_DCMPC_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.convex_DCMPC_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.convex_DCMPC_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 252; a++) {
                outs.Write(this.X_guess[a]); 
            }
 
            for (int a = 0; a < 132; a++) {
                outs.Write(this.Xref[a]); 
            }
 
            for (int a = 0; a < 120; a++) {
                outs.Write(this.Uref[a]); 
            }
 
            for (int a = 0; a < 40; a++) {
                outs.Write(this.cs[a]); 
            }
 
            for (int a = 0; a < 10; a++) {
                outs.Write(this.dt[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.r[a]); 
            }
 
            outs.Write(this.psi); 
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.q_min[a]); 
            }
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.q_max[a]); 
            }
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.qd_min[a]); 
            }
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.qd_max[a]); 
            }
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.q_init[a]); 
            }
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.qd_init[a]); 
            }
 
            outs.Write(this.mu); 
 
            outs.Write(this.fmax); 
 
            outs.Write(this.mass); 
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Ib[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Ib_inv[a]); 
            }
 
            outs.Write(this.g); 
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.Q[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.R[a]); 
            }
 
            for (int a = 0; a < 132; a++) {
                outs.Write(this.X[a]); 
            }
 
            for (int a = 0; a < 120; a++) {
                outs.Write(this.U[a]); 
            }
 
        }
 
        public convex_DCMPC_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public convex_DCMPC_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.convex_DCMPC_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.convex_DCMPC_lcmt o = new LCMTypes.convex_DCMPC_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.X_guess = new float[(int) 252];
            for (int a = 0; a < 252; a++) {
                this.X_guess[a] = ins.ReadSingle();
            }
 
            this.Xref = new float[(int) 132];
            for (int a = 0; a < 132; a++) {
                this.Xref[a] = ins.ReadSingle();
            }
 
            this.Uref = new float[(int) 120];
            for (int a = 0; a < 120; a++) {
                this.Uref[a] = ins.ReadSingle();
            }
 
            this.cs = new float[(int) 40];
            for (int a = 0; a < 40; a++) {
                this.cs[a] = ins.ReadSingle();
            }
 
            this.dt = new float[(int) 10];
            for (int a = 0; a < 10; a++) {
                this.dt[a] = ins.ReadSingle();
            }
 
            this.r = new float[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.r[a] = ins.ReadSingle();
            }
 
            this.psi = ins.ReadSingle();
 
            this.q_min = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.q_min[a] = ins.ReadSingle();
            }
 
            this.q_max = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.q_max[a] = ins.ReadSingle();
            }
 
            this.qd_min = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.qd_min[a] = ins.ReadSingle();
            }
 
            this.qd_max = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.qd_max[a] = ins.ReadSingle();
            }
 
            this.q_init = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.q_init[a] = ins.ReadSingle();
            }
 
            this.qd_init = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.qd_init[a] = ins.ReadSingle();
            }
 
            this.mu = ins.ReadSingle();
 
            this.fmax = ins.ReadSingle();
 
            this.mass = ins.ReadSingle();
 
            this.Ib = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Ib[a] = ins.ReadSingle();
            }
 
            this.Ib_inv = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Ib_inv[a] = ins.ReadSingle();
            }
 
            this.g = ins.ReadSingle();
 
            this.Q = new float[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.Q[a] = ins.ReadSingle();
            }
 
            this.R = new float[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.R[a] = ins.ReadSingle();
            }
 
            this.X = new float[(int) 132];
            for (int a = 0; a < 132; a++) {
                this.X[a] = ins.ReadSingle();
            }
 
            this.U = new float[(int) 120];
            for (int a = 0; a < 120; a++) {
                this.U[a] = ins.ReadSingle();
            }
 
        }
 
        public LCMTypes.convex_DCMPC_lcmt Copy()
        {
            LCMTypes.convex_DCMPC_lcmt outobj = new LCMTypes.convex_DCMPC_lcmt();
            outobj.X_guess = new float[(int) 252];
            for (int a = 0; a < 252; a++) {
                outobj.X_guess[a] = this.X_guess[a];
            }
 
            outobj.Xref = new float[(int) 132];
            for (int a = 0; a < 132; a++) {
                outobj.Xref[a] = this.Xref[a];
            }
 
            outobj.Uref = new float[(int) 120];
            for (int a = 0; a < 120; a++) {
                outobj.Uref[a] = this.Uref[a];
            }
 
            outobj.cs = new float[(int) 40];
            for (int a = 0; a < 40; a++) {
                outobj.cs[a] = this.cs[a];
            }
 
            outobj.dt = new float[(int) 10];
            for (int a = 0; a < 10; a++) {
                outobj.dt[a] = this.dt[a];
            }
 
            outobj.r = new float[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.r[a] = this.r[a];
            }
 
            outobj.psi = this.psi;
 
            outobj.q_min = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.q_min[a] = this.q_min[a];
            }
 
            outobj.q_max = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.q_max[a] = this.q_max[a];
            }
 
            outobj.qd_min = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.qd_min[a] = this.qd_min[a];
            }
 
            outobj.qd_max = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.qd_max[a] = this.qd_max[a];
            }
 
            outobj.q_init = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.q_init[a] = this.q_init[a];
            }
 
            outobj.qd_init = new float[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.qd_init[a] = this.qd_init[a];
            }
 
            outobj.mu = this.mu;
 
            outobj.fmax = this.fmax;
 
            outobj.mass = this.mass;
 
            outobj.Ib = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Ib[a] = this.Ib[a];
            }
 
            outobj.Ib_inv = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Ib_inv[a] = this.Ib_inv[a];
            }
 
            outobj.g = this.g;
 
            outobj.Q = new float[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.Q[a] = this.Q[a];
            }
 
            outobj.R = new float[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.R[a] = this.R[a];
            }
 
            outobj.X = new float[(int) 132];
            for (int a = 0; a < 132; a++) {
                outobj.X[a] = this.X[a];
            }
 
            outobj.U = new float[(int) 120];
            for (int a = 0; a < 120; a++) {
                outobj.U[a] = this.U[a];
            }
 
            return outobj;
        }
    }
}

