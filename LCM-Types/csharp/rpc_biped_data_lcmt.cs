/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class rpc_biped_data_lcmt : LCM.LCM.LCMEncodable
    {
        public double cpu_opt_time_microseconds;
        public double t_sent;
        public double time_start;
        public double[] dt_pred;
        public double[,] x_opt;
        public double[,] u_opt;
        public double[,] p_opt;
 
        public rpc_biped_data_lcmt()
        {
            dt_pred = new double[8];
            x_opt = new double[8,12];
            u_opt = new double[8,20];
            p_opt = new double[3,2];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xf933cc13f4843204L;
 
        static rpc_biped_data_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.rpc_biped_data_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.rpc_biped_data_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.cpu_opt_time_microseconds); 
 
            outs.Write(this.t_sent); 
 
            outs.Write(this.time_start); 
 
            for (int a = 0; a < 8; a++) {
                outs.Write(this.dt_pred[a]); 
            }
 
            for (int a = 0; a < 8; a++) {
                for (int b = 0; b < 12; b++) {
                    outs.Write(this.x_opt[a,b]); 
                }
            }
 
            for (int a = 0; a < 8; a++) {
                for (int b = 0; b < 20; b++) {
                    outs.Write(this.u_opt[a,b]); 
                }
            }
 
            for (int a = 0; a < 3; a++) {
                for (int b = 0; b < 2; b++) {
                    outs.Write(this.p_opt[a,b]); 
                }
            }
 
        }
 
        public rpc_biped_data_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public rpc_biped_data_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.rpc_biped_data_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.rpc_biped_data_lcmt o = new LCMTypes.rpc_biped_data_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.cpu_opt_time_microseconds = ins.ReadDouble();
 
            this.t_sent = ins.ReadDouble();
 
            this.time_start = ins.ReadDouble();
 
            this.dt_pred = new double[(int) 8];
            for (int a = 0; a < 8; a++) {
                this.dt_pred[a] = ins.ReadDouble();
            }
 
            this.x_opt = new double[(int) 8,(int) 12];
            for (int a = 0; a < 8; a++) {
                for (int b = 0; b < 12; b++) {
                    this.x_opt[a,b] = ins.ReadDouble();
                }
            }
 
            this.u_opt = new double[(int) 8,(int) 20];
            for (int a = 0; a < 8; a++) {
                for (int b = 0; b < 20; b++) {
                    this.u_opt[a,b] = ins.ReadDouble();
                }
            }
 
            this.p_opt = new double[(int) 3,(int) 2];
            for (int a = 0; a < 3; a++) {
                for (int b = 0; b < 2; b++) {
                    this.p_opt[a,b] = ins.ReadDouble();
                }
            }
 
        }
 
        public LCMTypes.rpc_biped_data_lcmt Copy()
        {
            LCMTypes.rpc_biped_data_lcmt outobj = new LCMTypes.rpc_biped_data_lcmt();
            outobj.cpu_opt_time_microseconds = this.cpu_opt_time_microseconds;
 
            outobj.t_sent = this.t_sent;
 
            outobj.time_start = this.time_start;
 
            outobj.dt_pred = new double[(int) 8];
            for (int a = 0; a < 8; a++) {
                outobj.dt_pred[a] = this.dt_pred[a];
            }
 
            outobj.x_opt = new double[(int) 8,(int) 12];
            for (int a = 0; a < 8; a++) {
                for (int b = 0; b < 12; b++) {
                    outobj.x_opt[a,b] = this.x_opt[a,b];
                }
            }
 
            outobj.u_opt = new double[(int) 8,(int) 20];
            for (int a = 0; a < 8; a++) {
                for (int b = 0; b < 20; b++) {
                    outobj.u_opt[a,b] = this.u_opt[a,b];
                }
            }
 
            outobj.p_opt = new double[(int) 3,(int) 2];
            for (int a = 0; a < 3; a++) {
                for (int b = 0; b < 2; b++) {
                    outobj.p_opt[a,b] = this.p_opt[a,b];
                }
            }
 
            return outobj;
        }
    }
}

