/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class obstacle_visual_lcmt : LCM.LCM.LCMEncodable
    {
        public int num_obs;
        public double[,] location;
        public double sigma;
        public double height;
        public double[] mesh_center_pos;
 
        public obstacle_visual_lcmt()
        {
            location = new double[100,3];
            mesh_center_pos = new double[3];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xf74f22add035377dL;
 
        static obstacle_visual_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.obstacle_visual_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.obstacle_visual_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.num_obs); 
 
            for (int a = 0; a < 100; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.location[a,b]); 
                }
            }
 
            outs.Write(this.sigma); 
 
            outs.Write(this.height); 
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.mesh_center_pos[a]); 
            }
 
        }
 
        public obstacle_visual_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public obstacle_visual_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.obstacle_visual_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.obstacle_visual_lcmt o = new LCMTypes.obstacle_visual_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.num_obs = ins.ReadInt32();
 
            this.location = new double[(int) 100,(int) 3];
            for (int a = 0; a < 100; a++) {
                for (int b = 0; b < 3; b++) {
                    this.location[a,b] = ins.ReadDouble();
                }
            }
 
            this.sigma = ins.ReadDouble();
 
            this.height = ins.ReadDouble();
 
            this.mesh_center_pos = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.mesh_center_pos[a] = ins.ReadDouble();
            }
 
        }
 
        public LCMTypes.obstacle_visual_lcmt Copy()
        {
            LCMTypes.obstacle_visual_lcmt outobj = new LCMTypes.obstacle_visual_lcmt();
            outobj.num_obs = this.num_obs;
 
            outobj.location = new double[(int) 100,(int) 3];
            for (int a = 0; a < 100; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.location[a,b] = this.location[a,b];
                }
            }
 
            outobj.sigma = this.sigma;
 
            outobj.height = this.height;
 
            outobj.mesh_center_pos = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.mesh_center_pos[a] = this.mesh_center_pos[a];
            }
 
            return outobj;
        }
    }
}

