/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class dj_pad_lcmt : LCM.LCM.LCMEncodable
    {
        public double[] slider_0;
        public double[] slider_1;
        public double[] slider_2;
        public double[] slider_3;
        public double[] slider_4;
        public double[] slider_5;
        public double[] slider_6;
        public double[] slider_7;
        public int params_count;
        public String[] params_names;
        public int[] params_types;
 
        public dj_pad_lcmt()
        {
            slider_0 = new double[3];
            slider_1 = new double[3];
            slider_2 = new double[3];
            slider_3 = new double[3];
            slider_4 = new double[3];
            slider_5 = new double[3];
            slider_6 = new double[3];
            slider_7 = new double[3];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x136a31e2d7e40798L;
 
        static dj_pad_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.dj_pad_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.dj_pad_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            for (int a = 0; a < 3; a++) {
                outs.Write(this.slider_0[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.slider_1[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.slider_2[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.slider_3[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.slider_4[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.slider_5[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.slider_6[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.slider_7[a]); 
            }
 
            outs.Write(this.params_count); 
 
            for (int a = 0; a < this.params_count; a++) {
                __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.params_names[a]); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
            }
 
            for (int a = 0; a < this.params_count; a++) {
                outs.Write(this.params_types[a]); 
            }
 
        }
 
        public dj_pad_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public dj_pad_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.dj_pad_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.dj_pad_lcmt o = new LCMTypes.dj_pad_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.slider_0 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.slider_0[a] = ins.ReadDouble();
            }
 
            this.slider_1 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.slider_1[a] = ins.ReadDouble();
            }
 
            this.slider_2 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.slider_2[a] = ins.ReadDouble();
            }
 
            this.slider_3 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.slider_3[a] = ins.ReadDouble();
            }
 
            this.slider_4 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.slider_4[a] = ins.ReadDouble();
            }
 
            this.slider_5 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.slider_5[a] = ins.ReadDouble();
            }
 
            this.slider_6 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.slider_6[a] = ins.ReadDouble();
            }
 
            this.slider_7 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.slider_7[a] = ins.ReadDouble();
            }
 
            this.params_count = ins.ReadInt32();
 
            this.params_names = new String[(int) params_count];
            for (int a = 0; a < this.params_count; a++) {
                __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.params_names[a] = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
            }
 
            this.params_types = new int[(int) params_count];
            for (int a = 0; a < this.params_count; a++) {
                this.params_types[a] = ins.ReadInt32();
            }
 
        }
 
        public LCMTypes.dj_pad_lcmt Copy()
        {
            LCMTypes.dj_pad_lcmt outobj = new LCMTypes.dj_pad_lcmt();
            outobj.slider_0 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.slider_0[a] = this.slider_0[a];
            }
 
            outobj.slider_1 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.slider_1[a] = this.slider_1[a];
            }
 
            outobj.slider_2 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.slider_2[a] = this.slider_2[a];
            }
 
            outobj.slider_3 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.slider_3[a] = this.slider_3[a];
            }
 
            outobj.slider_4 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.slider_4[a] = this.slider_4[a];
            }
 
            outobj.slider_5 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.slider_5[a] = this.slider_5[a];
            }
 
            outobj.slider_6 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.slider_6[a] = this.slider_6[a];
            }
 
            outobj.slider_7 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.slider_7[a] = this.slider_7[a];
            }
 
            outobj.params_count = this.params_count;
 
            outobj.params_names = new String[(int) params_count];
            for (int a = 0; a < this.params_count; a++) {
                outobj.params_names[a] = this.params_names[a];
            }
 
            outobj.params_types = new int[(int) params_count];
            for (int a = 0; a < this.params_count; a++) {
                outobj.params_types[a] = this.params_types[a];
            }
 
            return outobj;
        }
    }
}

