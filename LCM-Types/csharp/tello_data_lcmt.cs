/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class tello_data_lcmt : LCM.LCM.LCMEncodable
    {
        public float[] q_hipz;
        public float[] q_hipx;
        public float[] q_hipy;
        public float[] q_knee;
        public float[] q_ankle;
        public float[] qd_hipz;
        public float[] qd_hipx;
        public float[] qd_hipy;
        public float[] qd_knee;
        public float[] qd_ankle;
        public int[] flags;
        public int spi_driver_status;
 
        public tello_data_lcmt()
        {
            q_hipz = new float[2];
            q_hipx = new float[2];
            q_hipy = new float[2];
            q_knee = new float[2];
            q_ankle = new float[2];
            qd_hipz = new float[2];
            qd_hipx = new float[2];
            qd_hipy = new float[2];
            qd_knee = new float[2];
            qd_ankle = new float[2];
            flags = new int[4];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x9fb4ac24573690b7L;
 
        static tello_data_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.tello_data_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.tello_data_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 2; a++) {
                outs.Write(this.q_hipz[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.q_hipx[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.q_hipy[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.q_knee[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.q_ankle[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.qd_hipz[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.qd_hipx[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.qd_hipy[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.qd_knee[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.qd_ankle[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.flags[a]); 
            }
 
            outs.Write(this.spi_driver_status); 
 
        }
 
        public tello_data_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public tello_data_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.tello_data_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.tello_data_lcmt o = new LCMTypes.tello_data_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.q_hipz = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.q_hipz[a] = ins.ReadSingle();
            }
 
            this.q_hipx = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.q_hipx[a] = ins.ReadSingle();
            }
 
            this.q_hipy = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.q_hipy[a] = ins.ReadSingle();
            }
 
            this.q_knee = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.q_knee[a] = ins.ReadSingle();
            }
 
            this.q_ankle = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.q_ankle[a] = ins.ReadSingle();
            }
 
            this.qd_hipz = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.qd_hipz[a] = ins.ReadSingle();
            }
 
            this.qd_hipx = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.qd_hipx[a] = ins.ReadSingle();
            }
 
            this.qd_hipy = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.qd_hipy[a] = ins.ReadSingle();
            }
 
            this.qd_knee = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.qd_knee[a] = ins.ReadSingle();
            }
 
            this.qd_ankle = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.qd_ankle[a] = ins.ReadSingle();
            }
 
            this.flags = new int[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.flags[a] = ins.ReadInt32();
            }
 
            this.spi_driver_status = ins.ReadInt32();
 
        }
 
        public LCMTypes.tello_data_lcmt Copy()
        {
            LCMTypes.tello_data_lcmt outobj = new LCMTypes.tello_data_lcmt();
            outobj.q_hipz = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.q_hipz[a] = this.q_hipz[a];
            }
 
            outobj.q_hipx = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.q_hipx[a] = this.q_hipx[a];
            }
 
            outobj.q_hipy = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.q_hipy[a] = this.q_hipy[a];
            }
 
            outobj.q_knee = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.q_knee[a] = this.q_knee[a];
            }
 
            outobj.q_ankle = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.q_ankle[a] = this.q_ankle[a];
            }
 
            outobj.qd_hipz = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.qd_hipz[a] = this.qd_hipz[a];
            }
 
            outobj.qd_hipx = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.qd_hipx[a] = this.qd_hipx[a];
            }
 
            outobj.qd_hipy = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.qd_hipy[a] = this.qd_hipy[a];
            }
 
            outobj.qd_knee = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.qd_knee[a] = this.qd_knee[a];
            }
 
            outobj.qd_ankle = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.qd_ankle[a] = this.qd_ankle[a];
            }
 
            outobj.flags = new int[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.flags[a] = this.flags[a];
            }
 
            outobj.spi_driver_status = this.spi_driver_status;
 
            return outobj;
        }
    }
}

