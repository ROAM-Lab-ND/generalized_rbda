/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class humanoid_leg_cartesian_control_lcmt : LCM.LCM.LCMEncodable
    {
        public float[] pcom;
        public float[] pFootRightCurr;
        public float[] pFootLeftCurr;
        public float[] vFootRightCurr;
        public float[] vFootLeftCurr;
        public float[] pFootRightLand;
        public float[] pFootLeftLand;
        public float[] footForceRight;
        public float[] footForceLeft;
        public float[] legTorqueRight;
        public float[] legTorqueLeft;
 
        public humanoid_leg_cartesian_control_lcmt()
        {
            pcom = new float[3];
            pFootRightCurr = new float[3];
            pFootLeftCurr = new float[3];
            vFootRightCurr = new float[3];
            vFootLeftCurr = new float[3];
            pFootRightLand = new float[3];
            pFootLeftLand = new float[3];
            footForceRight = new float[3];
            footForceLeft = new float[3];
            legTorqueRight = new float[5];
            legTorqueLeft = new float[5];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xa78fc920bee9c719L;
 
        static humanoid_leg_cartesian_control_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.humanoid_leg_cartesian_control_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.humanoid_leg_cartesian_control_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 3; a++) {
                outs.Write(this.pcom[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.pFootRightCurr[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.pFootLeftCurr[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.vFootRightCurr[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.vFootLeftCurr[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.pFootRightLand[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.pFootLeftLand[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.footForceRight[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.footForceLeft[a]); 
            }
 
            for (int a = 0; a < 5; a++) {
                outs.Write(this.legTorqueRight[a]); 
            }
 
            for (int a = 0; a < 5; a++) {
                outs.Write(this.legTorqueLeft[a]); 
            }
 
        }
 
        public humanoid_leg_cartesian_control_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public humanoid_leg_cartesian_control_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.humanoid_leg_cartesian_control_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.humanoid_leg_cartesian_control_lcmt o = new LCMTypes.humanoid_leg_cartesian_control_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.pcom = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.pcom[a] = ins.ReadSingle();
            }
 
            this.pFootRightCurr = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.pFootRightCurr[a] = ins.ReadSingle();
            }
 
            this.pFootLeftCurr = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.pFootLeftCurr[a] = ins.ReadSingle();
            }
 
            this.vFootRightCurr = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.vFootRightCurr[a] = ins.ReadSingle();
            }
 
            this.vFootLeftCurr = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.vFootLeftCurr[a] = ins.ReadSingle();
            }
 
            this.pFootRightLand = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.pFootRightLand[a] = ins.ReadSingle();
            }
 
            this.pFootLeftLand = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.pFootLeftLand[a] = ins.ReadSingle();
            }
 
            this.footForceRight = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.footForceRight[a] = ins.ReadSingle();
            }
 
            this.footForceLeft = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.footForceLeft[a] = ins.ReadSingle();
            }
 
            this.legTorqueRight = new float[(int) 5];
            for (int a = 0; a < 5; a++) {
                this.legTorqueRight[a] = ins.ReadSingle();
            }
 
            this.legTorqueLeft = new float[(int) 5];
            for (int a = 0; a < 5; a++) {
                this.legTorqueLeft[a] = ins.ReadSingle();
            }
 
        }
 
        public LCMTypes.humanoid_leg_cartesian_control_lcmt Copy()
        {
            LCMTypes.humanoid_leg_cartesian_control_lcmt outobj = new LCMTypes.humanoid_leg_cartesian_control_lcmt();
            outobj.pcom = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.pcom[a] = this.pcom[a];
            }
 
            outobj.pFootRightCurr = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.pFootRightCurr[a] = this.pFootRightCurr[a];
            }
 
            outobj.pFootLeftCurr = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.pFootLeftCurr[a] = this.pFootLeftCurr[a];
            }
 
            outobj.vFootRightCurr = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.vFootRightCurr[a] = this.vFootRightCurr[a];
            }
 
            outobj.vFootLeftCurr = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.vFootLeftCurr[a] = this.vFootLeftCurr[a];
            }
 
            outobj.pFootRightLand = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.pFootRightLand[a] = this.pFootRightLand[a];
            }
 
            outobj.pFootLeftLand = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.pFootLeftLand[a] = this.pFootLeftLand[a];
            }
 
            outobj.footForceRight = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.footForceRight[a] = this.footForceRight[a];
            }
 
            outobj.footForceLeft = new float[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.footForceLeft[a] = this.footForceLeft[a];
            }
 
            outobj.legTorqueRight = new float[(int) 5];
            for (int a = 0; a < 5; a++) {
                outobj.legTorqueRight[a] = this.legTorqueRight[a];
            }
 
            outobj.legTorqueLeft = new float[(int) 5];
            for (int a = 0; a < 5; a++) {
                outobj.legTorqueLeft[a] = this.legTorqueLeft[a];
            }
 
            return outobj;
        }
    }
}

