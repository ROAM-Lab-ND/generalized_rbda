/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class humanoid_arm_recovery_sim_outputs_lcmt : LCM.LCM.LCMEncodable
    {
        public bool terminate_sim;
        public bool body_low;
        public bool stayed_upright;
        public bool knee_on_ground;
        public bool opt_solved;
 
        public humanoid_arm_recovery_sim_outputs_lcmt()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x1cd303d81466f3ccL;
 
        static humanoid_arm_recovery_sim_outputs_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.humanoid_arm_recovery_sim_outputs_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.humanoid_arm_recovery_sim_outputs_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.terminate_sim); 
 
            outs.Write(this.body_low); 
 
            outs.Write(this.stayed_upright); 
 
            outs.Write(this.knee_on_ground); 
 
            outs.Write(this.opt_solved); 
 
        }
 
        public humanoid_arm_recovery_sim_outputs_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public humanoid_arm_recovery_sim_outputs_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.humanoid_arm_recovery_sim_outputs_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.humanoid_arm_recovery_sim_outputs_lcmt o = new LCMTypes.humanoid_arm_recovery_sim_outputs_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.terminate_sim = ins.ReadBoolean();
 
            this.body_low = ins.ReadBoolean();
 
            this.stayed_upright = ins.ReadBoolean();
 
            this.knee_on_ground = ins.ReadBoolean();
 
            this.opt_solved = ins.ReadBoolean();
 
        }
 
        public LCMTypes.humanoid_arm_recovery_sim_outputs_lcmt Copy()
        {
            LCMTypes.humanoid_arm_recovery_sim_outputs_lcmt outobj = new LCMTypes.humanoid_arm_recovery_sim_outputs_lcmt();
            outobj.terminate_sim = this.terminate_sim;
 
            outobj.body_low = this.body_low;
 
            outobj.stayed_upright = this.stayed_upright;
 
            outobj.knee_on_ground = this.knee_on_ground;
 
            outobj.opt_solved = this.opt_solved;
 
            return outobj;
        }
    }
}

