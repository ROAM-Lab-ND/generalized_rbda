/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class debug_visualization_lcmt : LCM.LCM.LCMEncodable
    {
        public int sphere_count;
        public int sphere_elements;
        public int sphere_position_elements;
        public int sphere_color_elements;
        public float[] sphere_positions;
        public float[] sphere_radii;
        public float[] sphere_colors;
        public int obst_count;
        public int obst_elements;
        public int obst_position_elements;
        public int obst_dim_elements;
        public int obst_rpy_elements;
        public int obst_color_elements;
        public float[] obst_positions;
        public float[] obst_oris;
        public float[] obst_dims;
        public float[] obst_colors;
        public int path_count;
        public int path_elements;
        public int path_position_elements;
        public int path_color_elements;
        public int[] path_lengths;
        public int[] path_start_idxs;
        public float[] path_widths;
        public float[] path_positions;
        public float[] path_colors;
        public int arrow_count;
        public int arrow_elements;
        public int arrow_position_elements;
        public int arrow_color_elements;
        public String[] arrow_ids;
        public float[] arrow_nom;
        public float[] arrow_base_positions;
        public float[] arrow_directions;
        public float[] arrow_colors;
 
        public debug_visualization_lcmt()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x0b9dfd6fd3533d6fL;
 
        static debug_visualization_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.debug_visualization_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.debug_visualization_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.sphere_count); 
 
            outs.Write(this.sphere_elements); 
 
            outs.Write(this.sphere_position_elements); 
 
            outs.Write(this.sphere_color_elements); 
 
            for (int a = 0; a < this.sphere_position_elements; a++) {
                outs.Write(this.sphere_positions[a]); 
            }
 
            for (int a = 0; a < this.sphere_elements; a++) {
                outs.Write(this.sphere_radii[a]); 
            }
 
            for (int a = 0; a < this.sphere_color_elements; a++) {
                outs.Write(this.sphere_colors[a]); 
            }
 
            outs.Write(this.obst_count); 
 
            outs.Write(this.obst_elements); 
 
            outs.Write(this.obst_position_elements); 
 
            outs.Write(this.obst_dim_elements); 
 
            outs.Write(this.obst_rpy_elements); 
 
            outs.Write(this.obst_color_elements); 
 
            for (int a = 0; a < this.obst_position_elements; a++) {
                outs.Write(this.obst_positions[a]); 
            }
 
            for (int a = 0; a < this.obst_rpy_elements; a++) {
                outs.Write(this.obst_oris[a]); 
            }
 
            for (int a = 0; a < this.obst_position_elements; a++) {
                outs.Write(this.obst_dims[a]); 
            }
 
            for (int a = 0; a < this.obst_color_elements; a++) {
                outs.Write(this.obst_colors[a]); 
            }
 
            outs.Write(this.path_count); 
 
            outs.Write(this.path_elements); 
 
            outs.Write(this.path_position_elements); 
 
            outs.Write(this.path_color_elements); 
 
            for (int a = 0; a < this.path_elements; a++) {
                outs.Write(this.path_lengths[a]); 
            }
 
            for (int a = 0; a < this.path_elements; a++) {
                outs.Write(this.path_start_idxs[a]); 
            }
 
            for (int a = 0; a < this.path_elements; a++) {
                outs.Write(this.path_widths[a]); 
            }
 
            for (int a = 0; a < this.path_position_elements; a++) {
                outs.Write(this.path_positions[a]); 
            }
 
            for (int a = 0; a < this.path_color_elements; a++) {
                outs.Write(this.path_colors[a]); 
            }
 
            outs.Write(this.arrow_count); 
 
            outs.Write(this.arrow_elements); 
 
            outs.Write(this.arrow_position_elements); 
 
            outs.Write(this.arrow_color_elements); 
 
            for (int a = 0; a < this.arrow_elements; a++) {
                __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.arrow_ids[a]); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
            }
 
            for (int a = 0; a < this.arrow_elements; a++) {
                outs.Write(this.arrow_nom[a]); 
            }
 
            for (int a = 0; a < this.arrow_position_elements; a++) {
                outs.Write(this.arrow_base_positions[a]); 
            }
 
            for (int a = 0; a < this.arrow_position_elements; a++) {
                outs.Write(this.arrow_directions[a]); 
            }
 
            for (int a = 0; a < this.arrow_color_elements; a++) {
                outs.Write(this.arrow_colors[a]); 
            }
 
        }
 
        public debug_visualization_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public debug_visualization_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.debug_visualization_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.debug_visualization_lcmt o = new LCMTypes.debug_visualization_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.sphere_count = ins.ReadInt32();
 
            this.sphere_elements = ins.ReadInt32();
 
            this.sphere_position_elements = ins.ReadInt32();
 
            this.sphere_color_elements = ins.ReadInt32();
 
            this.sphere_positions = new float[(int) sphere_position_elements];
            for (int a = 0; a < this.sphere_position_elements; a++) {
                this.sphere_positions[a] = ins.ReadSingle();
            }
 
            this.sphere_radii = new float[(int) sphere_elements];
            for (int a = 0; a < this.sphere_elements; a++) {
                this.sphere_radii[a] = ins.ReadSingle();
            }
 
            this.sphere_colors = new float[(int) sphere_color_elements];
            for (int a = 0; a < this.sphere_color_elements; a++) {
                this.sphere_colors[a] = ins.ReadSingle();
            }
 
            this.obst_count = ins.ReadInt32();
 
            this.obst_elements = ins.ReadInt32();
 
            this.obst_position_elements = ins.ReadInt32();
 
            this.obst_dim_elements = ins.ReadInt32();
 
            this.obst_rpy_elements = ins.ReadInt32();
 
            this.obst_color_elements = ins.ReadInt32();
 
            this.obst_positions = new float[(int) obst_position_elements];
            for (int a = 0; a < this.obst_position_elements; a++) {
                this.obst_positions[a] = ins.ReadSingle();
            }
 
            this.obst_oris = new float[(int) obst_rpy_elements];
            for (int a = 0; a < this.obst_rpy_elements; a++) {
                this.obst_oris[a] = ins.ReadSingle();
            }
 
            this.obst_dims = new float[(int) obst_position_elements];
            for (int a = 0; a < this.obst_position_elements; a++) {
                this.obst_dims[a] = ins.ReadSingle();
            }
 
            this.obst_colors = new float[(int) obst_color_elements];
            for (int a = 0; a < this.obst_color_elements; a++) {
                this.obst_colors[a] = ins.ReadSingle();
            }
 
            this.path_count = ins.ReadInt32();
 
            this.path_elements = ins.ReadInt32();
 
            this.path_position_elements = ins.ReadInt32();
 
            this.path_color_elements = ins.ReadInt32();
 
            this.path_lengths = new int[(int) path_elements];
            for (int a = 0; a < this.path_elements; a++) {
                this.path_lengths[a] = ins.ReadInt32();
            }
 
            this.path_start_idxs = new int[(int) path_elements];
            for (int a = 0; a < this.path_elements; a++) {
                this.path_start_idxs[a] = ins.ReadInt32();
            }
 
            this.path_widths = new float[(int) path_elements];
            for (int a = 0; a < this.path_elements; a++) {
                this.path_widths[a] = ins.ReadSingle();
            }
 
            this.path_positions = new float[(int) path_position_elements];
            for (int a = 0; a < this.path_position_elements; a++) {
                this.path_positions[a] = ins.ReadSingle();
            }
 
            this.path_colors = new float[(int) path_color_elements];
            for (int a = 0; a < this.path_color_elements; a++) {
                this.path_colors[a] = ins.ReadSingle();
            }
 
            this.arrow_count = ins.ReadInt32();
 
            this.arrow_elements = ins.ReadInt32();
 
            this.arrow_position_elements = ins.ReadInt32();
 
            this.arrow_color_elements = ins.ReadInt32();
 
            this.arrow_ids = new String[(int) arrow_elements];
            for (int a = 0; a < this.arrow_elements; a++) {
                __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.arrow_ids[a] = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
            }
 
            this.arrow_nom = new float[(int) arrow_elements];
            for (int a = 0; a < this.arrow_elements; a++) {
                this.arrow_nom[a] = ins.ReadSingle();
            }
 
            this.arrow_base_positions = new float[(int) arrow_position_elements];
            for (int a = 0; a < this.arrow_position_elements; a++) {
                this.arrow_base_positions[a] = ins.ReadSingle();
            }
 
            this.arrow_directions = new float[(int) arrow_position_elements];
            for (int a = 0; a < this.arrow_position_elements; a++) {
                this.arrow_directions[a] = ins.ReadSingle();
            }
 
            this.arrow_colors = new float[(int) arrow_color_elements];
            for (int a = 0; a < this.arrow_color_elements; a++) {
                this.arrow_colors[a] = ins.ReadSingle();
            }
 
        }
 
        public LCMTypes.debug_visualization_lcmt Copy()
        {
            LCMTypes.debug_visualization_lcmt outobj = new LCMTypes.debug_visualization_lcmt();
            outobj.sphere_count = this.sphere_count;
 
            outobj.sphere_elements = this.sphere_elements;
 
            outobj.sphere_position_elements = this.sphere_position_elements;
 
            outobj.sphere_color_elements = this.sphere_color_elements;
 
            outobj.sphere_positions = new float[(int) sphere_position_elements];
            for (int a = 0; a < this.sphere_position_elements; a++) {
                outobj.sphere_positions[a] = this.sphere_positions[a];
            }
 
            outobj.sphere_radii = new float[(int) sphere_elements];
            for (int a = 0; a < this.sphere_elements; a++) {
                outobj.sphere_radii[a] = this.sphere_radii[a];
            }
 
            outobj.sphere_colors = new float[(int) sphere_color_elements];
            for (int a = 0; a < this.sphere_color_elements; a++) {
                outobj.sphere_colors[a] = this.sphere_colors[a];
            }
 
            outobj.obst_count = this.obst_count;
 
            outobj.obst_elements = this.obst_elements;
 
            outobj.obst_position_elements = this.obst_position_elements;
 
            outobj.obst_dim_elements = this.obst_dim_elements;
 
            outobj.obst_rpy_elements = this.obst_rpy_elements;
 
            outobj.obst_color_elements = this.obst_color_elements;
 
            outobj.obst_positions = new float[(int) obst_position_elements];
            for (int a = 0; a < this.obst_position_elements; a++) {
                outobj.obst_positions[a] = this.obst_positions[a];
            }
 
            outobj.obst_oris = new float[(int) obst_rpy_elements];
            for (int a = 0; a < this.obst_rpy_elements; a++) {
                outobj.obst_oris[a] = this.obst_oris[a];
            }
 
            outobj.obst_dims = new float[(int) obst_position_elements];
            for (int a = 0; a < this.obst_position_elements; a++) {
                outobj.obst_dims[a] = this.obst_dims[a];
            }
 
            outobj.obst_colors = new float[(int) obst_color_elements];
            for (int a = 0; a < this.obst_color_elements; a++) {
                outobj.obst_colors[a] = this.obst_colors[a];
            }
 
            outobj.path_count = this.path_count;
 
            outobj.path_elements = this.path_elements;
 
            outobj.path_position_elements = this.path_position_elements;
 
            outobj.path_color_elements = this.path_color_elements;
 
            outobj.path_lengths = new int[(int) path_elements];
            for (int a = 0; a < this.path_elements; a++) {
                outobj.path_lengths[a] = this.path_lengths[a];
            }
 
            outobj.path_start_idxs = new int[(int) path_elements];
            for (int a = 0; a < this.path_elements; a++) {
                outobj.path_start_idxs[a] = this.path_start_idxs[a];
            }
 
            outobj.path_widths = new float[(int) path_elements];
            for (int a = 0; a < this.path_elements; a++) {
                outobj.path_widths[a] = this.path_widths[a];
            }
 
            outobj.path_positions = new float[(int) path_position_elements];
            for (int a = 0; a < this.path_position_elements; a++) {
                outobj.path_positions[a] = this.path_positions[a];
            }
 
            outobj.path_colors = new float[(int) path_color_elements];
            for (int a = 0; a < this.path_color_elements; a++) {
                outobj.path_colors[a] = this.path_colors[a];
            }
 
            outobj.arrow_count = this.arrow_count;
 
            outobj.arrow_elements = this.arrow_elements;
 
            outobj.arrow_position_elements = this.arrow_position_elements;
 
            outobj.arrow_color_elements = this.arrow_color_elements;
 
            outobj.arrow_ids = new String[(int) arrow_elements];
            for (int a = 0; a < this.arrow_elements; a++) {
                outobj.arrow_ids[a] = this.arrow_ids[a];
            }
 
            outobj.arrow_nom = new float[(int) arrow_elements];
            for (int a = 0; a < this.arrow_elements; a++) {
                outobj.arrow_nom[a] = this.arrow_nom[a];
            }
 
            outobj.arrow_base_positions = new float[(int) arrow_position_elements];
            for (int a = 0; a < this.arrow_position_elements; a++) {
                outobj.arrow_base_positions[a] = this.arrow_base_positions[a];
            }
 
            outobj.arrow_directions = new float[(int) arrow_position_elements];
            for (int a = 0; a < this.arrow_position_elements; a++) {
                outobj.arrow_directions[a] = this.arrow_directions[a];
            }
 
            outobj.arrow_colors = new float[(int) arrow_color_elements];
            for (int a = 0; a < this.arrow_color_elements; a++) {
                outobj.arrow_colors[a] = this.arrow_colors[a];
            }
 
            return outobj;
        }
    }
}

