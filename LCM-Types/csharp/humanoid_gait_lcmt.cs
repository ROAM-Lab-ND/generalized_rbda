/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class humanoid_gait_lcmt : LCM.LCM.LCMEncodable
    {
        public double[] contactStateScheduled;
        public double[] contactStatePrev;
        public double[] touchdownScheduled;
        public double[] liftoffScheduled;
        public double[] phaseVariable;
        public double[] phaseStance;
        public double[] phaseSwing;
        public double[] timeStanceRemaining;
        public double[] timeSwingRemaining;
        public double[] periodTime;
        public double[] timeStance;
        public double[] timeSwing;
        public double[] switchingPhase;
        public double[] phaseOffset;
        public double[] phaseScale;
 
        public humanoid_gait_lcmt()
        {
            contactStateScheduled = new double[4];
            contactStatePrev = new double[4];
            touchdownScheduled = new double[4];
            liftoffScheduled = new double[4];
            phaseVariable = new double[4];
            phaseStance = new double[4];
            phaseSwing = new double[4];
            timeStanceRemaining = new double[4];
            timeSwingRemaining = new double[4];
            periodTime = new double[4];
            timeStance = new double[4];
            timeSwing = new double[4];
            switchingPhase = new double[4];
            phaseOffset = new double[4];
            phaseScale = new double[4];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x83dcdfcbb409ec9aL;
 
        static humanoid_gait_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.humanoid_gait_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.humanoid_gait_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 4; a++) {
                outs.Write(this.contactStateScheduled[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.contactStatePrev[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.touchdownScheduled[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.liftoffScheduled[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.phaseVariable[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.phaseStance[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.phaseSwing[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.timeStanceRemaining[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.timeSwingRemaining[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.periodTime[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.timeStance[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.timeSwing[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.switchingPhase[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.phaseOffset[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.phaseScale[a]); 
            }
 
        }
 
        public humanoid_gait_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public humanoid_gait_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.humanoid_gait_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.humanoid_gait_lcmt o = new LCMTypes.humanoid_gait_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.contactStateScheduled = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.contactStateScheduled[a] = ins.ReadDouble();
            }
 
            this.contactStatePrev = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.contactStatePrev[a] = ins.ReadDouble();
            }
 
            this.touchdownScheduled = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.touchdownScheduled[a] = ins.ReadDouble();
            }
 
            this.liftoffScheduled = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.liftoffScheduled[a] = ins.ReadDouble();
            }
 
            this.phaseVariable = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.phaseVariable[a] = ins.ReadDouble();
            }
 
            this.phaseStance = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.phaseStance[a] = ins.ReadDouble();
            }
 
            this.phaseSwing = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.phaseSwing[a] = ins.ReadDouble();
            }
 
            this.timeStanceRemaining = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.timeStanceRemaining[a] = ins.ReadDouble();
            }
 
            this.timeSwingRemaining = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.timeSwingRemaining[a] = ins.ReadDouble();
            }
 
            this.periodTime = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.periodTime[a] = ins.ReadDouble();
            }
 
            this.timeStance = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.timeStance[a] = ins.ReadDouble();
            }
 
            this.timeSwing = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.timeSwing[a] = ins.ReadDouble();
            }
 
            this.switchingPhase = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.switchingPhase[a] = ins.ReadDouble();
            }
 
            this.phaseOffset = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.phaseOffset[a] = ins.ReadDouble();
            }
 
            this.phaseScale = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.phaseScale[a] = ins.ReadDouble();
            }
 
        }
 
        public LCMTypes.humanoid_gait_lcmt Copy()
        {
            LCMTypes.humanoid_gait_lcmt outobj = new LCMTypes.humanoid_gait_lcmt();
            outobj.contactStateScheduled = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.contactStateScheduled[a] = this.contactStateScheduled[a];
            }
 
            outobj.contactStatePrev = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.contactStatePrev[a] = this.contactStatePrev[a];
            }
 
            outobj.touchdownScheduled = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.touchdownScheduled[a] = this.touchdownScheduled[a];
            }
 
            outobj.liftoffScheduled = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.liftoffScheduled[a] = this.liftoffScheduled[a];
            }
 
            outobj.phaseVariable = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.phaseVariable[a] = this.phaseVariable[a];
            }
 
            outobj.phaseStance = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.phaseStance[a] = this.phaseStance[a];
            }
 
            outobj.phaseSwing = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.phaseSwing[a] = this.phaseSwing[a];
            }
 
            outobj.timeStanceRemaining = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.timeStanceRemaining[a] = this.timeStanceRemaining[a];
            }
 
            outobj.timeSwingRemaining = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.timeSwingRemaining[a] = this.timeSwingRemaining[a];
            }
 
            outobj.periodTime = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.periodTime[a] = this.periodTime[a];
            }
 
            outobj.timeStance = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.timeStance[a] = this.timeStance[a];
            }
 
            outobj.timeSwing = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.timeSwing[a] = this.timeSwing[a];
            }
 
            outobj.switchingPhase = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.switchingPhase[a] = this.switchingPhase[a];
            }
 
            outobj.phaseOffset = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.phaseOffset[a] = this.phaseOffset[a];
            }
 
            outobj.phaseScale = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.phaseScale[a] = this.phaseScale[a];
            }
 
            return outobj;
        }
    }
}

