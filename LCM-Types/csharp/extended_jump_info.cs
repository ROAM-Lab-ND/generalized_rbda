/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class extended_jump_info : LCM.LCM.LCMEncodable
    {
        public double a;
        public double b;
        public double c;
        public double d;
        public double f;
        public double yaw;
 
        public extended_jump_info()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x264bb2d2f9f62f02L;
 
        static extended_jump_info()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.extended_jump_info"))
                return 0L;
 
            classes.Add("LCMTypes.extended_jump_info");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.a); 
 
            outs.Write(this.b); 
 
            outs.Write(this.c); 
 
            outs.Write(this.d); 
 
            outs.Write(this.f); 
 
            outs.Write(this.yaw); 
 
        }
 
        public extended_jump_info(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public extended_jump_info(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.extended_jump_info _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.extended_jump_info o = new LCMTypes.extended_jump_info();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.a = ins.ReadDouble();
 
            this.b = ins.ReadDouble();
 
            this.c = ins.ReadDouble();
 
            this.d = ins.ReadDouble();
 
            this.f = ins.ReadDouble();
 
            this.yaw = ins.ReadDouble();
 
        }
 
        public LCMTypes.extended_jump_info Copy()
        {
            LCMTypes.extended_jump_info outobj = new LCMTypes.extended_jump_info();
            outobj.a = this.a;
 
            outobj.b = this.b;
 
            outobj.c = this.c;
 
            outobj.d = this.d;
 
            outobj.f = this.f;
 
            outobj.yaw = this.yaw;
 
            return outobj;
        }
    }
}

