/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class kmpc_outputs_lcmt : LCM.LCM.LCMEncodable
    {
        public int iter;
        public int opt_solved;
        public double cpu_opt_time_microseconds;
        public double t_sent;
        public double time_start;
        public double[] p_body;
        public double[] rpy;
        public double[] q_leg;
        public double[] v_body;
        public double[] omega_body;
        public double[] c_toe;
        public double[] c_heel;
        public double[] f_toe;
        public double[] f_heel;
        public double[] Xopt;
 
        public kmpc_outputs_lcmt()
        {
            p_body = new double[3];
            rpy = new double[3];
            q_leg = new double[10];
            v_body = new double[3];
            omega_body = new double[3];
            c_toe = new double[6];
            c_heel = new double[6];
            f_toe = new double[6];
            f_heel = new double[6];
            Xopt = new double[506];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x6e4b7889e365d583L;
 
        static kmpc_outputs_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.kmpc_outputs_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.kmpc_outputs_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.iter); 
 
            outs.Write(this.opt_solved); 
 
            outs.Write(this.cpu_opt_time_microseconds); 
 
            outs.Write(this.t_sent); 
 
            outs.Write(this.time_start); 
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.p_body[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.rpy[a]); 
            }
 
            for (int a = 0; a < 10; a++) {
                outs.Write(this.q_leg[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.v_body[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.omega_body[a]); 
            }
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.c_toe[a]); 
            }
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.c_heel[a]); 
            }
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.f_toe[a]); 
            }
 
            for (int a = 0; a < 6; a++) {
                outs.Write(this.f_heel[a]); 
            }
 
            for (int a = 0; a < 506; a++) {
                outs.Write(this.Xopt[a]); 
            }
 
        }
 
        public kmpc_outputs_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public kmpc_outputs_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.kmpc_outputs_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.kmpc_outputs_lcmt o = new LCMTypes.kmpc_outputs_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.iter = ins.ReadInt32();
 
            this.opt_solved = ins.ReadInt32();
 
            this.cpu_opt_time_microseconds = ins.ReadDouble();
 
            this.t_sent = ins.ReadDouble();
 
            this.time_start = ins.ReadDouble();
 
            this.p_body = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.p_body[a] = ins.ReadDouble();
            }
 
            this.rpy = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.rpy[a] = ins.ReadDouble();
            }
 
            this.q_leg = new double[(int) 10];
            for (int a = 0; a < 10; a++) {
                this.q_leg[a] = ins.ReadDouble();
            }
 
            this.v_body = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.v_body[a] = ins.ReadDouble();
            }
 
            this.omega_body = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.omega_body[a] = ins.ReadDouble();
            }
 
            this.c_toe = new double[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.c_toe[a] = ins.ReadDouble();
            }
 
            this.c_heel = new double[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.c_heel[a] = ins.ReadDouble();
            }
 
            this.f_toe = new double[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.f_toe[a] = ins.ReadDouble();
            }
 
            this.f_heel = new double[(int) 6];
            for (int a = 0; a < 6; a++) {
                this.f_heel[a] = ins.ReadDouble();
            }
 
            this.Xopt = new double[(int) 506];
            for (int a = 0; a < 506; a++) {
                this.Xopt[a] = ins.ReadDouble();
            }
 
        }
 
        public LCMTypes.kmpc_outputs_lcmt Copy()
        {
            LCMTypes.kmpc_outputs_lcmt outobj = new LCMTypes.kmpc_outputs_lcmt();
            outobj.iter = this.iter;
 
            outobj.opt_solved = this.opt_solved;
 
            outobj.cpu_opt_time_microseconds = this.cpu_opt_time_microseconds;
 
            outobj.t_sent = this.t_sent;
 
            outobj.time_start = this.time_start;
 
            outobj.p_body = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.p_body[a] = this.p_body[a];
            }
 
            outobj.rpy = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.rpy[a] = this.rpy[a];
            }
 
            outobj.q_leg = new double[(int) 10];
            for (int a = 0; a < 10; a++) {
                outobj.q_leg[a] = this.q_leg[a];
            }
 
            outobj.v_body = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.v_body[a] = this.v_body[a];
            }
 
            outobj.omega_body = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.omega_body[a] = this.omega_body[a];
            }
 
            outobj.c_toe = new double[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.c_toe[a] = this.c_toe[a];
            }
 
            outobj.c_heel = new double[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.c_heel[a] = this.c_heel[a];
            }
 
            outobj.f_toe = new double[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.f_toe[a] = this.f_toe[a];
            }
 
            outobj.f_heel = new double[(int) 6];
            for (int a = 0; a < 6; a++) {
                outobj.f_heel[a] = this.f_heel[a];
            }
 
            outobj.Xopt = new double[(int) 506];
            for (int a = 0; a < 506; a++) {
                outobj.Xopt[a] = this.Xopt[a];
            }
 
            return outobj;
        }
    }
}

