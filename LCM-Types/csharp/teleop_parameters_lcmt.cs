/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class teleop_parameters_lcmt : LCM.LCM.LCMEncodable
    {
        public long control_mode;
        public float key_vertical;
        public float key_horizontal;
        public float key_turn;
        public float key_pitch;
        public float stick_right_vertical;
        public float stick_right_horizontal;
        public float stick_left_vertical;
        public float stick_left_horizontal;
        public bool jump_trigger;
        public bool xbox_ctrl;
 
        public teleop_parameters_lcmt()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x422d537ae0414949L;
 
        static teleop_parameters_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.teleop_parameters_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.teleop_parameters_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.control_mode); 
 
            outs.Write(this.key_vertical); 
 
            outs.Write(this.key_horizontal); 
 
            outs.Write(this.key_turn); 
 
            outs.Write(this.key_pitch); 
 
            outs.Write(this.stick_right_vertical); 
 
            outs.Write(this.stick_right_horizontal); 
 
            outs.Write(this.stick_left_vertical); 
 
            outs.Write(this.stick_left_horizontal); 
 
            outs.Write(this.jump_trigger); 
 
            outs.Write(this.xbox_ctrl); 
 
        }
 
        public teleop_parameters_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public teleop_parameters_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.teleop_parameters_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.teleop_parameters_lcmt o = new LCMTypes.teleop_parameters_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.control_mode = ins.ReadInt64();
 
            this.key_vertical = ins.ReadSingle();
 
            this.key_horizontal = ins.ReadSingle();
 
            this.key_turn = ins.ReadSingle();
 
            this.key_pitch = ins.ReadSingle();
 
            this.stick_right_vertical = ins.ReadSingle();
 
            this.stick_right_horizontal = ins.ReadSingle();
 
            this.stick_left_vertical = ins.ReadSingle();
 
            this.stick_left_horizontal = ins.ReadSingle();
 
            this.jump_trigger = ins.ReadBoolean();
 
            this.xbox_ctrl = ins.ReadBoolean();
 
        }
 
        public LCMTypes.teleop_parameters_lcmt Copy()
        {
            LCMTypes.teleop_parameters_lcmt outobj = new LCMTypes.teleop_parameters_lcmt();
            outobj.control_mode = this.control_mode;
 
            outobj.key_vertical = this.key_vertical;
 
            outobj.key_horizontal = this.key_horizontal;
 
            outobj.key_turn = this.key_turn;
 
            outobj.key_pitch = this.key_pitch;
 
            outobj.stick_right_vertical = this.stick_right_vertical;
 
            outobj.stick_right_horizontal = this.stick_right_horizontal;
 
            outobj.stick_left_vertical = this.stick_left_vertical;
 
            outobj.stick_left_horizontal = this.stick_left_horizontal;
 
            outobj.jump_trigger = this.jump_trigger;
 
            outobj.xbox_ctrl = this.xbox_ctrl;
 
            return outobj;
        }
    }
}

