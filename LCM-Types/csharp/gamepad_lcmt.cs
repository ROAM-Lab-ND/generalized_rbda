/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class gamepad_lcmt : LCM.LCM.LCMEncodable
    {
        public int leftBumper;
        public int rightBumper;
        public int leftTriggerButton;
        public int rightTriggerButton;
        public int back;
        public int start;
        public int a;
        public int b;
        public int x;
        public int y;
        public int leftStickButton;
        public int rightStickButton;
        public float leftTriggerAnalog;
        public float rightTriggerAnalog;
        public float[] leftStickAnalog;
        public float[] rightStickAnalog;
 
        public gamepad_lcmt()
        {
            leftStickAnalog = new float[2];
            rightStickAnalog = new float[2];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x37c71cc8957b05cfL;
 
        static gamepad_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.gamepad_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.gamepad_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.leftBumper); 
 
            outs.Write(this.rightBumper); 
 
            outs.Write(this.leftTriggerButton); 
 
            outs.Write(this.rightTriggerButton); 
 
            outs.Write(this.back); 
 
            outs.Write(this.start); 
 
            outs.Write(this.a); 
 
            outs.Write(this.b); 
 
            outs.Write(this.x); 
 
            outs.Write(this.y); 
 
            outs.Write(this.leftStickButton); 
 
            outs.Write(this.rightStickButton); 
 
            outs.Write(this.leftTriggerAnalog); 
 
            outs.Write(this.rightTriggerAnalog); 
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.leftStickAnalog[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.rightStickAnalog[a]); 
            }
 
        }
 
        public gamepad_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public gamepad_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.gamepad_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.gamepad_lcmt o = new LCMTypes.gamepad_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.leftBumper = ins.ReadInt32();
 
            this.rightBumper = ins.ReadInt32();
 
            this.leftTriggerButton = ins.ReadInt32();
 
            this.rightTriggerButton = ins.ReadInt32();
 
            this.back = ins.ReadInt32();
 
            this.start = ins.ReadInt32();
 
            this.a = ins.ReadInt32();
 
            this.b = ins.ReadInt32();
 
            this.x = ins.ReadInt32();
 
            this.y = ins.ReadInt32();
 
            this.leftStickButton = ins.ReadInt32();
 
            this.rightStickButton = ins.ReadInt32();
 
            this.leftTriggerAnalog = ins.ReadSingle();
 
            this.rightTriggerAnalog = ins.ReadSingle();
 
            this.leftStickAnalog = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.leftStickAnalog[a] = ins.ReadSingle();
            }
 
            this.rightStickAnalog = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.rightStickAnalog[a] = ins.ReadSingle();
            }
 
        }
 
        public LCMTypes.gamepad_lcmt Copy()
        {
            LCMTypes.gamepad_lcmt outobj = new LCMTypes.gamepad_lcmt();
            outobj.leftBumper = this.leftBumper;
 
            outobj.rightBumper = this.rightBumper;
 
            outobj.leftTriggerButton = this.leftTriggerButton;
 
            outobj.rightTriggerButton = this.rightTriggerButton;
 
            outobj.back = this.back;
 
            outobj.start = this.start;
 
            outobj.a = this.a;
 
            outobj.b = this.b;
 
            outobj.x = this.x;
 
            outobj.y = this.y;
 
            outobj.leftStickButton = this.leftStickButton;
 
            outobj.rightStickButton = this.rightStickButton;
 
            outobj.leftTriggerAnalog = this.leftTriggerAnalog;
 
            outobj.rightTriggerAnalog = this.rightTriggerAnalog;
 
            outobj.leftStickAnalog = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.leftStickAnalog[a] = this.leftStickAnalog[a];
            }
 
            outobj.rightStickAnalog = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.rightStickAnalog[a] = this.rightStickAnalog[a];
            }
 
            return outobj;
        }
    }
}

