/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class qkdmpc_outputs_lcmt : LCM.LCM.LCMEncodable
    {
        public int NUM_TIMESTEPS_x3;
        public int NUM_TIMESTEPS_xLEGS_x3;
        public int NUM_TIMESTEPS_xACTJOINT;
        public int NUM_U_TIMESTEPS_xLEGS_x3;
        public int NUM_OPT_VAR_TRAJ;
        public int NUM_G_CONSTRAINTS;
        public int NUM_X_CONSTRAINTS;
        public double[] Xopt;
        public double[] lagrange_mult_G;
        public double[] lagrange_mult_X;
        public double[] p_body;
        public double[] rpy_body;
        public double[] omega_body;
        public double[] r;
        public double[] rdot;
        public double[] h;
        public double[] f_grf;
        public double[] p_feet;
        public double[] q;
        public double[] qd;
        public double obj_val;
        public double t_solve;
        public int opt_solved;
        public int iter;
 
        public qkdmpc_outputs_lcmt()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xdc3d8fcbd4115f71L;
 
        static qkdmpc_outputs_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.qkdmpc_outputs_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.qkdmpc_outputs_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.NUM_TIMESTEPS_x3); 
 
            outs.Write(this.NUM_TIMESTEPS_xLEGS_x3); 
 
            outs.Write(this.NUM_TIMESTEPS_xACTJOINT); 
 
            outs.Write(this.NUM_U_TIMESTEPS_xLEGS_x3); 
 
            outs.Write(this.NUM_OPT_VAR_TRAJ); 
 
            outs.Write(this.NUM_G_CONSTRAINTS); 
 
            outs.Write(this.NUM_X_CONSTRAINTS); 
 
            for (int a = 0; a < this.NUM_OPT_VAR_TRAJ; a++) {
                outs.Write(this.Xopt[a]); 
            }
 
            for (int a = 0; a < this.NUM_G_CONSTRAINTS; a++) {
                outs.Write(this.lagrange_mult_G[a]); 
            }
 
            for (int a = 0; a < this.NUM_X_CONSTRAINTS; a++) {
                outs.Write(this.lagrange_mult_X[a]); 
            }
 
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outs.Write(this.p_body[a]); 
            }
 
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outs.Write(this.rpy_body[a]); 
            }
 
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outs.Write(this.omega_body[a]); 
            }
 
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outs.Write(this.r[a]); 
            }
 
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outs.Write(this.rdot[a]); 
            }
 
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outs.Write(this.h[a]); 
            }
 
            for (int a = 0; a < this.NUM_U_TIMESTEPS_xLEGS_x3; a++) {
                outs.Write(this.f_grf[a]); 
            }
 
            for (int a = 0; a < this.NUM_TIMESTEPS_xLEGS_x3; a++) {
                outs.Write(this.p_feet[a]); 
            }
 
            for (int a = 0; a < this.NUM_TIMESTEPS_xACTJOINT; a++) {
                outs.Write(this.q[a]); 
            }
 
            for (int a = 0; a < this.NUM_TIMESTEPS_xACTJOINT; a++) {
                outs.Write(this.qd[a]); 
            }
 
            outs.Write(this.obj_val); 
 
            outs.Write(this.t_solve); 
 
            outs.Write(this.opt_solved); 
 
            outs.Write(this.iter); 
 
        }
 
        public qkdmpc_outputs_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public qkdmpc_outputs_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.qkdmpc_outputs_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.qkdmpc_outputs_lcmt o = new LCMTypes.qkdmpc_outputs_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.NUM_TIMESTEPS_x3 = ins.ReadInt32();
 
            this.NUM_TIMESTEPS_xLEGS_x3 = ins.ReadInt32();
 
            this.NUM_TIMESTEPS_xACTJOINT = ins.ReadInt32();
 
            this.NUM_U_TIMESTEPS_xLEGS_x3 = ins.ReadInt32();
 
            this.NUM_OPT_VAR_TRAJ = ins.ReadInt32();
 
            this.NUM_G_CONSTRAINTS = ins.ReadInt32();
 
            this.NUM_X_CONSTRAINTS = ins.ReadInt32();
 
            this.Xopt = new double[(int) NUM_OPT_VAR_TRAJ];
            for (int a = 0; a < this.NUM_OPT_VAR_TRAJ; a++) {
                this.Xopt[a] = ins.ReadDouble();
            }
 
            this.lagrange_mult_G = new double[(int) NUM_G_CONSTRAINTS];
            for (int a = 0; a < this.NUM_G_CONSTRAINTS; a++) {
                this.lagrange_mult_G[a] = ins.ReadDouble();
            }
 
            this.lagrange_mult_X = new double[(int) NUM_X_CONSTRAINTS];
            for (int a = 0; a < this.NUM_X_CONSTRAINTS; a++) {
                this.lagrange_mult_X[a] = ins.ReadDouble();
            }
 
            this.p_body = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                this.p_body[a] = ins.ReadDouble();
            }
 
            this.rpy_body = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                this.rpy_body[a] = ins.ReadDouble();
            }
 
            this.omega_body = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                this.omega_body[a] = ins.ReadDouble();
            }
 
            this.r = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                this.r[a] = ins.ReadDouble();
            }
 
            this.rdot = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                this.rdot[a] = ins.ReadDouble();
            }
 
            this.h = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                this.h[a] = ins.ReadDouble();
            }
 
            this.f_grf = new double[(int) NUM_U_TIMESTEPS_xLEGS_x3];
            for (int a = 0; a < this.NUM_U_TIMESTEPS_xLEGS_x3; a++) {
                this.f_grf[a] = ins.ReadDouble();
            }
 
            this.p_feet = new double[(int) NUM_TIMESTEPS_xLEGS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_xLEGS_x3; a++) {
                this.p_feet[a] = ins.ReadDouble();
            }
 
            this.q = new double[(int) NUM_TIMESTEPS_xACTJOINT];
            for (int a = 0; a < this.NUM_TIMESTEPS_xACTJOINT; a++) {
                this.q[a] = ins.ReadDouble();
            }
 
            this.qd = new double[(int) NUM_TIMESTEPS_xACTJOINT];
            for (int a = 0; a < this.NUM_TIMESTEPS_xACTJOINT; a++) {
                this.qd[a] = ins.ReadDouble();
            }
 
            this.obj_val = ins.ReadDouble();
 
            this.t_solve = ins.ReadDouble();
 
            this.opt_solved = ins.ReadInt32();
 
            this.iter = ins.ReadInt32();
 
        }
 
        public LCMTypes.qkdmpc_outputs_lcmt Copy()
        {
            LCMTypes.qkdmpc_outputs_lcmt outobj = new LCMTypes.qkdmpc_outputs_lcmt();
            outobj.NUM_TIMESTEPS_x3 = this.NUM_TIMESTEPS_x3;
 
            outobj.NUM_TIMESTEPS_xLEGS_x3 = this.NUM_TIMESTEPS_xLEGS_x3;
 
            outobj.NUM_TIMESTEPS_xACTJOINT = this.NUM_TIMESTEPS_xACTJOINT;
 
            outobj.NUM_U_TIMESTEPS_xLEGS_x3 = this.NUM_U_TIMESTEPS_xLEGS_x3;
 
            outobj.NUM_OPT_VAR_TRAJ = this.NUM_OPT_VAR_TRAJ;
 
            outobj.NUM_G_CONSTRAINTS = this.NUM_G_CONSTRAINTS;
 
            outobj.NUM_X_CONSTRAINTS = this.NUM_X_CONSTRAINTS;
 
            outobj.Xopt = new double[(int) NUM_OPT_VAR_TRAJ];
            for (int a = 0; a < this.NUM_OPT_VAR_TRAJ; a++) {
                outobj.Xopt[a] = this.Xopt[a];
            }
 
            outobj.lagrange_mult_G = new double[(int) NUM_G_CONSTRAINTS];
            for (int a = 0; a < this.NUM_G_CONSTRAINTS; a++) {
                outobj.lagrange_mult_G[a] = this.lagrange_mult_G[a];
            }
 
            outobj.lagrange_mult_X = new double[(int) NUM_X_CONSTRAINTS];
            for (int a = 0; a < this.NUM_X_CONSTRAINTS; a++) {
                outobj.lagrange_mult_X[a] = this.lagrange_mult_X[a];
            }
 
            outobj.p_body = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outobj.p_body[a] = this.p_body[a];
            }
 
            outobj.rpy_body = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outobj.rpy_body[a] = this.rpy_body[a];
            }
 
            outobj.omega_body = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outobj.omega_body[a] = this.omega_body[a];
            }
 
            outobj.r = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outobj.r[a] = this.r[a];
            }
 
            outobj.rdot = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outobj.rdot[a] = this.rdot[a];
            }
 
            outobj.h = new double[(int) NUM_TIMESTEPS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
                outobj.h[a] = this.h[a];
            }
 
            outobj.f_grf = new double[(int) NUM_U_TIMESTEPS_xLEGS_x3];
            for (int a = 0; a < this.NUM_U_TIMESTEPS_xLEGS_x3; a++) {
                outobj.f_grf[a] = this.f_grf[a];
            }
 
            outobj.p_feet = new double[(int) NUM_TIMESTEPS_xLEGS_x3];
            for (int a = 0; a < this.NUM_TIMESTEPS_xLEGS_x3; a++) {
                outobj.p_feet[a] = this.p_feet[a];
            }
 
            outobj.q = new double[(int) NUM_TIMESTEPS_xACTJOINT];
            for (int a = 0; a < this.NUM_TIMESTEPS_xACTJOINT; a++) {
                outobj.q[a] = this.q[a];
            }
 
            outobj.qd = new double[(int) NUM_TIMESTEPS_xACTJOINT];
            for (int a = 0; a < this.NUM_TIMESTEPS_xACTJOINT; a++) {
                outobj.qd[a] = this.qd[a];
            }
 
            outobj.obj_val = this.obj_val;
 
            outobj.t_solve = this.t_solve;
 
            outobj.opt_solved = this.opt_solved;
 
            outobj.iter = this.iter;
 
            return outobj;
        }
    }
}

