/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class humanoid_menu_data_lcmt : LCM.LCM.LCMEncodable
    {
        public bool cheater_mode;
        public long control_mode;
        public bool use_wbc;
        public bool use_rc;
        public bool display_heightmap;
        public bool display_path_planning;
        public bool display_potential_field;
        public bool display_traverability;
        public double[] Kd_body;
        public double[] Kd_cam;
        public double[] Kd_clm;
        public double[] Kd_foot;
        public double[] Kd_joint;
        public double[] Kd_ori;
        public double[] Kp_body;
        public double[] Kp_cam;
        public double[] Kp_clm;
        public double[] Kp_foot;
        public double[] Kp_joint;
        public double[] Kp_ori;
 
        public humanoid_menu_data_lcmt()
        {
            Kd_body = new double[3];
            Kd_cam = new double[3];
            Kd_clm = new double[3];
            Kd_foot = new double[3];
            Kd_joint = new double[3];
            Kd_ori = new double[3];
            Kp_body = new double[3];
            Kp_cam = new double[3];
            Kp_clm = new double[3];
            Kp_foot = new double[3];
            Kp_joint = new double[3];
            Kp_ori = new double[3];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x7945c66fec25576aL;
 
        static humanoid_menu_data_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.humanoid_menu_data_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.humanoid_menu_data_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.cheater_mode); 
 
            outs.Write(this.control_mode); 
 
            outs.Write(this.use_wbc); 
 
            outs.Write(this.use_rc); 
 
            outs.Write(this.display_heightmap); 
 
            outs.Write(this.display_path_planning); 
 
            outs.Write(this.display_potential_field); 
 
            outs.Write(this.display_traverability); 
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kd_body[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kd_cam[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kd_clm[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kd_foot[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kd_joint[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kd_ori[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kp_body[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kp_cam[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kp_clm[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kp_foot[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kp_joint[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.Kp_ori[a]); 
            }
 
        }
 
        public humanoid_menu_data_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public humanoid_menu_data_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.humanoid_menu_data_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.humanoid_menu_data_lcmt o = new LCMTypes.humanoid_menu_data_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.cheater_mode = ins.ReadBoolean();
 
            this.control_mode = ins.ReadInt64();
 
            this.use_wbc = ins.ReadBoolean();
 
            this.use_rc = ins.ReadBoolean();
 
            this.display_heightmap = ins.ReadBoolean();
 
            this.display_path_planning = ins.ReadBoolean();
 
            this.display_potential_field = ins.ReadBoolean();
 
            this.display_traverability = ins.ReadBoolean();
 
            this.Kd_body = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kd_body[a] = ins.ReadDouble();
            }
 
            this.Kd_cam = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kd_cam[a] = ins.ReadDouble();
            }
 
            this.Kd_clm = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kd_clm[a] = ins.ReadDouble();
            }
 
            this.Kd_foot = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kd_foot[a] = ins.ReadDouble();
            }
 
            this.Kd_joint = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kd_joint[a] = ins.ReadDouble();
            }
 
            this.Kd_ori = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kd_ori[a] = ins.ReadDouble();
            }
 
            this.Kp_body = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kp_body[a] = ins.ReadDouble();
            }
 
            this.Kp_cam = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kp_cam[a] = ins.ReadDouble();
            }
 
            this.Kp_clm = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kp_clm[a] = ins.ReadDouble();
            }
 
            this.Kp_foot = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kp_foot[a] = ins.ReadDouble();
            }
 
            this.Kp_joint = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kp_joint[a] = ins.ReadDouble();
            }
 
            this.Kp_ori = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.Kp_ori[a] = ins.ReadDouble();
            }
 
        }
 
        public LCMTypes.humanoid_menu_data_lcmt Copy()
        {
            LCMTypes.humanoid_menu_data_lcmt outobj = new LCMTypes.humanoid_menu_data_lcmt();
            outobj.cheater_mode = this.cheater_mode;
 
            outobj.control_mode = this.control_mode;
 
            outobj.use_wbc = this.use_wbc;
 
            outobj.use_rc = this.use_rc;
 
            outobj.display_heightmap = this.display_heightmap;
 
            outobj.display_path_planning = this.display_path_planning;
 
            outobj.display_potential_field = this.display_potential_field;
 
            outobj.display_traverability = this.display_traverability;
 
            outobj.Kd_body = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kd_body[a] = this.Kd_body[a];
            }
 
            outobj.Kd_cam = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kd_cam[a] = this.Kd_cam[a];
            }
 
            outobj.Kd_clm = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kd_clm[a] = this.Kd_clm[a];
            }
 
            outobj.Kd_foot = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kd_foot[a] = this.Kd_foot[a];
            }
 
            outobj.Kd_joint = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kd_joint[a] = this.Kd_joint[a];
            }
 
            outobj.Kd_ori = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kd_ori[a] = this.Kd_ori[a];
            }
 
            outobj.Kp_body = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kp_body[a] = this.Kp_body[a];
            }
 
            outobj.Kp_cam = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kp_cam[a] = this.Kp_cam[a];
            }
 
            outobj.Kp_clm = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kp_clm[a] = this.Kp_clm[a];
            }
 
            outobj.Kp_foot = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kp_foot[a] = this.Kp_foot[a];
            }
 
            outobj.Kp_joint = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kp_joint[a] = this.Kp_joint[a];
            }
 
            outobj.Kp_ori = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.Kp_ori[a] = this.Kp_ori[a];
            }
 
            return outobj;
        }
    }
}

