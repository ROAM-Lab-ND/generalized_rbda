/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class humanoid_arm_recovery_inputs_lcmt : LCM.LCM.LCMEncodable
    {
        public int RS_optim_iter;
        public int fsm_iter;
        public double ctrl_dt;
        public double[] current_state;
        public double[] desired_state;
        public double gait_phase;
 
        public humanoid_arm_recovery_inputs_lcmt()
        {
            current_state = new double[48];
            desired_state = new double[4];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x9cce1eea0bab1479L;
 
        static humanoid_arm_recovery_inputs_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.humanoid_arm_recovery_inputs_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.humanoid_arm_recovery_inputs_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.RS_optim_iter); 
 
            outs.Write(this.fsm_iter); 
 
            outs.Write(this.ctrl_dt); 
 
            for (int a = 0; a < 48; a++) {
                outs.Write(this.current_state[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.desired_state[a]); 
            }
 
            outs.Write(this.gait_phase); 
 
        }
 
        public humanoid_arm_recovery_inputs_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public humanoid_arm_recovery_inputs_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.humanoid_arm_recovery_inputs_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.humanoid_arm_recovery_inputs_lcmt o = new LCMTypes.humanoid_arm_recovery_inputs_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.RS_optim_iter = ins.ReadInt32();
 
            this.fsm_iter = ins.ReadInt32();
 
            this.ctrl_dt = ins.ReadDouble();
 
            this.current_state = new double[(int) 48];
            for (int a = 0; a < 48; a++) {
                this.current_state[a] = ins.ReadDouble();
            }
 
            this.desired_state = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.desired_state[a] = ins.ReadDouble();
            }
 
            this.gait_phase = ins.ReadDouble();
 
        }
 
        public LCMTypes.humanoid_arm_recovery_inputs_lcmt Copy()
        {
            LCMTypes.humanoid_arm_recovery_inputs_lcmt outobj = new LCMTypes.humanoid_arm_recovery_inputs_lcmt();
            outobj.RS_optim_iter = this.RS_optim_iter;
 
            outobj.fsm_iter = this.fsm_iter;
 
            outobj.ctrl_dt = this.ctrl_dt;
 
            outobj.current_state = new double[(int) 48];
            for (int a = 0; a < 48; a++) {
                outobj.current_state[a] = this.current_state[a];
            }
 
            outobj.desired_state = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.desired_state[a] = this.desired_state[a];
            }
 
            outobj.gait_phase = this.gait_phase;
 
            return outobj;
        }
    }
}

