/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class jto_inputs_lcmt : LCM.LCM.LCMEncodable
    {
        public int num_timesteps;
        public double dt;
        public double[] state_min0;
        public double[] state_max0;
        public double[] foot_min0;
        public double[] foot_max0;
        public double[] x_warm_start;
        public double[] u_warm_start;
        public double[] x_reference;
        public double[] u_reference;
        public double[] contact_state;
        public double[] state_min;
        public double[] state_max;
        public double[] force_min;
        public double[] force_max;
        public double[] mu;
        public double[] Q;
        public double[] Q_f;
        public double[] R;
 
        public jto_inputs_lcmt()
        {
            state_min0 = new double[12];
            state_max0 = new double[12];
            foot_min0 = new double[12];
            foot_max0 = new double[12];
            x_warm_start = new double[360];
            u_warm_start = new double[720];
            x_reference = new double[360];
            u_reference = new double[720];
            contact_state = new double[124];
            state_min = new double[12];
            state_max = new double[12];
            force_min = new double[12];
            force_max = new double[12];
            mu = new double[4];
            Q = new double[12];
            Q_f = new double[12];
            R = new double[24];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x8633f902b49a12eaL;
 
        static jto_inputs_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.jto_inputs_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.jto_inputs_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.num_timesteps); 
 
            outs.Write(this.dt); 
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.state_min0[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.state_max0[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.foot_min0[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.foot_max0[a]); 
            }
 
            for (int a = 0; a < 360; a++) {
                outs.Write(this.x_warm_start[a]); 
            }
 
            for (int a = 0; a < 720; a++) {
                outs.Write(this.u_warm_start[a]); 
            }
 
            for (int a = 0; a < 360; a++) {
                outs.Write(this.x_reference[a]); 
            }
 
            for (int a = 0; a < 720; a++) {
                outs.Write(this.u_reference[a]); 
            }
 
            for (int a = 0; a < 124; a++) {
                outs.Write(this.contact_state[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.state_min[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.state_max[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.force_min[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.force_max[a]); 
            }
 
            for (int a = 0; a < 4; a++) {
                outs.Write(this.mu[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.Q[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.Q_f[a]); 
            }
 
            for (int a = 0; a < 24; a++) {
                outs.Write(this.R[a]); 
            }
 
        }
 
        public jto_inputs_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public jto_inputs_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.jto_inputs_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.jto_inputs_lcmt o = new LCMTypes.jto_inputs_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.num_timesteps = ins.ReadInt32();
 
            this.dt = ins.ReadDouble();
 
            this.state_min0 = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.state_min0[a] = ins.ReadDouble();
            }
 
            this.state_max0 = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.state_max0[a] = ins.ReadDouble();
            }
 
            this.foot_min0 = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.foot_min0[a] = ins.ReadDouble();
            }
 
            this.foot_max0 = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.foot_max0[a] = ins.ReadDouble();
            }
 
            this.x_warm_start = new double[(int) 360];
            for (int a = 0; a < 360; a++) {
                this.x_warm_start[a] = ins.ReadDouble();
            }
 
            this.u_warm_start = new double[(int) 720];
            for (int a = 0; a < 720; a++) {
                this.u_warm_start[a] = ins.ReadDouble();
            }
 
            this.x_reference = new double[(int) 360];
            for (int a = 0; a < 360; a++) {
                this.x_reference[a] = ins.ReadDouble();
            }
 
            this.u_reference = new double[(int) 720];
            for (int a = 0; a < 720; a++) {
                this.u_reference[a] = ins.ReadDouble();
            }
 
            this.contact_state = new double[(int) 124];
            for (int a = 0; a < 124; a++) {
                this.contact_state[a] = ins.ReadDouble();
            }
 
            this.state_min = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.state_min[a] = ins.ReadDouble();
            }
 
            this.state_max = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.state_max[a] = ins.ReadDouble();
            }
 
            this.force_min = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.force_min[a] = ins.ReadDouble();
            }
 
            this.force_max = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.force_max[a] = ins.ReadDouble();
            }
 
            this.mu = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                this.mu[a] = ins.ReadDouble();
            }
 
            this.Q = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.Q[a] = ins.ReadDouble();
            }
 
            this.Q_f = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.Q_f[a] = ins.ReadDouble();
            }
 
            this.R = new double[(int) 24];
            for (int a = 0; a < 24; a++) {
                this.R[a] = ins.ReadDouble();
            }
 
        }
 
        public LCMTypes.jto_inputs_lcmt Copy()
        {
            LCMTypes.jto_inputs_lcmt outobj = new LCMTypes.jto_inputs_lcmt();
            outobj.num_timesteps = this.num_timesteps;
 
            outobj.dt = this.dt;
 
            outobj.state_min0 = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.state_min0[a] = this.state_min0[a];
            }
 
            outobj.state_max0 = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.state_max0[a] = this.state_max0[a];
            }
 
            outobj.foot_min0 = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.foot_min0[a] = this.foot_min0[a];
            }
 
            outobj.foot_max0 = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.foot_max0[a] = this.foot_max0[a];
            }
 
            outobj.x_warm_start = new double[(int) 360];
            for (int a = 0; a < 360; a++) {
                outobj.x_warm_start[a] = this.x_warm_start[a];
            }
 
            outobj.u_warm_start = new double[(int) 720];
            for (int a = 0; a < 720; a++) {
                outobj.u_warm_start[a] = this.u_warm_start[a];
            }
 
            outobj.x_reference = new double[(int) 360];
            for (int a = 0; a < 360; a++) {
                outobj.x_reference[a] = this.x_reference[a];
            }
 
            outobj.u_reference = new double[(int) 720];
            for (int a = 0; a < 720; a++) {
                outobj.u_reference[a] = this.u_reference[a];
            }
 
            outobj.contact_state = new double[(int) 124];
            for (int a = 0; a < 124; a++) {
                outobj.contact_state[a] = this.contact_state[a];
            }
 
            outobj.state_min = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.state_min[a] = this.state_min[a];
            }
 
            outobj.state_max = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.state_max[a] = this.state_max[a];
            }
 
            outobj.force_min = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.force_min[a] = this.force_min[a];
            }
 
            outobj.force_max = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.force_max[a] = this.force_max[a];
            }
 
            outobj.mu = new double[(int) 4];
            for (int a = 0; a < 4; a++) {
                outobj.mu[a] = this.mu[a];
            }
 
            outobj.Q = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.Q[a] = this.Q[a];
            }
 
            outobj.Q_f = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.Q_f[a] = this.Q_f[a];
            }
 
            outobj.R = new double[(int) 24];
            for (int a = 0; a < 24; a++) {
                outobj.R[a] = this.R[a];
            }
 
            return outobj;
        }
    }
}

