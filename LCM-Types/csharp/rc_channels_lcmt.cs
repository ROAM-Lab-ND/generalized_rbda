/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class rc_channels_lcmt : LCM.LCM.LCMEncodable
    {
        public double ch_1;
        public double ch_2;
        public double ch_3;
        public double ch_4;
        public double ch_5;
        public double ch_6;
        public double ch_7;
        public double ch_8;
        public double ch_9;
        public double ch_10;
        public double ch_11;
        public double ch_12;
        public double ch_13;
        public double ch_14;
        public double ch_15;
        public double ch_16;
 
        public rc_channels_lcmt()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x5fd71e3345a45040L;
 
        static rc_channels_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.rc_channels_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.rc_channels_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.ch_1); 
 
            outs.Write(this.ch_2); 
 
            outs.Write(this.ch_3); 
 
            outs.Write(this.ch_4); 
 
            outs.Write(this.ch_5); 
 
            outs.Write(this.ch_6); 
 
            outs.Write(this.ch_7); 
 
            outs.Write(this.ch_8); 
 
            outs.Write(this.ch_9); 
 
            outs.Write(this.ch_10); 
 
            outs.Write(this.ch_11); 
 
            outs.Write(this.ch_12); 
 
            outs.Write(this.ch_13); 
 
            outs.Write(this.ch_14); 
 
            outs.Write(this.ch_15); 
 
            outs.Write(this.ch_16); 
 
        }
 
        public rc_channels_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public rc_channels_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.rc_channels_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.rc_channels_lcmt o = new LCMTypes.rc_channels_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.ch_1 = ins.ReadDouble();
 
            this.ch_2 = ins.ReadDouble();
 
            this.ch_3 = ins.ReadDouble();
 
            this.ch_4 = ins.ReadDouble();
 
            this.ch_5 = ins.ReadDouble();
 
            this.ch_6 = ins.ReadDouble();
 
            this.ch_7 = ins.ReadDouble();
 
            this.ch_8 = ins.ReadDouble();
 
            this.ch_9 = ins.ReadDouble();
 
            this.ch_10 = ins.ReadDouble();
 
            this.ch_11 = ins.ReadDouble();
 
            this.ch_12 = ins.ReadDouble();
 
            this.ch_13 = ins.ReadDouble();
 
            this.ch_14 = ins.ReadDouble();
 
            this.ch_15 = ins.ReadDouble();
 
            this.ch_16 = ins.ReadDouble();
 
        }
 
        public LCMTypes.rc_channels_lcmt Copy()
        {
            LCMTypes.rc_channels_lcmt outobj = new LCMTypes.rc_channels_lcmt();
            outobj.ch_1 = this.ch_1;
 
            outobj.ch_2 = this.ch_2;
 
            outobj.ch_3 = this.ch_3;
 
            outobj.ch_4 = this.ch_4;
 
            outobj.ch_5 = this.ch_5;
 
            outobj.ch_6 = this.ch_6;
 
            outobj.ch_7 = this.ch_7;
 
            outobj.ch_8 = this.ch_8;
 
            outobj.ch_9 = this.ch_9;
 
            outobj.ch_10 = this.ch_10;
 
            outobj.ch_11 = this.ch_11;
 
            outobj.ch_12 = this.ch_12;
 
            outobj.ch_13 = this.ch_13;
 
            outobj.ch_14 = this.ch_14;
 
            outobj.ch_15 = this.ch_15;
 
            outobj.ch_16 = this.ch_16;
 
            return outobj;
        }
    }
}

