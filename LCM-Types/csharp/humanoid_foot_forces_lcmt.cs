/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class humanoid_foot_forces_lcmt : LCM.LCM.LCMEncodable
    {
        public double[] force0;
        public double[] force1;
        public double[] force2;
        public double[] force3;
        public double[] force4;
        public double[] force5;
 
        public humanoid_foot_forces_lcmt()
        {
            force0 = new double[3];
            force1 = new double[3];
            force2 = new double[3];
            force3 = new double[3];
            force4 = new double[3];
            force5 = new double[3];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x0f975212ee6b66a0L;
 
        static humanoid_foot_forces_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.humanoid_foot_forces_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.humanoid_foot_forces_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 3; a++) {
                outs.Write(this.force0[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.force1[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.force2[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.force3[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.force4[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.force5[a]); 
            }
 
        }
 
        public humanoid_foot_forces_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public humanoid_foot_forces_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.humanoid_foot_forces_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.humanoid_foot_forces_lcmt o = new LCMTypes.humanoid_foot_forces_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.force0 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.force0[a] = ins.ReadDouble();
            }
 
            this.force1 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.force1[a] = ins.ReadDouble();
            }
 
            this.force2 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.force2[a] = ins.ReadDouble();
            }
 
            this.force3 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.force3[a] = ins.ReadDouble();
            }
 
            this.force4 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.force4[a] = ins.ReadDouble();
            }
 
            this.force5 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.force5[a] = ins.ReadDouble();
            }
 
        }
 
        public LCMTypes.humanoid_foot_forces_lcmt Copy()
        {
            LCMTypes.humanoid_foot_forces_lcmt outobj = new LCMTypes.humanoid_foot_forces_lcmt();
            outobj.force0 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.force0[a] = this.force0[a];
            }
 
            outobj.force1 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.force1[a] = this.force1[a];
            }
 
            outobj.force2 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.force2[a] = this.force2[a];
            }
 
            outobj.force3 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.force3[a] = this.force3[a];
            }
 
            outobj.force4 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.force4[a] = this.force4[a];
            }
 
            outobj.force5 = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.force5[a] = this.force5[a];
            }
 
            return outobj;
        }
    }
}

