/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class grid_map_lcmt : LCM.LCM.LCMEncodable
    {
        public int rows;
        public int cols;
        public int totalCells;
        public float resolution;
        public float[] center;
        public float[] heightmap;
        public int[] indexmap;
 
        public grid_map_lcmt()
        {
            center = new float[2];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x97c8d40346e867d2L;
 
        static grid_map_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.grid_map_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.grid_map_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.rows); 
 
            outs.Write(this.cols); 
 
            outs.Write(this.totalCells); 
 
            outs.Write(this.resolution); 
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.center[a]); 
            }
 
            for (int a = 0; a < this.totalCells; a++) {
                outs.Write(this.heightmap[a]); 
            }
 
            for (int a = 0; a < this.totalCells; a++) {
                outs.Write(this.indexmap[a]); 
            }
 
        }
 
        public grid_map_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public grid_map_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.grid_map_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.grid_map_lcmt o = new LCMTypes.grid_map_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.rows = ins.ReadInt32();
 
            this.cols = ins.ReadInt32();
 
            this.totalCells = ins.ReadInt32();
 
            this.resolution = ins.ReadSingle();
 
            this.center = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.center[a] = ins.ReadSingle();
            }
 
            this.heightmap = new float[(int) totalCells];
            for (int a = 0; a < this.totalCells; a++) {
                this.heightmap[a] = ins.ReadSingle();
            }
 
            this.indexmap = new int[(int) totalCells];
            for (int a = 0; a < this.totalCells; a++) {
                this.indexmap[a] = ins.ReadInt32();
            }
 
        }
 
        public LCMTypes.grid_map_lcmt Copy()
        {
            LCMTypes.grid_map_lcmt outobj = new LCMTypes.grid_map_lcmt();
            outobj.rows = this.rows;
 
            outobj.cols = this.cols;
 
            outobj.totalCells = this.totalCells;
 
            outobj.resolution = this.resolution;
 
            outobj.center = new float[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.center[a] = this.center[a];
            }
 
            outobj.heightmap = new float[(int) totalCells];
            for (int a = 0; a < this.totalCells; a++) {
                outobj.heightmap[a] = this.heightmap[a];
            }
 
            outobj.indexmap = new int[(int) totalCells];
            for (int a = 0; a < this.totalCells; a++) {
                outobj.indexmap[a] = this.indexmap[a];
            }
 
            return outobj;
        }
    }
}

