/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class jump3D_hyperParamTrain_lcmt : LCM.LCM.LCMEncodable
    {
        public double obs_height;
        public double dist_to_obs;
        public double dist_past_obs_lb;
        public double dist_past_obs_ub;
        public double dist_past_obs_glub;
        public double yaw_init;
        public double yaw_term;
        public double f_max;
        public double dist_to_obs_sf;
        public double obs_height_sf;
        public double land_height_offset;
        public double yaw_takeoff;
        public double px_flight;
        public double yaw_flight;
        public double vert_vel_sf;
        public double robot_mass_sf;
        public double wbc_fb_weight;
        public int b_use_wbc_takeoff;
        public double[] pz_takeoff;
        public double[] roll_takeoff;
        public double[] pitch_takeoff;
        public double[] pz_flight;
        public double[] roll_flight;
        public double[] pitch_flight;
        public int max_train_iter;
 
        public jump3D_hyperParamTrain_lcmt()
        {
            pz_takeoff = new double[3];
            roll_takeoff = new double[3];
            pitch_takeoff = new double[3];
            pz_flight = new double[3];
            roll_flight = new double[3];
            pitch_flight = new double[3];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x632d8dd376b71320L;
 
        static jump3D_hyperParamTrain_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.jump3D_hyperParamTrain_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.jump3D_hyperParamTrain_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.obs_height); 
 
            outs.Write(this.dist_to_obs); 
 
            outs.Write(this.dist_past_obs_lb); 
 
            outs.Write(this.dist_past_obs_ub); 
 
            outs.Write(this.dist_past_obs_glub); 
 
            outs.Write(this.yaw_init); 
 
            outs.Write(this.yaw_term); 
 
            outs.Write(this.f_max); 
 
            outs.Write(this.dist_to_obs_sf); 
 
            outs.Write(this.obs_height_sf); 
 
            outs.Write(this.land_height_offset); 
 
            outs.Write(this.yaw_takeoff); 
 
            outs.Write(this.px_flight); 
 
            outs.Write(this.yaw_flight); 
 
            outs.Write(this.vert_vel_sf); 
 
            outs.Write(this.robot_mass_sf); 
 
            outs.Write(this.wbc_fb_weight); 
 
            outs.Write(this.b_use_wbc_takeoff); 
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.pz_takeoff[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.roll_takeoff[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.pitch_takeoff[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.pz_flight[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.roll_flight[a]); 
            }
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.pitch_flight[a]); 
            }
 
            outs.Write(this.max_train_iter); 
 
        }
 
        public jump3D_hyperParamTrain_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public jump3D_hyperParamTrain_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.jump3D_hyperParamTrain_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.jump3D_hyperParamTrain_lcmt o = new LCMTypes.jump3D_hyperParamTrain_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.obs_height = ins.ReadDouble();
 
            this.dist_to_obs = ins.ReadDouble();
 
            this.dist_past_obs_lb = ins.ReadDouble();
 
            this.dist_past_obs_ub = ins.ReadDouble();
 
            this.dist_past_obs_glub = ins.ReadDouble();
 
            this.yaw_init = ins.ReadDouble();
 
            this.yaw_term = ins.ReadDouble();
 
            this.f_max = ins.ReadDouble();
 
            this.dist_to_obs_sf = ins.ReadDouble();
 
            this.obs_height_sf = ins.ReadDouble();
 
            this.land_height_offset = ins.ReadDouble();
 
            this.yaw_takeoff = ins.ReadDouble();
 
            this.px_flight = ins.ReadDouble();
 
            this.yaw_flight = ins.ReadDouble();
 
            this.vert_vel_sf = ins.ReadDouble();
 
            this.robot_mass_sf = ins.ReadDouble();
 
            this.wbc_fb_weight = ins.ReadDouble();
 
            this.b_use_wbc_takeoff = ins.ReadInt32();
 
            this.pz_takeoff = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.pz_takeoff[a] = ins.ReadDouble();
            }
 
            this.roll_takeoff = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.roll_takeoff[a] = ins.ReadDouble();
            }
 
            this.pitch_takeoff = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.pitch_takeoff[a] = ins.ReadDouble();
            }
 
            this.pz_flight = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.pz_flight[a] = ins.ReadDouble();
            }
 
            this.roll_flight = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.roll_flight[a] = ins.ReadDouble();
            }
 
            this.pitch_flight = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.pitch_flight[a] = ins.ReadDouble();
            }
 
            this.max_train_iter = ins.ReadInt32();
 
        }
 
        public LCMTypes.jump3D_hyperParamTrain_lcmt Copy()
        {
            LCMTypes.jump3D_hyperParamTrain_lcmt outobj = new LCMTypes.jump3D_hyperParamTrain_lcmt();
            outobj.obs_height = this.obs_height;
 
            outobj.dist_to_obs = this.dist_to_obs;
 
            outobj.dist_past_obs_lb = this.dist_past_obs_lb;
 
            outobj.dist_past_obs_ub = this.dist_past_obs_ub;
 
            outobj.dist_past_obs_glub = this.dist_past_obs_glub;
 
            outobj.yaw_init = this.yaw_init;
 
            outobj.yaw_term = this.yaw_term;
 
            outobj.f_max = this.f_max;
 
            outobj.dist_to_obs_sf = this.dist_to_obs_sf;
 
            outobj.obs_height_sf = this.obs_height_sf;
 
            outobj.land_height_offset = this.land_height_offset;
 
            outobj.yaw_takeoff = this.yaw_takeoff;
 
            outobj.px_flight = this.px_flight;
 
            outobj.yaw_flight = this.yaw_flight;
 
            outobj.vert_vel_sf = this.vert_vel_sf;
 
            outobj.robot_mass_sf = this.robot_mass_sf;
 
            outobj.wbc_fb_weight = this.wbc_fb_weight;
 
            outobj.b_use_wbc_takeoff = this.b_use_wbc_takeoff;
 
            outobj.pz_takeoff = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.pz_takeoff[a] = this.pz_takeoff[a];
            }
 
            outobj.roll_takeoff = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.roll_takeoff[a] = this.roll_takeoff[a];
            }
 
            outobj.pitch_takeoff = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.pitch_takeoff[a] = this.pitch_takeoff[a];
            }
 
            outobj.pz_flight = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.pz_flight[a] = this.pz_flight[a];
            }
 
            outobj.roll_flight = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.roll_flight[a] = this.roll_flight[a];
            }
 
            outobj.pitch_flight = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.pitch_flight[a] = this.pitch_flight[a];
            }
 
            outobj.max_train_iter = this.max_train_iter;
 
            return outobj;
        }
    }
}

