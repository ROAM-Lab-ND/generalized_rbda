/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class desired_state_command_lcmt : LCM.LCM.LCMEncodable
    {
        public double[] next_point;
        public double[] cur_pos;
        public double cur_yaw;
        public double[] pos_error_world;
        public double[] pos_error_body;
        public double heading_direction;
        public double yaw_error;
        public double[] des_vel;
 
        public desired_state_command_lcmt()
        {
            next_point = new double[2];
            cur_pos = new double[2];
            pos_error_world = new double[2];
            pos_error_body = new double[2];
            des_vel = new double[3];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x22b865cb04f82213L;
 
        static desired_state_command_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.desired_state_command_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.desired_state_command_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 2; a++) {
                outs.Write(this.next_point[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.cur_pos[a]); 
            }
 
            outs.Write(this.cur_yaw); 
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.pos_error_world[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.pos_error_body[a]); 
            }
 
            outs.Write(this.heading_direction); 
 
            outs.Write(this.yaw_error); 
 
            for (int a = 0; a < 3; a++) {
                outs.Write(this.des_vel[a]); 
            }
 
        }
 
        public desired_state_command_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public desired_state_command_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.desired_state_command_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.desired_state_command_lcmt o = new LCMTypes.desired_state_command_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.next_point = new double[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.next_point[a] = ins.ReadDouble();
            }
 
            this.cur_pos = new double[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.cur_pos[a] = ins.ReadDouble();
            }
 
            this.cur_yaw = ins.ReadDouble();
 
            this.pos_error_world = new double[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.pos_error_world[a] = ins.ReadDouble();
            }
 
            this.pos_error_body = new double[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.pos_error_body[a] = ins.ReadDouble();
            }
 
            this.heading_direction = ins.ReadDouble();
 
            this.yaw_error = ins.ReadDouble();
 
            this.des_vel = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                this.des_vel[a] = ins.ReadDouble();
            }
 
        }
 
        public LCMTypes.desired_state_command_lcmt Copy()
        {
            LCMTypes.desired_state_command_lcmt outobj = new LCMTypes.desired_state_command_lcmt();
            outobj.next_point = new double[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.next_point[a] = this.next_point[a];
            }
 
            outobj.cur_pos = new double[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.cur_pos[a] = this.cur_pos[a];
            }
 
            outobj.cur_yaw = this.cur_yaw;
 
            outobj.pos_error_world = new double[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.pos_error_world[a] = this.pos_error_world[a];
            }
 
            outobj.pos_error_body = new double[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.pos_error_body[a] = this.pos_error_body[a];
            }
 
            outobj.heading_direction = this.heading_direction;
 
            outobj.yaw_error = this.yaw_error;
 
            outobj.des_vel = new double[(int) 3];
            for (int a = 0; a < 3; a++) {
                outobj.des_vel[a] = this.des_vel[a];
            }
 
            return outobj;
        }
    }
}

