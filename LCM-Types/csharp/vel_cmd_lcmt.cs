/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class vel_cmd_lcmt : LCM.LCM.LCMEncodable
    {
        public double v_x;
        public double v_y;
        public double v_psi;
 
        public vel_cmd_lcmt()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x277222fa35358500L;
 
        static vel_cmd_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.vel_cmd_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.vel_cmd_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.v_x); 
 
            outs.Write(this.v_y); 
 
            outs.Write(this.v_psi); 
 
        }
 
        public vel_cmd_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public vel_cmd_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.vel_cmd_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.vel_cmd_lcmt o = new LCMTypes.vel_cmd_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.v_x = ins.ReadDouble();
 
            this.v_y = ins.ReadDouble();
 
            this.v_psi = ins.ReadDouble();
 
        }
 
        public LCMTypes.vel_cmd_lcmt Copy()
        {
            LCMTypes.vel_cmd_lcmt outobj = new LCMTypes.vel_cmd_lcmt();
            outobj.v_x = this.v_x;
 
            outobj.v_y = this.v_y;
 
            outobj.v_psi = this.v_psi;
 
            return outobj;
        }
    }
}

