/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace LCMTypes
{
    public sealed class realsense_lcmt : LCM.LCM.LCMEncodable
    {
        public double[,] pos_Rs_Rs;
        public double[,] pos_Rs_World;
        public double[,] pos_Robot_World;
        public double[,] vRs_Rs;
        public double[,] accelRs_Rs;
        public double[,] omegaRs_Rs;
        public double[,] quat_Rs_to_RsRel;
        public double[,] rpy_Rs_to_RsRel;
        public double[] tracker_conf;
        public double[,] rpy_Robot_World;
 
        public realsense_lcmt()
        {
            pos_Rs_Rs = new double[2,3];
            pos_Rs_World = new double[2,3];
            pos_Robot_World = new double[2,3];
            vRs_Rs = new double[2,3];
            accelRs_Rs = new double[2,3];
            omegaRs_Rs = new double[2,3];
            quat_Rs_to_RsRel = new double[2,4];
            rpy_Rs_to_RsRel = new double[2,3];
            tracker_conf = new double[2];
            rpy_Robot_World = new double[2,3];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xdb86d09bbd2b0740L;
 
        static realsense_lcmt()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("LCMTypes.realsense_lcmt"))
                return 0L;
 
            classes.Add("LCMTypes.realsense_lcmt");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.pos_Rs_Rs[a,b]); 
                }
            }
 
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.pos_Rs_World[a,b]); 
                }
            }
 
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.pos_Robot_World[a,b]); 
                }
            }
 
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.vRs_Rs[a,b]); 
                }
            }
 
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.accelRs_Rs[a,b]); 
                }
            }
 
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.omegaRs_Rs[a,b]); 
                }
            }
 
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 4; b++) {
                    outs.Write(this.quat_Rs_to_RsRel[a,b]); 
                }
            }
 
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.rpy_Rs_to_RsRel[a,b]); 
                }
            }
 
            for (int a = 0; a < 2; a++) {
                outs.Write(this.tracker_conf[a]); 
            }
 
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outs.Write(this.rpy_Robot_World[a,b]); 
                }
            }
 
        }
 
        public realsense_lcmt(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public realsense_lcmt(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static LCMTypes.realsense_lcmt _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            LCMTypes.realsense_lcmt o = new LCMTypes.realsense_lcmt();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.pos_Rs_Rs = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    this.pos_Rs_Rs[a,b] = ins.ReadDouble();
                }
            }
 
            this.pos_Rs_World = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    this.pos_Rs_World[a,b] = ins.ReadDouble();
                }
            }
 
            this.pos_Robot_World = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    this.pos_Robot_World[a,b] = ins.ReadDouble();
                }
            }
 
            this.vRs_Rs = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    this.vRs_Rs[a,b] = ins.ReadDouble();
                }
            }
 
            this.accelRs_Rs = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    this.accelRs_Rs[a,b] = ins.ReadDouble();
                }
            }
 
            this.omegaRs_Rs = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    this.omegaRs_Rs[a,b] = ins.ReadDouble();
                }
            }
 
            this.quat_Rs_to_RsRel = new double[(int) 2,(int) 4];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 4; b++) {
                    this.quat_Rs_to_RsRel[a,b] = ins.ReadDouble();
                }
            }
 
            this.rpy_Rs_to_RsRel = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    this.rpy_Rs_to_RsRel[a,b] = ins.ReadDouble();
                }
            }
 
            this.tracker_conf = new double[(int) 2];
            for (int a = 0; a < 2; a++) {
                this.tracker_conf[a] = ins.ReadDouble();
            }
 
            this.rpy_Robot_World = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    this.rpy_Robot_World[a,b] = ins.ReadDouble();
                }
            }
 
        }
 
        public LCMTypes.realsense_lcmt Copy()
        {
            LCMTypes.realsense_lcmt outobj = new LCMTypes.realsense_lcmt();
            outobj.pos_Rs_Rs = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.pos_Rs_Rs[a,b] = this.pos_Rs_Rs[a,b];
                }
            }
 
            outobj.pos_Rs_World = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.pos_Rs_World[a,b] = this.pos_Rs_World[a,b];
                }
            }
 
            outobj.pos_Robot_World = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.pos_Robot_World[a,b] = this.pos_Robot_World[a,b];
                }
            }
 
            outobj.vRs_Rs = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.vRs_Rs[a,b] = this.vRs_Rs[a,b];
                }
            }
 
            outobj.accelRs_Rs = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.accelRs_Rs[a,b] = this.accelRs_Rs[a,b];
                }
            }
 
            outobj.omegaRs_Rs = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.omegaRs_Rs[a,b] = this.omegaRs_Rs[a,b];
                }
            }
 
            outobj.quat_Rs_to_RsRel = new double[(int) 2,(int) 4];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 4; b++) {
                    outobj.quat_Rs_to_RsRel[a,b] = this.quat_Rs_to_RsRel[a,b];
                }
            }
 
            outobj.rpy_Rs_to_RsRel = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.rpy_Rs_to_RsRel[a,b] = this.rpy_Rs_to_RsRel[a,b];
                }
            }
 
            outobj.tracker_conf = new double[(int) 2];
            for (int a = 0; a < 2; a++) {
                outobj.tracker_conf[a] = this.tracker_conf[a];
            }
 
            outobj.rpy_Robot_World = new double[(int) 2,(int) 3];
            for (int a = 0; a < 2; a++) {
                for (int b = 0; b < 3; b++) {
                    outobj.rpy_Robot_World[a,b] = this.rpy_Robot_World[a,b];
                }
            }
 
            return outobj;
        }
    }
}

