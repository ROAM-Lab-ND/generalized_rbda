"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class simulator_control_lcmt(object):
    __slots__ = ["key_sim_speed_up", "key_sim_speed_down", "key_pause"]

    __typenames__ = ["boolean", "boolean", "boolean"]

    __dimensions__ = [None, None, None]

    def __init__(self):
        self.key_sim_speed_up = False
        self.key_sim_speed_down = False
        self.key_pause = False

    def encode(self):
        buf = BytesIO()
        buf.write(simulator_control_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbb", self.key_sim_speed_up, self.key_sim_speed_down, self.key_pause))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != simulator_control_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return simulator_control_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = simulator_control_lcmt()
        self.key_sim_speed_up = bool(struct.unpack('b', buf.read(1))[0])
        self.key_sim_speed_down = bool(struct.unpack('b', buf.read(1))[0])
        self.key_pause = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if simulator_control_lcmt in parents: return 0
        tmphash = (0x7c1e3ce3b908892) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if simulator_control_lcmt._packed_fingerprint is None:
            simulator_control_lcmt._packed_fingerprint = struct.pack(">Q", simulator_control_lcmt._get_hash_recursive([]))
        return simulator_control_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

