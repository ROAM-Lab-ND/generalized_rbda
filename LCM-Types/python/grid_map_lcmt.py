"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class grid_map_lcmt(object):
    __slots__ = ["rows", "cols", "totalCells", "resolution", "center", "heightmap", "indexmap"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "float", "float", "float", "int32_t"]

    __dimensions__ = [None, None, None, None, [2], ["totalCells"], ["totalCells"]]

    def __init__(self):
        self.rows = 0
        self.cols = 0
        self.totalCells = 0
        self.resolution = 0.0
        self.center = [ 0.0 for dim0 in range(2) ]
        self.heightmap = []
        self.indexmap = []

    def encode(self):
        buf = BytesIO()
        buf.write(grid_map_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiif", self.rows, self.cols, self.totalCells, self.resolution))
        buf.write(struct.pack('>2f', *self.center[:2]))
        buf.write(struct.pack('>%df' % self.totalCells, *self.heightmap[:self.totalCells]))
        buf.write(struct.pack('>%di' % self.totalCells, *self.indexmap[:self.totalCells]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != grid_map_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return grid_map_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = grid_map_lcmt()
        self.rows, self.cols, self.totalCells, self.resolution = struct.unpack(">iiif", buf.read(16))
        self.center = struct.unpack('>2f', buf.read(8))
        self.heightmap = struct.unpack('>%df' % self.totalCells, buf.read(self.totalCells * 4))
        self.indexmap = struct.unpack('>%di' % self.totalCells, buf.read(self.totalCells * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if grid_map_lcmt in parents: return 0
        tmphash = (0x97c8d40346e867d2) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if grid_map_lcmt._packed_fingerprint is None:
            grid_map_lcmt._packed_fingerprint = struct.pack(">Q", grid_map_lcmt._get_hash_recursive([]))
        return grid_map_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

