"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class taqokd_training_lcmt(object):
    __slots__ = ["a", "b", "c", "d", "f", "heading", "train_iter_max", "mu", "f_max", "dist_to_obs_sf", "obs_height_sf", "land_height_offset", "land_dist_sf1", "land_dist_sf2", "px_flight", "py_flight", "k_softplus", "vert_vel_sf", "robot_mass_sf", "wbc_fb_weight", "b_use_wbc", "pz_takeoff", "roll_takeoff", "pitch_takeoff", "pz_flight", "roll_flight", "pitch_flight"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "int32_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "int32_t", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, [3], [3], [3], [3], [3], [3]]

    def __init__(self):
        self.a = 0.0
        self.b = 0.0
        self.c = 0.0
        self.d = 0.0
        self.f = 0.0
        self.heading = 0.0
        self.train_iter_max = 0
        self.mu = 0.0
        self.f_max = 0.0
        self.dist_to_obs_sf = 0.0
        self.obs_height_sf = 0.0
        self.land_height_offset = 0.0
        self.land_dist_sf1 = 0.0
        self.land_dist_sf2 = 0.0
        self.px_flight = 0.0
        self.py_flight = 0.0
        self.k_softplus = 0.0
        self.vert_vel_sf = 0.0
        self.robot_mass_sf = 0.0
        self.wbc_fb_weight = 0.0
        self.b_use_wbc = 0
        self.pz_takeoff = [ 0.0 for dim0 in range(3) ]
        self.roll_takeoff = [ 0.0 for dim0 in range(3) ]
        self.pitch_takeoff = [ 0.0 for dim0 in range(3) ]
        self.pz_flight = [ 0.0 for dim0 in range(3) ]
        self.roll_flight = [ 0.0 for dim0 in range(3) ]
        self.pitch_flight = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(taqokd_training_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ddddddidddddddddddddi", self.a, self.b, self.c, self.d, self.f, self.heading, self.train_iter_max, self.mu, self.f_max, self.dist_to_obs_sf, self.obs_height_sf, self.land_height_offset, self.land_dist_sf1, self.land_dist_sf2, self.px_flight, self.py_flight, self.k_softplus, self.vert_vel_sf, self.robot_mass_sf, self.wbc_fb_weight, self.b_use_wbc))
        buf.write(struct.pack('>3d', *self.pz_takeoff[:3]))
        buf.write(struct.pack('>3d', *self.roll_takeoff[:3]))
        buf.write(struct.pack('>3d', *self.pitch_takeoff[:3]))
        buf.write(struct.pack('>3d', *self.pz_flight[:3]))
        buf.write(struct.pack('>3d', *self.roll_flight[:3]))
        buf.write(struct.pack('>3d', *self.pitch_flight[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != taqokd_training_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return taqokd_training_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = taqokd_training_lcmt()
        self.a, self.b, self.c, self.d, self.f, self.heading, self.train_iter_max, self.mu, self.f_max, self.dist_to_obs_sf, self.obs_height_sf, self.land_height_offset, self.land_dist_sf1, self.land_dist_sf2, self.px_flight, self.py_flight, self.k_softplus, self.vert_vel_sf, self.robot_mass_sf, self.wbc_fb_weight, self.b_use_wbc = struct.unpack(">ddddddidddddddddddddi", buf.read(160))
        self.pz_takeoff = struct.unpack('>3d', buf.read(24))
        self.roll_takeoff = struct.unpack('>3d', buf.read(24))
        self.pitch_takeoff = struct.unpack('>3d', buf.read(24))
        self.pz_flight = struct.unpack('>3d', buf.read(24))
        self.roll_flight = struct.unpack('>3d', buf.read(24))
        self.pitch_flight = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if taqokd_training_lcmt in parents: return 0
        tmphash = (0xe8ee047f2ac4fdd3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if taqokd_training_lcmt._packed_fingerprint is None:
            taqokd_training_lcmt._packed_fingerprint = struct.pack(">Q", taqokd_training_lcmt._get_hash_recursive([]))
        return taqokd_training_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

