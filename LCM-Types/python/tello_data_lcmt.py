"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class tello_data_lcmt(object):
    __slots__ = ["q_hipz", "q_hipx", "q_hipy", "q_knee", "q_ankle", "qd_hipz", "qd_hipx", "qd_hipy", "qd_knee", "qd_ankle", "flags", "spi_driver_status"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "int32_t", "int32_t"]

    __dimensions__ = [[2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [4], None]

    def __init__(self):
        self.q_hipz = [ 0.0 for dim0 in range(2) ]
        self.q_hipx = [ 0.0 for dim0 in range(2) ]
        self.q_hipy = [ 0.0 for dim0 in range(2) ]
        self.q_knee = [ 0.0 for dim0 in range(2) ]
        self.q_ankle = [ 0.0 for dim0 in range(2) ]
        self.qd_hipz = [ 0.0 for dim0 in range(2) ]
        self.qd_hipx = [ 0.0 for dim0 in range(2) ]
        self.qd_hipy = [ 0.0 for dim0 in range(2) ]
        self.qd_knee = [ 0.0 for dim0 in range(2) ]
        self.qd_ankle = [ 0.0 for dim0 in range(2) ]
        self.flags = [ 0 for dim0 in range(4) ]
        self.spi_driver_status = 0

    def encode(self):
        buf = BytesIO()
        buf.write(tello_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>2f', *self.q_hipz[:2]))
        buf.write(struct.pack('>2f', *self.q_hipx[:2]))
        buf.write(struct.pack('>2f', *self.q_hipy[:2]))
        buf.write(struct.pack('>2f', *self.q_knee[:2]))
        buf.write(struct.pack('>2f', *self.q_ankle[:2]))
        buf.write(struct.pack('>2f', *self.qd_hipz[:2]))
        buf.write(struct.pack('>2f', *self.qd_hipx[:2]))
        buf.write(struct.pack('>2f', *self.qd_hipy[:2]))
        buf.write(struct.pack('>2f', *self.qd_knee[:2]))
        buf.write(struct.pack('>2f', *self.qd_ankle[:2]))
        buf.write(struct.pack('>4i', *self.flags[:4]))
        buf.write(struct.pack(">i", self.spi_driver_status))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != tello_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return tello_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = tello_data_lcmt()
        self.q_hipz = struct.unpack('>2f', buf.read(8))
        self.q_hipx = struct.unpack('>2f', buf.read(8))
        self.q_hipy = struct.unpack('>2f', buf.read(8))
        self.q_knee = struct.unpack('>2f', buf.read(8))
        self.q_ankle = struct.unpack('>2f', buf.read(8))
        self.qd_hipz = struct.unpack('>2f', buf.read(8))
        self.qd_hipx = struct.unpack('>2f', buf.read(8))
        self.qd_hipy = struct.unpack('>2f', buf.read(8))
        self.qd_knee = struct.unpack('>2f', buf.read(8))
        self.qd_ankle = struct.unpack('>2f', buf.read(8))
        self.flags = struct.unpack('>4i', buf.read(16))
        self.spi_driver_status = struct.unpack(">i", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if tello_data_lcmt in parents: return 0
        tmphash = (0x9fb4ac24573690b7) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if tello_data_lcmt._packed_fingerprint is None:
            tello_data_lcmt._packed_fingerprint = struct.pack(">Q", tello_data_lcmt._get_hash_recursive([]))
        return tello_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

