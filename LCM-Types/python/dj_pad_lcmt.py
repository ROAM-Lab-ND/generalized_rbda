"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class dj_pad_lcmt(object):
    __slots__ = ["slider_0", "slider_1", "slider_2", "slider_3", "slider_4", "slider_5", "slider_6", "slider_7", "params_count", "params_names", "params_types"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double", "int32_t", "string", "int32_t"]

    __dimensions__ = [[3], [3], [3], [3], [3], [3], [3], [3], None, ["params_count"], ["params_count"]]

    def __init__(self):
        self.slider_0 = [ 0.0 for dim0 in range(3) ]
        self.slider_1 = [ 0.0 for dim0 in range(3) ]
        self.slider_2 = [ 0.0 for dim0 in range(3) ]
        self.slider_3 = [ 0.0 for dim0 in range(3) ]
        self.slider_4 = [ 0.0 for dim0 in range(3) ]
        self.slider_5 = [ 0.0 for dim0 in range(3) ]
        self.slider_6 = [ 0.0 for dim0 in range(3) ]
        self.slider_7 = [ 0.0 for dim0 in range(3) ]
        self.params_count = 0
        self.params_names = []
        self.params_types = []

    def encode(self):
        buf = BytesIO()
        buf.write(dj_pad_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3d', *self.slider_0[:3]))
        buf.write(struct.pack('>3d', *self.slider_1[:3]))
        buf.write(struct.pack('>3d', *self.slider_2[:3]))
        buf.write(struct.pack('>3d', *self.slider_3[:3]))
        buf.write(struct.pack('>3d', *self.slider_4[:3]))
        buf.write(struct.pack('>3d', *self.slider_5[:3]))
        buf.write(struct.pack('>3d', *self.slider_6[:3]))
        buf.write(struct.pack('>3d', *self.slider_7[:3]))
        buf.write(struct.pack(">i", self.params_count))
        for i0 in range(self.params_count):
            __params_names_encoded = self.params_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__params_names_encoded)+1))
            buf.write(__params_names_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%di' % self.params_count, *self.params_types[:self.params_count]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != dj_pad_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return dj_pad_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = dj_pad_lcmt()
        self.slider_0 = struct.unpack('>3d', buf.read(24))
        self.slider_1 = struct.unpack('>3d', buf.read(24))
        self.slider_2 = struct.unpack('>3d', buf.read(24))
        self.slider_3 = struct.unpack('>3d', buf.read(24))
        self.slider_4 = struct.unpack('>3d', buf.read(24))
        self.slider_5 = struct.unpack('>3d', buf.read(24))
        self.slider_6 = struct.unpack('>3d', buf.read(24))
        self.slider_7 = struct.unpack('>3d', buf.read(24))
        self.params_count = struct.unpack(">i", buf.read(4))[0]
        self.params_names = []
        for i0 in range(self.params_count):
            __params_names_len = struct.unpack('>I', buf.read(4))[0]
            self.params_names.append(buf.read(__params_names_len)[:-1].decode('utf-8', 'replace'))
        self.params_types = struct.unpack('>%di' % self.params_count, buf.read(self.params_count * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if dj_pad_lcmt in parents: return 0
        tmphash = (0x136a31e2d7e40798) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if dj_pad_lcmt._packed_fingerprint is None:
            dj_pad_lcmt._packed_fingerprint = struct.pack(">Q", dj_pad_lcmt._get_hash_recursive([]))
        return dj_pad_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

