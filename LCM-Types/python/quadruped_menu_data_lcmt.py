"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class quadruped_menu_data_lcmt(object):
    __slots__ = ["cheater_mode", "control_mode", "use_wbc", "use_rc", "display_heightmap", "display_path_planning", "display_potential_field", "display_traverability", "Kd_body", "Kd_cam", "Kd_clm", "Kd_foot", "Kd_joint", "Kd_ori", "Kp_body", "Kp_cam", "Kp_clm", "Kp_foot", "Kp_joint", "Kp_ori", "Q_ang", "Q_ori", "Q_pos", "Q_vel", "RPC_H_phi0", "RPC_H_r_rot", "RPC_H_r_trans", "RPC_H_theta0", "RPC_Q_dp", "RPC_Q_dtheta", "RPC_Q_p", "RPC_Q_theta", "RPC_R_f", "RPC_R_r", "RPC_filter", "RPC_gravity", "RPC_inertia", "RPC_interface_type", "RPC_mass", "RPC_mu", "RPC_use_async_filt", "RPC_use_pred_comp", "RPC_visualize_pred", "R_control", "R_prev", "Swing_Kd_cartesian", "Swing_Kd_joint", "Swing_Kp_cartesian", "Swing_Kp_joint", "Swing_step_offset", "Swing_traj_height", "Swing_use_tau_ff", "acro_task", "des_dp", "des_dp_max", "des_dtheta", "des_dtheta_max", "des_p", "des_theta", "des_theta_max", "gait_disturbance", "gait_max_leg_angle", "gait_max_stance_time", "gait_min_stance_time", "gait_override", "gait_period_time", "gait_recovery", "gait_switching_phase", "gait_type", "stance_legs"]

    __typenames__ = ["boolean", "int64_t", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None, [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], None, None, None, None, None, None, None, None, [3], [3], [3], [3], [3], None, None, None, [3], [3], [3], [3], [3], [3], [3], [3], None, None, None, None, None, [3], None, None, None]

    def __init__(self):
        self.cheater_mode = False
        self.control_mode = 0
        self.use_wbc = False
        self.use_rc = False
        self.display_heightmap = False
        self.display_path_planning = False
        self.display_potential_field = False
        self.display_traverability = False
        self.Kd_body = [ 0.0 for dim0 in range(3) ]
        self.Kd_cam = [ 0.0 for dim0 in range(3) ]
        self.Kd_clm = [ 0.0 for dim0 in range(3) ]
        self.Kd_foot = [ 0.0 for dim0 in range(3) ]
        self.Kd_joint = [ 0.0 for dim0 in range(3) ]
        self.Kd_ori = [ 0.0 for dim0 in range(3) ]
        self.Kp_body = [ 0.0 for dim0 in range(3) ]
        self.Kp_cam = [ 0.0 for dim0 in range(3) ]
        self.Kp_clm = [ 0.0 for dim0 in range(3) ]
        self.Kp_foot = [ 0.0 for dim0 in range(3) ]
        self.Kp_joint = [ 0.0 for dim0 in range(3) ]
        self.Kp_ori = [ 0.0 for dim0 in range(3) ]
        self.Q_ang = [ 0.0 for dim0 in range(3) ]
        self.Q_ori = [ 0.0 for dim0 in range(3) ]
        self.Q_pos = [ 0.0 for dim0 in range(3) ]
        self.Q_vel = [ 0.0 for dim0 in range(3) ]
        self.RPC_H_phi0 = [ 0.0 for dim0 in range(3) ]
        self.RPC_H_r_rot = [ 0.0 for dim0 in range(3) ]
        self.RPC_H_r_trans = [ 0.0 for dim0 in range(3) ]
        self.RPC_H_theta0 = [ 0.0 for dim0 in range(3) ]
        self.RPC_Q_dp = [ 0.0 for dim0 in range(3) ]
        self.RPC_Q_dtheta = [ 0.0 for dim0 in range(3) ]
        self.RPC_Q_p = [ 0.0 for dim0 in range(3) ]
        self.RPC_Q_theta = [ 0.0 for dim0 in range(3) ]
        self.RPC_R_f = [ 0.0 for dim0 in range(3) ]
        self.RPC_R_r = [ 0.0 for dim0 in range(3) ]
        self.RPC_filter = [ 0.0 for dim0 in range(3) ]
        self.RPC_gravity = [ 0.0 for dim0 in range(3) ]
        self.RPC_inertia = [ 0.0 for dim0 in range(3) ]
        self.RPC_interface_type = 0.0
        self.RPC_mass = 0.0
        self.RPC_mu = 0.0
        self.RPC_use_async_filt = 0.0
        self.RPC_use_pred_comp = 0.0
        self.RPC_visualize_pred = 0.0
        self.R_control = 0.0
        self.R_prev = 0.0
        self.Swing_Kd_cartesian = [ 0.0 for dim0 in range(3) ]
        self.Swing_Kd_joint = [ 0.0 for dim0 in range(3) ]
        self.Swing_Kp_cartesian = [ 0.0 for dim0 in range(3) ]
        self.Swing_Kp_joint = [ 0.0 for dim0 in range(3) ]
        self.Swing_step_offset = [ 0.0 for dim0 in range(3) ]
        self.Swing_traj_height = 0.0
        self.Swing_use_tau_ff = 0.0
        self.acro_task = 0.0
        self.des_dp = [ 0.0 for dim0 in range(3) ]
        self.des_dp_max = [ 0.0 for dim0 in range(3) ]
        self.des_dtheta = [ 0.0 for dim0 in range(3) ]
        self.des_dtheta_max = [ 0.0 for dim0 in range(3) ]
        self.des_p = [ 0.0 for dim0 in range(3) ]
        self.des_theta = [ 0.0 for dim0 in range(3) ]
        self.des_theta_max = [ 0.0 for dim0 in range(3) ]
        self.gait_disturbance = [ 0.0 for dim0 in range(3) ]
        self.gait_max_leg_angle = 0.0
        self.gait_max_stance_time = 0.0
        self.gait_min_stance_time = 0.0
        self.gait_override = 0.0
        self.gait_period_time = 0.0
        self.gait_recovery = [ 0.0 for dim0 in range(3) ]
        self.gait_switching_phase = 0.0
        self.gait_type = 0.0
        self.stance_legs = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(quadruped_menu_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bqbbbbbb", self.cheater_mode, self.control_mode, self.use_wbc, self.use_rc, self.display_heightmap, self.display_path_planning, self.display_potential_field, self.display_traverability))
        buf.write(struct.pack('>3d', *self.Kd_body[:3]))
        buf.write(struct.pack('>3d', *self.Kd_cam[:3]))
        buf.write(struct.pack('>3d', *self.Kd_clm[:3]))
        buf.write(struct.pack('>3d', *self.Kd_foot[:3]))
        buf.write(struct.pack('>3d', *self.Kd_joint[:3]))
        buf.write(struct.pack('>3d', *self.Kd_ori[:3]))
        buf.write(struct.pack('>3d', *self.Kp_body[:3]))
        buf.write(struct.pack('>3d', *self.Kp_cam[:3]))
        buf.write(struct.pack('>3d', *self.Kp_clm[:3]))
        buf.write(struct.pack('>3d', *self.Kp_foot[:3]))
        buf.write(struct.pack('>3d', *self.Kp_joint[:3]))
        buf.write(struct.pack('>3d', *self.Kp_ori[:3]))
        buf.write(struct.pack('>3d', *self.Q_ang[:3]))
        buf.write(struct.pack('>3d', *self.Q_ori[:3]))
        buf.write(struct.pack('>3d', *self.Q_pos[:3]))
        buf.write(struct.pack('>3d', *self.Q_vel[:3]))
        buf.write(struct.pack('>3d', *self.RPC_H_phi0[:3]))
        buf.write(struct.pack('>3d', *self.RPC_H_r_rot[:3]))
        buf.write(struct.pack('>3d', *self.RPC_H_r_trans[:3]))
        buf.write(struct.pack('>3d', *self.RPC_H_theta0[:3]))
        buf.write(struct.pack('>3d', *self.RPC_Q_dp[:3]))
        buf.write(struct.pack('>3d', *self.RPC_Q_dtheta[:3]))
        buf.write(struct.pack('>3d', *self.RPC_Q_p[:3]))
        buf.write(struct.pack('>3d', *self.RPC_Q_theta[:3]))
        buf.write(struct.pack('>3d', *self.RPC_R_f[:3]))
        buf.write(struct.pack('>3d', *self.RPC_R_r[:3]))
        buf.write(struct.pack('>3d', *self.RPC_filter[:3]))
        buf.write(struct.pack('>3d', *self.RPC_gravity[:3]))
        buf.write(struct.pack('>3d', *self.RPC_inertia[:3]))
        buf.write(struct.pack(">dddddddd", self.RPC_interface_type, self.RPC_mass, self.RPC_mu, self.RPC_use_async_filt, self.RPC_use_pred_comp, self.RPC_visualize_pred, self.R_control, self.R_prev))
        buf.write(struct.pack('>3d', *self.Swing_Kd_cartesian[:3]))
        buf.write(struct.pack('>3d', *self.Swing_Kd_joint[:3]))
        buf.write(struct.pack('>3d', *self.Swing_Kp_cartesian[:3]))
        buf.write(struct.pack('>3d', *self.Swing_Kp_joint[:3]))
        buf.write(struct.pack('>3d', *self.Swing_step_offset[:3]))
        buf.write(struct.pack(">ddd", self.Swing_traj_height, self.Swing_use_tau_ff, self.acro_task))
        buf.write(struct.pack('>3d', *self.des_dp[:3]))
        buf.write(struct.pack('>3d', *self.des_dp_max[:3]))
        buf.write(struct.pack('>3d', *self.des_dtheta[:3]))
        buf.write(struct.pack('>3d', *self.des_dtheta_max[:3]))
        buf.write(struct.pack('>3d', *self.des_p[:3]))
        buf.write(struct.pack('>3d', *self.des_theta[:3]))
        buf.write(struct.pack('>3d', *self.des_theta_max[:3]))
        buf.write(struct.pack('>3d', *self.gait_disturbance[:3]))
        buf.write(struct.pack(">ddddd", self.gait_max_leg_angle, self.gait_max_stance_time, self.gait_min_stance_time, self.gait_override, self.gait_period_time))
        buf.write(struct.pack('>3d', *self.gait_recovery[:3]))
        buf.write(struct.pack(">ddd", self.gait_switching_phase, self.gait_type, self.stance_legs))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != quadruped_menu_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return quadruped_menu_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = quadruped_menu_data_lcmt()
        self.cheater_mode = bool(struct.unpack('b', buf.read(1))[0])
        self.control_mode = struct.unpack(">q", buf.read(8))[0]
        self.use_wbc = bool(struct.unpack('b', buf.read(1))[0])
        self.use_rc = bool(struct.unpack('b', buf.read(1))[0])
        self.display_heightmap = bool(struct.unpack('b', buf.read(1))[0])
        self.display_path_planning = bool(struct.unpack('b', buf.read(1))[0])
        self.display_potential_field = bool(struct.unpack('b', buf.read(1))[0])
        self.display_traverability = bool(struct.unpack('b', buf.read(1))[0])
        self.Kd_body = struct.unpack('>3d', buf.read(24))
        self.Kd_cam = struct.unpack('>3d', buf.read(24))
        self.Kd_clm = struct.unpack('>3d', buf.read(24))
        self.Kd_foot = struct.unpack('>3d', buf.read(24))
        self.Kd_joint = struct.unpack('>3d', buf.read(24))
        self.Kd_ori = struct.unpack('>3d', buf.read(24))
        self.Kp_body = struct.unpack('>3d', buf.read(24))
        self.Kp_cam = struct.unpack('>3d', buf.read(24))
        self.Kp_clm = struct.unpack('>3d', buf.read(24))
        self.Kp_foot = struct.unpack('>3d', buf.read(24))
        self.Kp_joint = struct.unpack('>3d', buf.read(24))
        self.Kp_ori = struct.unpack('>3d', buf.read(24))
        self.Q_ang = struct.unpack('>3d', buf.read(24))
        self.Q_ori = struct.unpack('>3d', buf.read(24))
        self.Q_pos = struct.unpack('>3d', buf.read(24))
        self.Q_vel = struct.unpack('>3d', buf.read(24))
        self.RPC_H_phi0 = struct.unpack('>3d', buf.read(24))
        self.RPC_H_r_rot = struct.unpack('>3d', buf.read(24))
        self.RPC_H_r_trans = struct.unpack('>3d', buf.read(24))
        self.RPC_H_theta0 = struct.unpack('>3d', buf.read(24))
        self.RPC_Q_dp = struct.unpack('>3d', buf.read(24))
        self.RPC_Q_dtheta = struct.unpack('>3d', buf.read(24))
        self.RPC_Q_p = struct.unpack('>3d', buf.read(24))
        self.RPC_Q_theta = struct.unpack('>3d', buf.read(24))
        self.RPC_R_f = struct.unpack('>3d', buf.read(24))
        self.RPC_R_r = struct.unpack('>3d', buf.read(24))
        self.RPC_filter = struct.unpack('>3d', buf.read(24))
        self.RPC_gravity = struct.unpack('>3d', buf.read(24))
        self.RPC_inertia = struct.unpack('>3d', buf.read(24))
        self.RPC_interface_type, self.RPC_mass, self.RPC_mu, self.RPC_use_async_filt, self.RPC_use_pred_comp, self.RPC_visualize_pred, self.R_control, self.R_prev = struct.unpack(">dddddddd", buf.read(64))
        self.Swing_Kd_cartesian = struct.unpack('>3d', buf.read(24))
        self.Swing_Kd_joint = struct.unpack('>3d', buf.read(24))
        self.Swing_Kp_cartesian = struct.unpack('>3d', buf.read(24))
        self.Swing_Kp_joint = struct.unpack('>3d', buf.read(24))
        self.Swing_step_offset = struct.unpack('>3d', buf.read(24))
        self.Swing_traj_height, self.Swing_use_tau_ff, self.acro_task = struct.unpack(">ddd", buf.read(24))
        self.des_dp = struct.unpack('>3d', buf.read(24))
        self.des_dp_max = struct.unpack('>3d', buf.read(24))
        self.des_dtheta = struct.unpack('>3d', buf.read(24))
        self.des_dtheta_max = struct.unpack('>3d', buf.read(24))
        self.des_p = struct.unpack('>3d', buf.read(24))
        self.des_theta = struct.unpack('>3d', buf.read(24))
        self.des_theta_max = struct.unpack('>3d', buf.read(24))
        self.gait_disturbance = struct.unpack('>3d', buf.read(24))
        self.gait_max_leg_angle, self.gait_max_stance_time, self.gait_min_stance_time, self.gait_override, self.gait_period_time = struct.unpack(">ddddd", buf.read(40))
        self.gait_recovery = struct.unpack('>3d', buf.read(24))
        self.gait_switching_phase, self.gait_type, self.stance_legs = struct.unpack(">ddd", buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if quadruped_menu_data_lcmt in parents: return 0
        tmphash = (0x86997f7be4843ceb) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if quadruped_menu_data_lcmt._packed_fingerprint is None:
            quadruped_menu_data_lcmt._packed_fingerprint = struct.pack(">Q", quadruped_menu_data_lcmt._get_hash_recursive([]))
        return quadruped_menu_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

