"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class teleop_command_lcmt(object):
    __slots__ = ["q_des_base", "q_des_shoulderx", "q_des_shouldery", "q_des_elbow", "q_des_wristpitch", "q_des_wristroll", "q_des_gripper", "qd_des_base", "qd_des_shoulderx", "qd_des_shouldery", "qd_des_elbow", "qd_des_wristpitch", "qd_des_wristroll", "qd_des_gripper", "kp_base", "kp_shoulderx", "kp_shouldery", "kp_elbow", "kp_wristpitch", "kp_wristroll", "kp_gripper", "kd_base", "kd_shoulderx", "kd_shouldery", "kd_elbow", "kd_wristpitch", "kd_wristroll", "kd_gripper", "tau_base", "tau_shoulderx", "tau_shouldery", "tau_elbow", "tau_wristpitch", "tau_wristroll", "tau_gripper", "flags"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "int32_t"]

    __dimensions__ = [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [4]]

    def __init__(self):
        self.q_des_base = [ 0.0 for dim0 in range(1) ]
        self.q_des_shoulderx = [ 0.0 for dim0 in range(1) ]
        self.q_des_shouldery = [ 0.0 for dim0 in range(1) ]
        self.q_des_elbow = [ 0.0 for dim0 in range(1) ]
        self.q_des_wristpitch = [ 0.0 for dim0 in range(1) ]
        self.q_des_wristroll = [ 0.0 for dim0 in range(1) ]
        self.q_des_gripper = [ 0.0 for dim0 in range(1) ]
        self.qd_des_base = [ 0.0 for dim0 in range(1) ]
        self.qd_des_shoulderx = [ 0.0 for dim0 in range(1) ]
        self.qd_des_shouldery = [ 0.0 for dim0 in range(1) ]
        self.qd_des_elbow = [ 0.0 for dim0 in range(1) ]
        self.qd_des_wristpitch = [ 0.0 for dim0 in range(1) ]
        self.qd_des_wristroll = [ 0.0 for dim0 in range(1) ]
        self.qd_des_gripper = [ 0.0 for dim0 in range(1) ]
        self.kp_base = [ 0.0 for dim0 in range(1) ]
        self.kp_shoulderx = [ 0.0 for dim0 in range(1) ]
        self.kp_shouldery = [ 0.0 for dim0 in range(1) ]
        self.kp_elbow = [ 0.0 for dim0 in range(1) ]
        self.kp_wristpitch = [ 0.0 for dim0 in range(1) ]
        self.kp_wristroll = [ 0.0 for dim0 in range(1) ]
        self.kp_gripper = [ 0.0 for dim0 in range(1) ]
        self.kd_base = [ 0.0 for dim0 in range(1) ]
        self.kd_shoulderx = [ 0.0 for dim0 in range(1) ]
        self.kd_shouldery = [ 0.0 for dim0 in range(1) ]
        self.kd_elbow = [ 0.0 for dim0 in range(1) ]
        self.kd_wristpitch = [ 0.0 for dim0 in range(1) ]
        self.kd_wristroll = [ 0.0 for dim0 in range(1) ]
        self.kd_gripper = [ 0.0 for dim0 in range(1) ]
        self.tau_base = [ 0.0 for dim0 in range(1) ]
        self.tau_shoulderx = [ 0.0 for dim0 in range(1) ]
        self.tau_shouldery = [ 0.0 for dim0 in range(1) ]
        self.tau_elbow = [ 0.0 for dim0 in range(1) ]
        self.tau_wristpitch = [ 0.0 for dim0 in range(1) ]
        self.tau_wristroll = [ 0.0 for dim0 in range(1) ]
        self.tau_gripper = [ 0.0 for dim0 in range(1) ]
        self.flags = [ 0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(teleop_command_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>1f', *self.q_des_base[:1]))
        buf.write(struct.pack('>1f', *self.q_des_shoulderx[:1]))
        buf.write(struct.pack('>1f', *self.q_des_shouldery[:1]))
        buf.write(struct.pack('>1f', *self.q_des_elbow[:1]))
        buf.write(struct.pack('>1f', *self.q_des_wristpitch[:1]))
        buf.write(struct.pack('>1f', *self.q_des_wristroll[:1]))
        buf.write(struct.pack('>1f', *self.q_des_gripper[:1]))
        buf.write(struct.pack('>1f', *self.qd_des_base[:1]))
        buf.write(struct.pack('>1f', *self.qd_des_shoulderx[:1]))
        buf.write(struct.pack('>1f', *self.qd_des_shouldery[:1]))
        buf.write(struct.pack('>1f', *self.qd_des_elbow[:1]))
        buf.write(struct.pack('>1f', *self.qd_des_wristpitch[:1]))
        buf.write(struct.pack('>1f', *self.qd_des_wristroll[:1]))
        buf.write(struct.pack('>1f', *self.qd_des_gripper[:1]))
        buf.write(struct.pack('>1f', *self.kp_base[:1]))
        buf.write(struct.pack('>1f', *self.kp_shoulderx[:1]))
        buf.write(struct.pack('>1f', *self.kp_shouldery[:1]))
        buf.write(struct.pack('>1f', *self.kp_elbow[:1]))
        buf.write(struct.pack('>1f', *self.kp_wristpitch[:1]))
        buf.write(struct.pack('>1f', *self.kp_wristroll[:1]))
        buf.write(struct.pack('>1f', *self.kp_gripper[:1]))
        buf.write(struct.pack('>1f', *self.kd_base[:1]))
        buf.write(struct.pack('>1f', *self.kd_shoulderx[:1]))
        buf.write(struct.pack('>1f', *self.kd_shouldery[:1]))
        buf.write(struct.pack('>1f', *self.kd_elbow[:1]))
        buf.write(struct.pack('>1f', *self.kd_wristpitch[:1]))
        buf.write(struct.pack('>1f', *self.kd_wristroll[:1]))
        buf.write(struct.pack('>1f', *self.kd_gripper[:1]))
        buf.write(struct.pack('>1f', *self.tau_base[:1]))
        buf.write(struct.pack('>1f', *self.tau_shoulderx[:1]))
        buf.write(struct.pack('>1f', *self.tau_shouldery[:1]))
        buf.write(struct.pack('>1f', *self.tau_elbow[:1]))
        buf.write(struct.pack('>1f', *self.tau_wristpitch[:1]))
        buf.write(struct.pack('>1f', *self.tau_wristroll[:1]))
        buf.write(struct.pack('>1f', *self.tau_gripper[:1]))
        buf.write(struct.pack('>4i', *self.flags[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != teleop_command_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return teleop_command_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = teleop_command_lcmt()
        self.q_des_base = struct.unpack('>1f', buf.read(4))
        self.q_des_shoulderx = struct.unpack('>1f', buf.read(4))
        self.q_des_shouldery = struct.unpack('>1f', buf.read(4))
        self.q_des_elbow = struct.unpack('>1f', buf.read(4))
        self.q_des_wristpitch = struct.unpack('>1f', buf.read(4))
        self.q_des_wristroll = struct.unpack('>1f', buf.read(4))
        self.q_des_gripper = struct.unpack('>1f', buf.read(4))
        self.qd_des_base = struct.unpack('>1f', buf.read(4))
        self.qd_des_shoulderx = struct.unpack('>1f', buf.read(4))
        self.qd_des_shouldery = struct.unpack('>1f', buf.read(4))
        self.qd_des_elbow = struct.unpack('>1f', buf.read(4))
        self.qd_des_wristpitch = struct.unpack('>1f', buf.read(4))
        self.qd_des_wristroll = struct.unpack('>1f', buf.read(4))
        self.qd_des_gripper = struct.unpack('>1f', buf.read(4))
        self.kp_base = struct.unpack('>1f', buf.read(4))
        self.kp_shoulderx = struct.unpack('>1f', buf.read(4))
        self.kp_shouldery = struct.unpack('>1f', buf.read(4))
        self.kp_elbow = struct.unpack('>1f', buf.read(4))
        self.kp_wristpitch = struct.unpack('>1f', buf.read(4))
        self.kp_wristroll = struct.unpack('>1f', buf.read(4))
        self.kp_gripper = struct.unpack('>1f', buf.read(4))
        self.kd_base = struct.unpack('>1f', buf.read(4))
        self.kd_shoulderx = struct.unpack('>1f', buf.read(4))
        self.kd_shouldery = struct.unpack('>1f', buf.read(4))
        self.kd_elbow = struct.unpack('>1f', buf.read(4))
        self.kd_wristpitch = struct.unpack('>1f', buf.read(4))
        self.kd_wristroll = struct.unpack('>1f', buf.read(4))
        self.kd_gripper = struct.unpack('>1f', buf.read(4))
        self.tau_base = struct.unpack('>1f', buf.read(4))
        self.tau_shoulderx = struct.unpack('>1f', buf.read(4))
        self.tau_shouldery = struct.unpack('>1f', buf.read(4))
        self.tau_elbow = struct.unpack('>1f', buf.read(4))
        self.tau_wristpitch = struct.unpack('>1f', buf.read(4))
        self.tau_wristroll = struct.unpack('>1f', buf.read(4))
        self.tau_gripper = struct.unpack('>1f', buf.read(4))
        self.flags = struct.unpack('>4i', buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if teleop_command_lcmt in parents: return 0
        tmphash = (0xc33069e635c9ea0c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if teleop_command_lcmt._packed_fingerprint is None:
            teleop_command_lcmt._packed_fingerprint = struct.pack(">Q", teleop_command_lcmt._get_hash_recursive([]))
        return teleop_command_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

