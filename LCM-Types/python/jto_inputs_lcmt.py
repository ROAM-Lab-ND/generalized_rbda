"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class jto_inputs_lcmt(object):
    __slots__ = ["num_timesteps", "dt", "state_min0", "state_max0", "foot_min0", "foot_max0", "x_warm_start", "u_warm_start", "x_reference", "u_reference", "contact_state", "state_min", "state_max", "force_min", "force_max", "mu", "Q", "Q_f", "R"]

    __typenames__ = ["int32_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, [12], [12], [12], [12], [360], [720], [360], [720], [124], [12], [12], [12], [12], [4], [12], [12], [24]]

    def __init__(self):
        self.num_timesteps = 0
        self.dt = 0.0
        self.state_min0 = [ 0.0 for dim0 in range(12) ]
        self.state_max0 = [ 0.0 for dim0 in range(12) ]
        self.foot_min0 = [ 0.0 for dim0 in range(12) ]
        self.foot_max0 = [ 0.0 for dim0 in range(12) ]
        self.x_warm_start = [ 0.0 for dim0 in range(360) ]
        self.u_warm_start = [ 0.0 for dim0 in range(720) ]
        self.x_reference = [ 0.0 for dim0 in range(360) ]
        self.u_reference = [ 0.0 for dim0 in range(720) ]
        self.contact_state = [ 0.0 for dim0 in range(124) ]
        self.state_min = [ 0.0 for dim0 in range(12) ]
        self.state_max = [ 0.0 for dim0 in range(12) ]
        self.force_min = [ 0.0 for dim0 in range(12) ]
        self.force_max = [ 0.0 for dim0 in range(12) ]
        self.mu = [ 0.0 for dim0 in range(4) ]
        self.Q = [ 0.0 for dim0 in range(12) ]
        self.Q_f = [ 0.0 for dim0 in range(12) ]
        self.R = [ 0.0 for dim0 in range(24) ]

    def encode(self):
        buf = BytesIO()
        buf.write(jto_inputs_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">id", self.num_timesteps, self.dt))
        buf.write(struct.pack('>12d', *self.state_min0[:12]))
        buf.write(struct.pack('>12d', *self.state_max0[:12]))
        buf.write(struct.pack('>12d', *self.foot_min0[:12]))
        buf.write(struct.pack('>12d', *self.foot_max0[:12]))
        buf.write(struct.pack('>360d', *self.x_warm_start[:360]))
        buf.write(struct.pack('>720d', *self.u_warm_start[:720]))
        buf.write(struct.pack('>360d', *self.x_reference[:360]))
        buf.write(struct.pack('>720d', *self.u_reference[:720]))
        buf.write(struct.pack('>124d', *self.contact_state[:124]))
        buf.write(struct.pack('>12d', *self.state_min[:12]))
        buf.write(struct.pack('>12d', *self.state_max[:12]))
        buf.write(struct.pack('>12d', *self.force_min[:12]))
        buf.write(struct.pack('>12d', *self.force_max[:12]))
        buf.write(struct.pack('>4d', *self.mu[:4]))
        buf.write(struct.pack('>12d', *self.Q[:12]))
        buf.write(struct.pack('>12d', *self.Q_f[:12]))
        buf.write(struct.pack('>24d', *self.R[:24]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != jto_inputs_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return jto_inputs_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = jto_inputs_lcmt()
        self.num_timesteps, self.dt = struct.unpack(">id", buf.read(12))
        self.state_min0 = struct.unpack('>12d', buf.read(96))
        self.state_max0 = struct.unpack('>12d', buf.read(96))
        self.foot_min0 = struct.unpack('>12d', buf.read(96))
        self.foot_max0 = struct.unpack('>12d', buf.read(96))
        self.x_warm_start = struct.unpack('>360d', buf.read(2880))
        self.u_warm_start = struct.unpack('>720d', buf.read(5760))
        self.x_reference = struct.unpack('>360d', buf.read(2880))
        self.u_reference = struct.unpack('>720d', buf.read(5760))
        self.contact_state = struct.unpack('>124d', buf.read(992))
        self.state_min = struct.unpack('>12d', buf.read(96))
        self.state_max = struct.unpack('>12d', buf.read(96))
        self.force_min = struct.unpack('>12d', buf.read(96))
        self.force_max = struct.unpack('>12d', buf.read(96))
        self.mu = struct.unpack('>4d', buf.read(32))
        self.Q = struct.unpack('>12d', buf.read(96))
        self.Q_f = struct.unpack('>12d', buf.read(96))
        self.R = struct.unpack('>24d', buf.read(192))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if jto_inputs_lcmt in parents: return 0
        tmphash = (0x8633f902b49a12ea) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if jto_inputs_lcmt._packed_fingerprint is None:
            jto_inputs_lcmt._packed_fingerprint = struct.pack(">Q", jto_inputs_lcmt._get_hash_recursive([]))
        return jto_inputs_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

