"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class realsense_lcmt(object):
    __slots__ = ["pos_Rs_Rs", "pos_Rs_World", "pos_Robot_World", "vRs_Rs", "accelRs_Rs", "omegaRs_Rs", "quat_Rs_to_RsRel", "rpy_Rs_to_RsRel", "tracker_conf", "rpy_Robot_World"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [[2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 4], [2, 3], [2], [2, 3]]

    def __init__(self):
        self.pos_Rs_Rs = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(2) ]
        self.pos_Rs_World = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(2) ]
        self.pos_Robot_World = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(2) ]
        self.vRs_Rs = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(2) ]
        self.accelRs_Rs = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(2) ]
        self.omegaRs_Rs = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(2) ]
        self.quat_Rs_to_RsRel = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(2) ]
        self.rpy_Rs_to_RsRel = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(2) ]
        self.tracker_conf = [ 0.0 for dim0 in range(2) ]
        self.rpy_Robot_World = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(2) ]

    def encode(self):
        buf = BytesIO()
        buf.write(realsense_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        for i0 in range(2):
            buf.write(struct.pack('>3d', *self.pos_Rs_Rs[i0][:3]))
        for i0 in range(2):
            buf.write(struct.pack('>3d', *self.pos_Rs_World[i0][:3]))
        for i0 in range(2):
            buf.write(struct.pack('>3d', *self.pos_Robot_World[i0][:3]))
        for i0 in range(2):
            buf.write(struct.pack('>3d', *self.vRs_Rs[i0][:3]))
        for i0 in range(2):
            buf.write(struct.pack('>3d', *self.accelRs_Rs[i0][:3]))
        for i0 in range(2):
            buf.write(struct.pack('>3d', *self.omegaRs_Rs[i0][:3]))
        for i0 in range(2):
            buf.write(struct.pack('>4d', *self.quat_Rs_to_RsRel[i0][:4]))
        for i0 in range(2):
            buf.write(struct.pack('>3d', *self.rpy_Rs_to_RsRel[i0][:3]))
        buf.write(struct.pack('>2d', *self.tracker_conf[:2]))
        for i0 in range(2):
            buf.write(struct.pack('>3d', *self.rpy_Robot_World[i0][:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != realsense_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return realsense_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = realsense_lcmt()
        self.pos_Rs_Rs = []
        for i0 in range(2):
            self.pos_Rs_Rs.append(struct.unpack('>3d', buf.read(24)))
        self.pos_Rs_World = []
        for i0 in range(2):
            self.pos_Rs_World.append(struct.unpack('>3d', buf.read(24)))
        self.pos_Robot_World = []
        for i0 in range(2):
            self.pos_Robot_World.append(struct.unpack('>3d', buf.read(24)))
        self.vRs_Rs = []
        for i0 in range(2):
            self.vRs_Rs.append(struct.unpack('>3d', buf.read(24)))
        self.accelRs_Rs = []
        for i0 in range(2):
            self.accelRs_Rs.append(struct.unpack('>3d', buf.read(24)))
        self.omegaRs_Rs = []
        for i0 in range(2):
            self.omegaRs_Rs.append(struct.unpack('>3d', buf.read(24)))
        self.quat_Rs_to_RsRel = []
        for i0 in range(2):
            self.quat_Rs_to_RsRel.append(struct.unpack('>4d', buf.read(32)))
        self.rpy_Rs_to_RsRel = []
        for i0 in range(2):
            self.rpy_Rs_to_RsRel.append(struct.unpack('>3d', buf.read(24)))
        self.tracker_conf = struct.unpack('>2d', buf.read(16))
        self.rpy_Robot_World = []
        for i0 in range(2):
            self.rpy_Robot_World.append(struct.unpack('>3d', buf.read(24)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if realsense_lcmt in parents: return 0
        tmphash = (0xdb86d09bbd2b0740) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if realsense_lcmt._packed_fingerprint is None:
            realsense_lcmt._packed_fingerprint = struct.pack(">Q", realsense_lcmt._get_hash_recursive([]))
        return realsense_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

