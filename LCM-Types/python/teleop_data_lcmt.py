"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class teleop_data_lcmt(object):
    __slots__ = ["q_base", "q_shoulderx", "q_shouldery", "q_elbow", "q_wristpitch", "q_wristroll", "q_gripper", "qd_base", "qd_shoulderx", "qd_shouldery", "qd_elbow", "qd_wristpitch", "qd_wristroll", "qd_gripper", "flags", "spi_driver_status"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "int32_t", "int32_t"]

    __dimensions__ = [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [4], None]

    def __init__(self):
        self.q_base = [ 0.0 for dim0 in range(1) ]
        self.q_shoulderx = [ 0.0 for dim0 in range(1) ]
        self.q_shouldery = [ 0.0 for dim0 in range(1) ]
        self.q_elbow = [ 0.0 for dim0 in range(1) ]
        self.q_wristpitch = [ 0.0 for dim0 in range(1) ]
        self.q_wristroll = [ 0.0 for dim0 in range(1) ]
        self.q_gripper = [ 0.0 for dim0 in range(1) ]
        self.qd_base = [ 0.0 for dim0 in range(1) ]
        self.qd_shoulderx = [ 0.0 for dim0 in range(1) ]
        self.qd_shouldery = [ 0.0 for dim0 in range(1) ]
        self.qd_elbow = [ 0.0 for dim0 in range(1) ]
        self.qd_wristpitch = [ 0.0 for dim0 in range(1) ]
        self.qd_wristroll = [ 0.0 for dim0 in range(1) ]
        self.qd_gripper = [ 0.0 for dim0 in range(1) ]
        self.flags = [ 0 for dim0 in range(4) ]
        self.spi_driver_status = 0

    def encode(self):
        buf = BytesIO()
        buf.write(teleop_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>1f', *self.q_base[:1]))
        buf.write(struct.pack('>1f', *self.q_shoulderx[:1]))
        buf.write(struct.pack('>1f', *self.q_shouldery[:1]))
        buf.write(struct.pack('>1f', *self.q_elbow[:1]))
        buf.write(struct.pack('>1f', *self.q_wristpitch[:1]))
        buf.write(struct.pack('>1f', *self.q_wristroll[:1]))
        buf.write(struct.pack('>1f', *self.q_gripper[:1]))
        buf.write(struct.pack('>1f', *self.qd_base[:1]))
        buf.write(struct.pack('>1f', *self.qd_shoulderx[:1]))
        buf.write(struct.pack('>1f', *self.qd_shouldery[:1]))
        buf.write(struct.pack('>1f', *self.qd_elbow[:1]))
        buf.write(struct.pack('>1f', *self.qd_wristpitch[:1]))
        buf.write(struct.pack('>1f', *self.qd_wristroll[:1]))
        buf.write(struct.pack('>1f', *self.qd_gripper[:1]))
        buf.write(struct.pack('>4i', *self.flags[:4]))
        buf.write(struct.pack(">i", self.spi_driver_status))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != teleop_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return teleop_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = teleop_data_lcmt()
        self.q_base = struct.unpack('>1f', buf.read(4))
        self.q_shoulderx = struct.unpack('>1f', buf.read(4))
        self.q_shouldery = struct.unpack('>1f', buf.read(4))
        self.q_elbow = struct.unpack('>1f', buf.read(4))
        self.q_wristpitch = struct.unpack('>1f', buf.read(4))
        self.q_wristroll = struct.unpack('>1f', buf.read(4))
        self.q_gripper = struct.unpack('>1f', buf.read(4))
        self.qd_base = struct.unpack('>1f', buf.read(4))
        self.qd_shoulderx = struct.unpack('>1f', buf.read(4))
        self.qd_shouldery = struct.unpack('>1f', buf.read(4))
        self.qd_elbow = struct.unpack('>1f', buf.read(4))
        self.qd_wristpitch = struct.unpack('>1f', buf.read(4))
        self.qd_wristroll = struct.unpack('>1f', buf.read(4))
        self.qd_gripper = struct.unpack('>1f', buf.read(4))
        self.flags = struct.unpack('>4i', buf.read(16))
        self.spi_driver_status = struct.unpack(">i", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if teleop_data_lcmt in parents: return 0
        tmphash = (0xfaabae874779b89c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if teleop_data_lcmt._packed_fingerprint is None:
            teleop_data_lcmt._packed_fingerprint = struct.pack(">Q", teleop_data_lcmt._get_hash_recursive([]))
        return teleop_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

