"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class humanoid_arm_recovery_outputs_lcmt(object):
    __slots__ = ["optim_iter", "opt_solved", "cpu_opt_time_microseconds", "t_sent", "time_start", "p_body", "rpy", "v_body", "omega_body", "c_toe", "c_heel", "f_toe", "f_heel", "r", "rdot", "rddot", "h", "hdot", "vG", "vGdot", "jpos", "jvel", "a_body", "alf_body", "jacc", "fb_dist", "iter_dist", "vLimb", "contact_state"]

    __typenames__ = ["int32_t", "int32_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, [3], [3], [3], [3], [6], [6], [6], [6], [3], [3], [3], [6], [6], [6], [6], [18], [18], [3], [3], [18], [6], None, [12], [6]]

    def __init__(self):
        self.optim_iter = 0
        self.opt_solved = 0
        self.cpu_opt_time_microseconds = 0.0
        self.t_sent = 0.0
        self.time_start = 0.0
        self.p_body = [ 0.0 for dim0 in range(3) ]
        self.rpy = [ 0.0 for dim0 in range(3) ]
        self.v_body = [ 0.0 for dim0 in range(3) ]
        self.omega_body = [ 0.0 for dim0 in range(3) ]
        self.c_toe = [ 0.0 for dim0 in range(6) ]
        self.c_heel = [ 0.0 for dim0 in range(6) ]
        self.f_toe = [ 0.0 for dim0 in range(6) ]
        self.f_heel = [ 0.0 for dim0 in range(6) ]
        self.r = [ 0.0 for dim0 in range(3) ]
        self.rdot = [ 0.0 for dim0 in range(3) ]
        self.rddot = [ 0.0 for dim0 in range(3) ]
        self.h = [ 0.0 for dim0 in range(6) ]
        self.hdot = [ 0.0 for dim0 in range(6) ]
        self.vG = [ 0.0 for dim0 in range(6) ]
        self.vGdot = [ 0.0 for dim0 in range(6) ]
        self.jpos = [ 0.0 for dim0 in range(18) ]
        self.jvel = [ 0.0 for dim0 in range(18) ]
        self.a_body = [ 0.0 for dim0 in range(3) ]
        self.alf_body = [ 0.0 for dim0 in range(3) ]
        self.jacc = [ 0.0 for dim0 in range(18) ]
        self.fb_dist = [ 0.0 for dim0 in range(6) ]
        self.iter_dist = 0.0
        self.vLimb = [ 0.0 for dim0 in range(12) ]
        self.contact_state = [ 0.0 for dim0 in range(6) ]

    def encode(self):
        buf = BytesIO()
        buf.write(humanoid_arm_recovery_outputs_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiddd", self.optim_iter, self.opt_solved, self.cpu_opt_time_microseconds, self.t_sent, self.time_start))
        buf.write(struct.pack('>3d', *self.p_body[:3]))
        buf.write(struct.pack('>3d', *self.rpy[:3]))
        buf.write(struct.pack('>3d', *self.v_body[:3]))
        buf.write(struct.pack('>3d', *self.omega_body[:3]))
        buf.write(struct.pack('>6d', *self.c_toe[:6]))
        buf.write(struct.pack('>6d', *self.c_heel[:6]))
        buf.write(struct.pack('>6d', *self.f_toe[:6]))
        buf.write(struct.pack('>6d', *self.f_heel[:6]))
        buf.write(struct.pack('>3d', *self.r[:3]))
        buf.write(struct.pack('>3d', *self.rdot[:3]))
        buf.write(struct.pack('>3d', *self.rddot[:3]))
        buf.write(struct.pack('>6d', *self.h[:6]))
        buf.write(struct.pack('>6d', *self.hdot[:6]))
        buf.write(struct.pack('>6d', *self.vG[:6]))
        buf.write(struct.pack('>6d', *self.vGdot[:6]))
        buf.write(struct.pack('>18d', *self.jpos[:18]))
        buf.write(struct.pack('>18d', *self.jvel[:18]))
        buf.write(struct.pack('>3d', *self.a_body[:3]))
        buf.write(struct.pack('>3d', *self.alf_body[:3]))
        buf.write(struct.pack('>18d', *self.jacc[:18]))
        buf.write(struct.pack('>6d', *self.fb_dist[:6]))
        buf.write(struct.pack(">d", self.iter_dist))
        buf.write(struct.pack('>12d', *self.vLimb[:12]))
        buf.write(struct.pack('>6d', *self.contact_state[:6]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != humanoid_arm_recovery_outputs_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return humanoid_arm_recovery_outputs_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = humanoid_arm_recovery_outputs_lcmt()
        self.optim_iter, self.opt_solved, self.cpu_opt_time_microseconds, self.t_sent, self.time_start = struct.unpack(">iiddd", buf.read(32))
        self.p_body = struct.unpack('>3d', buf.read(24))
        self.rpy = struct.unpack('>3d', buf.read(24))
        self.v_body = struct.unpack('>3d', buf.read(24))
        self.omega_body = struct.unpack('>3d', buf.read(24))
        self.c_toe = struct.unpack('>6d', buf.read(48))
        self.c_heel = struct.unpack('>6d', buf.read(48))
        self.f_toe = struct.unpack('>6d', buf.read(48))
        self.f_heel = struct.unpack('>6d', buf.read(48))
        self.r = struct.unpack('>3d', buf.read(24))
        self.rdot = struct.unpack('>3d', buf.read(24))
        self.rddot = struct.unpack('>3d', buf.read(24))
        self.h = struct.unpack('>6d', buf.read(48))
        self.hdot = struct.unpack('>6d', buf.read(48))
        self.vG = struct.unpack('>6d', buf.read(48))
        self.vGdot = struct.unpack('>6d', buf.read(48))
        self.jpos = struct.unpack('>18d', buf.read(144))
        self.jvel = struct.unpack('>18d', buf.read(144))
        self.a_body = struct.unpack('>3d', buf.read(24))
        self.alf_body = struct.unpack('>3d', buf.read(24))
        self.jacc = struct.unpack('>18d', buf.read(144))
        self.fb_dist = struct.unpack('>6d', buf.read(48))
        self.iter_dist = struct.unpack(">d", buf.read(8))[0]
        self.vLimb = struct.unpack('>12d', buf.read(96))
        self.contact_state = struct.unpack('>6d', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if humanoid_arm_recovery_outputs_lcmt in parents: return 0
        tmphash = (0xbb37a25edeaa3345) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if humanoid_arm_recovery_outputs_lcmt._packed_fingerprint is None:
            humanoid_arm_recovery_outputs_lcmt._packed_fingerprint = struct.pack(">Q", humanoid_arm_recovery_outputs_lcmt._get_hash_recursive([]))
        return humanoid_arm_recovery_outputs_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

