"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class convex_DCMPC_lcmt(object):
    __slots__ = ["X_guess", "Xref", "Uref", "cs", "dt", "r", "psi", "q_min", "q_max", "qd_min", "qd_max", "q_init", "qd_init", "mu", "fmax", "mass", "Ib", "Ib_inv", "g", "Q", "R", "X", "U"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[252], [132], [120], [40], [10], [12], None, [6], [6], [6], [6], [6], [6], None, None, None, [3], [3], None, [12], [12], [132], [120]]

    def __init__(self):
        self.X_guess = [ 0.0 for dim0 in range(252) ]
        self.Xref = [ 0.0 for dim0 in range(132) ]
        self.Uref = [ 0.0 for dim0 in range(120) ]
        self.cs = [ 0.0 for dim0 in range(40) ]
        self.dt = [ 0.0 for dim0 in range(10) ]
        self.r = [ 0.0 for dim0 in range(12) ]
        self.psi = 0.0
        self.q_min = [ 0.0 for dim0 in range(6) ]
        self.q_max = [ 0.0 for dim0 in range(6) ]
        self.qd_min = [ 0.0 for dim0 in range(6) ]
        self.qd_max = [ 0.0 for dim0 in range(6) ]
        self.q_init = [ 0.0 for dim0 in range(6) ]
        self.qd_init = [ 0.0 for dim0 in range(6) ]
        self.mu = 0.0
        self.fmax = 0.0
        self.mass = 0.0
        self.Ib = [ 0.0 for dim0 in range(3) ]
        self.Ib_inv = [ 0.0 for dim0 in range(3) ]
        self.g = 0.0
        self.Q = [ 0.0 for dim0 in range(12) ]
        self.R = [ 0.0 for dim0 in range(12) ]
        self.X = [ 0.0 for dim0 in range(132) ]
        self.U = [ 0.0 for dim0 in range(120) ]

    def encode(self):
        buf = BytesIO()
        buf.write(convex_DCMPC_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>252f', *self.X_guess[:252]))
        buf.write(struct.pack('>132f', *self.Xref[:132]))
        buf.write(struct.pack('>120f', *self.Uref[:120]))
        buf.write(struct.pack('>40f', *self.cs[:40]))
        buf.write(struct.pack('>10f', *self.dt[:10]))
        buf.write(struct.pack('>12f', *self.r[:12]))
        buf.write(struct.pack(">f", self.psi))
        buf.write(struct.pack('>6f', *self.q_min[:6]))
        buf.write(struct.pack('>6f', *self.q_max[:6]))
        buf.write(struct.pack('>6f', *self.qd_min[:6]))
        buf.write(struct.pack('>6f', *self.qd_max[:6]))
        buf.write(struct.pack('>6f', *self.q_init[:6]))
        buf.write(struct.pack('>6f', *self.qd_init[:6]))
        buf.write(struct.pack(">fff", self.mu, self.fmax, self.mass))
        buf.write(struct.pack('>3f', *self.Ib[:3]))
        buf.write(struct.pack('>3f', *self.Ib_inv[:3]))
        buf.write(struct.pack(">f", self.g))
        buf.write(struct.pack('>12f', *self.Q[:12]))
        buf.write(struct.pack('>12f', *self.R[:12]))
        buf.write(struct.pack('>132f', *self.X[:132]))
        buf.write(struct.pack('>120f', *self.U[:120]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != convex_DCMPC_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return convex_DCMPC_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = convex_DCMPC_lcmt()
        self.X_guess = struct.unpack('>252f', buf.read(1008))
        self.Xref = struct.unpack('>132f', buf.read(528))
        self.Uref = struct.unpack('>120f', buf.read(480))
        self.cs = struct.unpack('>40f', buf.read(160))
        self.dt = struct.unpack('>10f', buf.read(40))
        self.r = struct.unpack('>12f', buf.read(48))
        self.psi = struct.unpack(">f", buf.read(4))[0]
        self.q_min = struct.unpack('>6f', buf.read(24))
        self.q_max = struct.unpack('>6f', buf.read(24))
        self.qd_min = struct.unpack('>6f', buf.read(24))
        self.qd_max = struct.unpack('>6f', buf.read(24))
        self.q_init = struct.unpack('>6f', buf.read(24))
        self.qd_init = struct.unpack('>6f', buf.read(24))
        self.mu, self.fmax, self.mass = struct.unpack(">fff", buf.read(12))
        self.Ib = struct.unpack('>3f', buf.read(12))
        self.Ib_inv = struct.unpack('>3f', buf.read(12))
        self.g = struct.unpack(">f", buf.read(4))[0]
        self.Q = struct.unpack('>12f', buf.read(48))
        self.R = struct.unpack('>12f', buf.read(48))
        self.X = struct.unpack('>132f', buf.read(528))
        self.U = struct.unpack('>120f', buf.read(480))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if convex_DCMPC_lcmt in parents: return 0
        tmphash = (0x2729437cbf038bf) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if convex_DCMPC_lcmt._packed_fingerprint is None:
            convex_DCMPC_lcmt._packed_fingerprint = struct.pack(">Q", convex_DCMPC_lcmt._get_hash_recursive([]))
        return convex_DCMPC_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

