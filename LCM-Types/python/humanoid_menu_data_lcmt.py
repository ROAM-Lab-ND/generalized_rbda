"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class humanoid_menu_data_lcmt(object):
    __slots__ = ["cheater_mode", "control_mode", "use_wbc", "use_rc", "display_heightmap", "display_path_planning", "display_potential_field", "display_traverability", "Kd_body", "Kd_cam", "Kd_clm", "Kd_foot", "Kd_joint", "Kd_ori", "Kp_body", "Kp_cam", "Kp_clm", "Kp_foot", "Kp_joint", "Kp_ori"]

    __typenames__ = ["boolean", "int64_t", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None, [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3]]

    def __init__(self):
        self.cheater_mode = False
        self.control_mode = 0
        self.use_wbc = False
        self.use_rc = False
        self.display_heightmap = False
        self.display_path_planning = False
        self.display_potential_field = False
        self.display_traverability = False
        self.Kd_body = [ 0.0 for dim0 in range(3) ]
        self.Kd_cam = [ 0.0 for dim0 in range(3) ]
        self.Kd_clm = [ 0.0 for dim0 in range(3) ]
        self.Kd_foot = [ 0.0 for dim0 in range(3) ]
        self.Kd_joint = [ 0.0 for dim0 in range(3) ]
        self.Kd_ori = [ 0.0 for dim0 in range(3) ]
        self.Kp_body = [ 0.0 for dim0 in range(3) ]
        self.Kp_cam = [ 0.0 for dim0 in range(3) ]
        self.Kp_clm = [ 0.0 for dim0 in range(3) ]
        self.Kp_foot = [ 0.0 for dim0 in range(3) ]
        self.Kp_joint = [ 0.0 for dim0 in range(3) ]
        self.Kp_ori = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(humanoid_menu_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bqbbbbbb", self.cheater_mode, self.control_mode, self.use_wbc, self.use_rc, self.display_heightmap, self.display_path_planning, self.display_potential_field, self.display_traverability))
        buf.write(struct.pack('>3d', *self.Kd_body[:3]))
        buf.write(struct.pack('>3d', *self.Kd_cam[:3]))
        buf.write(struct.pack('>3d', *self.Kd_clm[:3]))
        buf.write(struct.pack('>3d', *self.Kd_foot[:3]))
        buf.write(struct.pack('>3d', *self.Kd_joint[:3]))
        buf.write(struct.pack('>3d', *self.Kd_ori[:3]))
        buf.write(struct.pack('>3d', *self.Kp_body[:3]))
        buf.write(struct.pack('>3d', *self.Kp_cam[:3]))
        buf.write(struct.pack('>3d', *self.Kp_clm[:3]))
        buf.write(struct.pack('>3d', *self.Kp_foot[:3]))
        buf.write(struct.pack('>3d', *self.Kp_joint[:3]))
        buf.write(struct.pack('>3d', *self.Kp_ori[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != humanoid_menu_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return humanoid_menu_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = humanoid_menu_data_lcmt()
        self.cheater_mode = bool(struct.unpack('b', buf.read(1))[0])
        self.control_mode = struct.unpack(">q", buf.read(8))[0]
        self.use_wbc = bool(struct.unpack('b', buf.read(1))[0])
        self.use_rc = bool(struct.unpack('b', buf.read(1))[0])
        self.display_heightmap = bool(struct.unpack('b', buf.read(1))[0])
        self.display_path_planning = bool(struct.unpack('b', buf.read(1))[0])
        self.display_potential_field = bool(struct.unpack('b', buf.read(1))[0])
        self.display_traverability = bool(struct.unpack('b', buf.read(1))[0])
        self.Kd_body = struct.unpack('>3d', buf.read(24))
        self.Kd_cam = struct.unpack('>3d', buf.read(24))
        self.Kd_clm = struct.unpack('>3d', buf.read(24))
        self.Kd_foot = struct.unpack('>3d', buf.read(24))
        self.Kd_joint = struct.unpack('>3d', buf.read(24))
        self.Kd_ori = struct.unpack('>3d', buf.read(24))
        self.Kp_body = struct.unpack('>3d', buf.read(24))
        self.Kp_cam = struct.unpack('>3d', buf.read(24))
        self.Kp_clm = struct.unpack('>3d', buf.read(24))
        self.Kp_foot = struct.unpack('>3d', buf.read(24))
        self.Kp_joint = struct.unpack('>3d', buf.read(24))
        self.Kp_ori = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if humanoid_menu_data_lcmt in parents: return 0
        tmphash = (0x7945c66fec25576a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if humanoid_menu_data_lcmt._packed_fingerprint is None:
            humanoid_menu_data_lcmt._packed_fingerprint = struct.pack(">Q", humanoid_menu_data_lcmt._get_hash_recursive([]))
        return humanoid_menu_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

