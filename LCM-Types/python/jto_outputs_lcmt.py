"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class jto_outputs_lcmt(object):
    __slots__ = ["x_opt", "u_opt", "b_solved"]

    __typenames__ = ["double", "double", "double"]

    __dimensions__ = [[360], [720], None]

    def __init__(self):
        self.x_opt = [ 0.0 for dim0 in range(360) ]
        self.u_opt = [ 0.0 for dim0 in range(720) ]
        self.b_solved = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(jto_outputs_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>360d', *self.x_opt[:360]))
        buf.write(struct.pack('>720d', *self.u_opt[:720]))
        buf.write(struct.pack(">d", self.b_solved))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != jto_outputs_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return jto_outputs_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = jto_outputs_lcmt()
        self.x_opt = struct.unpack('>360d', buf.read(2880))
        self.u_opt = struct.unpack('>720d', buf.read(5760))
        self.b_solved = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if jto_outputs_lcmt in parents: return 0
        tmphash = (0xd7cc1f0397b84077) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if jto_outputs_lcmt._packed_fingerprint is None:
            jto_outputs_lcmt._packed_fingerprint = struct.pack(">Q", jto_outputs_lcmt._get_hash_recursive([]))
        return jto_outputs_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

