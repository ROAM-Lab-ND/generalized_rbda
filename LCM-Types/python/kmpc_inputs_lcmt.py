"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class kmpc_inputs_lcmt(object):
    __slots__ = ["current_state", "gait_schedule", "desired_state", "initial_guess"]

    __typenames__ = ["double", "double", "double", "double"]

    __dimensions__ = [[22], [44], [4], [506]]

    def __init__(self):
        self.current_state = [ 0.0 for dim0 in range(22) ]
        self.gait_schedule = [ 0.0 for dim0 in range(44) ]
        self.desired_state = [ 0.0 for dim0 in range(4) ]
        self.initial_guess = [ 0.0 for dim0 in range(506) ]

    def encode(self):
        buf = BytesIO()
        buf.write(kmpc_inputs_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>22d', *self.current_state[:22]))
        buf.write(struct.pack('>44d', *self.gait_schedule[:44]))
        buf.write(struct.pack('>4d', *self.desired_state[:4]))
        buf.write(struct.pack('>506d', *self.initial_guess[:506]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != kmpc_inputs_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return kmpc_inputs_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = kmpc_inputs_lcmt()
        self.current_state = struct.unpack('>22d', buf.read(176))
        self.gait_schedule = struct.unpack('>44d', buf.read(352))
        self.desired_state = struct.unpack('>4d', buf.read(32))
        self.initial_guess = struct.unpack('>506d', buf.read(4048))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if kmpc_inputs_lcmt in parents: return 0
        tmphash = (0xc00577ea9b5aff3a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if kmpc_inputs_lcmt._packed_fingerprint is None:
            kmpc_inputs_lcmt._packed_fingerprint = struct.pack(">Q", kmpc_inputs_lcmt._get_hash_recursive([]))
        return kmpc_inputs_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

