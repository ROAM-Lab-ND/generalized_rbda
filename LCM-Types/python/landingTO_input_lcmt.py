"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class landingTO_input_lcmt(object):
    __slots__ = ["falling_conditions", "Xref", "Uref", "dt_opt", "q_min", "q_max", "qd_min", "qd_max", "q_init", "qd_init", "c_init", "q_term_min", "q_term_max", "qd_term_min", "qd_term_max", "QN", "jpos_min", "jpos_max", "kin_box", "mu", "l_leg_max", "mass", "Ib", "Ib_inv"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [[9], [252], [480], [20], [6], [6], [6], [6], [6], [6], [12], [6], [6], [6], [6], [12], [12], [12], [2], None, None, None, [3], [3]]

    def __init__(self):
        self.falling_conditions = [ 0.0 for dim0 in range(9) ]
        self.Xref = [ 0.0 for dim0 in range(252) ]
        self.Uref = [ 0.0 for dim0 in range(480) ]
        self.dt_opt = [ 0.0 for dim0 in range(20) ]
        self.q_min = [ 0.0 for dim0 in range(6) ]
        self.q_max = [ 0.0 for dim0 in range(6) ]
        self.qd_min = [ 0.0 for dim0 in range(6) ]
        self.qd_max = [ 0.0 for dim0 in range(6) ]
        self.q_init = [ 0.0 for dim0 in range(6) ]
        self.qd_init = [ 0.0 for dim0 in range(6) ]
        self.c_init = [ 0.0 for dim0 in range(12) ]
        self.q_term_min = [ 0.0 for dim0 in range(6) ]
        self.q_term_max = [ 0.0 for dim0 in range(6) ]
        self.qd_term_min = [ 0.0 for dim0 in range(6) ]
        self.qd_term_max = [ 0.0 for dim0 in range(6) ]
        self.QN = [ 0.0 for dim0 in range(12) ]
        self.jpos_min = [ 0.0 for dim0 in range(12) ]
        self.jpos_max = [ 0.0 for dim0 in range(12) ]
        self.kin_box = [ 0.0 for dim0 in range(2) ]
        self.mu = 0.0
        self.l_leg_max = 0.0
        self.mass = 0.0
        self.Ib = [ 0.0 for dim0 in range(3) ]
        self.Ib_inv = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(landingTO_input_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>9d', *self.falling_conditions[:9]))
        buf.write(struct.pack('>252d', *self.Xref[:252]))
        buf.write(struct.pack('>480d', *self.Uref[:480]))
        buf.write(struct.pack('>20d', *self.dt_opt[:20]))
        buf.write(struct.pack('>6d', *self.q_min[:6]))
        buf.write(struct.pack('>6d', *self.q_max[:6]))
        buf.write(struct.pack('>6d', *self.qd_min[:6]))
        buf.write(struct.pack('>6d', *self.qd_max[:6]))
        buf.write(struct.pack('>6d', *self.q_init[:6]))
        buf.write(struct.pack('>6d', *self.qd_init[:6]))
        buf.write(struct.pack('>12d', *self.c_init[:12]))
        buf.write(struct.pack('>6d', *self.q_term_min[:6]))
        buf.write(struct.pack('>6d', *self.q_term_max[:6]))
        buf.write(struct.pack('>6d', *self.qd_term_min[:6]))
        buf.write(struct.pack('>6d', *self.qd_term_max[:6]))
        buf.write(struct.pack('>12d', *self.QN[:12]))
        buf.write(struct.pack('>12d', *self.jpos_min[:12]))
        buf.write(struct.pack('>12d', *self.jpos_max[:12]))
        buf.write(struct.pack('>2d', *self.kin_box[:2]))
        buf.write(struct.pack(">ddd", self.mu, self.l_leg_max, self.mass))
        buf.write(struct.pack('>3d', *self.Ib[:3]))
        buf.write(struct.pack('>3d', *self.Ib_inv[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != landingTO_input_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return landingTO_input_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = landingTO_input_lcmt()
        self.falling_conditions = struct.unpack('>9d', buf.read(72))
        self.Xref = struct.unpack('>252d', buf.read(2016))
        self.Uref = struct.unpack('>480d', buf.read(3840))
        self.dt_opt = struct.unpack('>20d', buf.read(160))
        self.q_min = struct.unpack('>6d', buf.read(48))
        self.q_max = struct.unpack('>6d', buf.read(48))
        self.qd_min = struct.unpack('>6d', buf.read(48))
        self.qd_max = struct.unpack('>6d', buf.read(48))
        self.q_init = struct.unpack('>6d', buf.read(48))
        self.qd_init = struct.unpack('>6d', buf.read(48))
        self.c_init = struct.unpack('>12d', buf.read(96))
        self.q_term_min = struct.unpack('>6d', buf.read(48))
        self.q_term_max = struct.unpack('>6d', buf.read(48))
        self.qd_term_min = struct.unpack('>6d', buf.read(48))
        self.qd_term_max = struct.unpack('>6d', buf.read(48))
        self.QN = struct.unpack('>12d', buf.read(96))
        self.jpos_min = struct.unpack('>12d', buf.read(96))
        self.jpos_max = struct.unpack('>12d', buf.read(96))
        self.kin_box = struct.unpack('>2d', buf.read(16))
        self.mu, self.l_leg_max, self.mass = struct.unpack(">ddd", buf.read(24))
        self.Ib = struct.unpack('>3d', buf.read(24))
        self.Ib_inv = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if landingTO_input_lcmt in parents: return 0
        tmphash = (0x67286e14bdaa9318) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if landingTO_input_lcmt._packed_fingerprint is None:
            landingTO_input_lcmt._packed_fingerprint = struct.pack(">Q", landingTO_input_lcmt._get_hash_recursive([]))
        return landingTO_input_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

