"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class jump3D_hyperParamTrain_lcmt(object):
    __slots__ = ["obs_height", "dist_to_obs", "dist_past_obs_lb", "dist_past_obs_ub", "dist_past_obs_glub", "yaw_init", "yaw_term", "f_max", "dist_to_obs_sf", "obs_height_sf", "land_height_offset", "yaw_takeoff", "px_flight", "yaw_flight", "vert_vel_sf", "robot_mass_sf", "wbc_fb_weight", "b_use_wbc_takeoff", "pz_takeoff", "roll_takeoff", "pitch_takeoff", "pz_flight", "roll_flight", "pitch_flight", "max_train_iter"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "int32_t", "double", "double", "double", "double", "double", "double", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, [3], [3], [3], [3], [3], [3], None]

    def __init__(self):
        self.obs_height = 0.0
        self.dist_to_obs = 0.0
        self.dist_past_obs_lb = 0.0
        self.dist_past_obs_ub = 0.0
        self.dist_past_obs_glub = 0.0
        self.yaw_init = 0.0
        self.yaw_term = 0.0
        self.f_max = 0.0
        self.dist_to_obs_sf = 0.0
        self.obs_height_sf = 0.0
        self.land_height_offset = 0.0
        self.yaw_takeoff = 0.0
        self.px_flight = 0.0
        self.yaw_flight = 0.0
        self.vert_vel_sf = 0.0
        self.robot_mass_sf = 0.0
        self.wbc_fb_weight = 0.0
        self.b_use_wbc_takeoff = 0
        self.pz_takeoff = [ 0.0 for dim0 in range(3) ]
        self.roll_takeoff = [ 0.0 for dim0 in range(3) ]
        self.pitch_takeoff = [ 0.0 for dim0 in range(3) ]
        self.pz_flight = [ 0.0 for dim0 in range(3) ]
        self.roll_flight = [ 0.0 for dim0 in range(3) ]
        self.pitch_flight = [ 0.0 for dim0 in range(3) ]
        self.max_train_iter = 0

    def encode(self):
        buf = BytesIO()
        buf.write(jump3D_hyperParamTrain_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddddddddddddddddi", self.obs_height, self.dist_to_obs, self.dist_past_obs_lb, self.dist_past_obs_ub, self.dist_past_obs_glub, self.yaw_init, self.yaw_term, self.f_max, self.dist_to_obs_sf, self.obs_height_sf, self.land_height_offset, self.yaw_takeoff, self.px_flight, self.yaw_flight, self.vert_vel_sf, self.robot_mass_sf, self.wbc_fb_weight, self.b_use_wbc_takeoff))
        buf.write(struct.pack('>3d', *self.pz_takeoff[:3]))
        buf.write(struct.pack('>3d', *self.roll_takeoff[:3]))
        buf.write(struct.pack('>3d', *self.pitch_takeoff[:3]))
        buf.write(struct.pack('>3d', *self.pz_flight[:3]))
        buf.write(struct.pack('>3d', *self.roll_flight[:3]))
        buf.write(struct.pack('>3d', *self.pitch_flight[:3]))
        buf.write(struct.pack(">i", self.max_train_iter))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != jump3D_hyperParamTrain_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return jump3D_hyperParamTrain_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = jump3D_hyperParamTrain_lcmt()
        self.obs_height, self.dist_to_obs, self.dist_past_obs_lb, self.dist_past_obs_ub, self.dist_past_obs_glub, self.yaw_init, self.yaw_term, self.f_max, self.dist_to_obs_sf, self.obs_height_sf, self.land_height_offset, self.yaw_takeoff, self.px_flight, self.yaw_flight, self.vert_vel_sf, self.robot_mass_sf, self.wbc_fb_weight, self.b_use_wbc_takeoff = struct.unpack(">dddddddddddddddddi", buf.read(140))
        self.pz_takeoff = struct.unpack('>3d', buf.read(24))
        self.roll_takeoff = struct.unpack('>3d', buf.read(24))
        self.pitch_takeoff = struct.unpack('>3d', buf.read(24))
        self.pz_flight = struct.unpack('>3d', buf.read(24))
        self.roll_flight = struct.unpack('>3d', buf.read(24))
        self.pitch_flight = struct.unpack('>3d', buf.read(24))
        self.max_train_iter = struct.unpack(">i", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if jump3D_hyperParamTrain_lcmt in parents: return 0
        tmphash = (0x632d8dd376b71320) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if jump3D_hyperParamTrain_lcmt._packed_fingerprint is None:
            jump3D_hyperParamTrain_lcmt._packed_fingerprint = struct.pack(">Q", jump3D_hyperParamTrain_lcmt._get_hash_recursive([]))
        return jump3D_hyperParamTrain_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

