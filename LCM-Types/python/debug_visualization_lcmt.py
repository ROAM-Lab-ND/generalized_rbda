"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class debug_visualization_lcmt(object):
    __slots__ = ["sphere_count", "sphere_elements", "sphere_position_elements", "sphere_color_elements", "sphere_positions", "sphere_radii", "sphere_colors", "obst_count", "obst_elements", "obst_position_elements", "obst_dim_elements", "obst_rpy_elements", "obst_color_elements", "obst_positions", "obst_oris", "obst_dims", "obst_colors", "path_count", "path_elements", "path_position_elements", "path_color_elements", "path_lengths", "path_start_idxs", "path_widths", "path_positions", "path_colors", "arrow_count", "arrow_elements", "arrow_position_elements", "arrow_color_elements", "arrow_ids", "arrow_nom", "arrow_base_positions", "arrow_directions", "arrow_colors"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t", "float", "float", "float", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "float", "float", "float", "float", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "float", "float", "float", "int32_t", "int32_t", "int32_t", "int32_t", "string", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, ["sphere_position_elements"], ["sphere_elements"], ["sphere_color_elements"], None, None, None, None, None, None, ["obst_position_elements"], ["obst_rpy_elements"], ["obst_position_elements"], ["obst_color_elements"], None, None, None, None, ["path_elements"], ["path_elements"], ["path_elements"], ["path_position_elements"], ["path_color_elements"], None, None, None, None, ["arrow_elements"], ["arrow_elements"], ["arrow_position_elements"], ["arrow_position_elements"], ["arrow_color_elements"]]

    def __init__(self):
        self.sphere_count = 0
        self.sphere_elements = 0
        self.sphere_position_elements = 0
        self.sphere_color_elements = 0
        self.sphere_positions = []
        self.sphere_radii = []
        self.sphere_colors = []
        self.obst_count = 0
        self.obst_elements = 0
        self.obst_position_elements = 0
        self.obst_dim_elements = 0
        self.obst_rpy_elements = 0
        self.obst_color_elements = 0
        self.obst_positions = []
        self.obst_oris = []
        self.obst_dims = []
        self.obst_colors = []
        self.path_count = 0
        self.path_elements = 0
        self.path_position_elements = 0
        self.path_color_elements = 0
        self.path_lengths = []
        self.path_start_idxs = []
        self.path_widths = []
        self.path_positions = []
        self.path_colors = []
        self.arrow_count = 0
        self.arrow_elements = 0
        self.arrow_position_elements = 0
        self.arrow_color_elements = 0
        self.arrow_ids = []
        self.arrow_nom = []
        self.arrow_base_positions = []
        self.arrow_directions = []
        self.arrow_colors = []

    def encode(self):
        buf = BytesIO()
        buf.write(debug_visualization_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiii", self.sphere_count, self.sphere_elements, self.sphere_position_elements, self.sphere_color_elements))
        buf.write(struct.pack('>%df' % self.sphere_position_elements, *self.sphere_positions[:self.sphere_position_elements]))
        buf.write(struct.pack('>%df' % self.sphere_elements, *self.sphere_radii[:self.sphere_elements]))
        buf.write(struct.pack('>%df' % self.sphere_color_elements, *self.sphere_colors[:self.sphere_color_elements]))
        buf.write(struct.pack(">iiiiii", self.obst_count, self.obst_elements, self.obst_position_elements, self.obst_dim_elements, self.obst_rpy_elements, self.obst_color_elements))
        buf.write(struct.pack('>%df' % self.obst_position_elements, *self.obst_positions[:self.obst_position_elements]))
        buf.write(struct.pack('>%df' % self.obst_rpy_elements, *self.obst_oris[:self.obst_rpy_elements]))
        buf.write(struct.pack('>%df' % self.obst_position_elements, *self.obst_dims[:self.obst_position_elements]))
        buf.write(struct.pack('>%df' % self.obst_color_elements, *self.obst_colors[:self.obst_color_elements]))
        buf.write(struct.pack(">iiii", self.path_count, self.path_elements, self.path_position_elements, self.path_color_elements))
        buf.write(struct.pack('>%di' % self.path_elements, *self.path_lengths[:self.path_elements]))
        buf.write(struct.pack('>%di' % self.path_elements, *self.path_start_idxs[:self.path_elements]))
        buf.write(struct.pack('>%df' % self.path_elements, *self.path_widths[:self.path_elements]))
        buf.write(struct.pack('>%df' % self.path_position_elements, *self.path_positions[:self.path_position_elements]))
        buf.write(struct.pack('>%df' % self.path_color_elements, *self.path_colors[:self.path_color_elements]))
        buf.write(struct.pack(">iiii", self.arrow_count, self.arrow_elements, self.arrow_position_elements, self.arrow_color_elements))
        for i0 in range(self.arrow_elements):
            __arrow_ids_encoded = self.arrow_ids[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__arrow_ids_encoded)+1))
            buf.write(__arrow_ids_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%df' % self.arrow_elements, *self.arrow_nom[:self.arrow_elements]))
        buf.write(struct.pack('>%df' % self.arrow_position_elements, *self.arrow_base_positions[:self.arrow_position_elements]))
        buf.write(struct.pack('>%df' % self.arrow_position_elements, *self.arrow_directions[:self.arrow_position_elements]))
        buf.write(struct.pack('>%df' % self.arrow_color_elements, *self.arrow_colors[:self.arrow_color_elements]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != debug_visualization_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return debug_visualization_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = debug_visualization_lcmt()
        self.sphere_count, self.sphere_elements, self.sphere_position_elements, self.sphere_color_elements = struct.unpack(">iiii", buf.read(16))
        self.sphere_positions = struct.unpack('>%df' % self.sphere_position_elements, buf.read(self.sphere_position_elements * 4))
        self.sphere_radii = struct.unpack('>%df' % self.sphere_elements, buf.read(self.sphere_elements * 4))
        self.sphere_colors = struct.unpack('>%df' % self.sphere_color_elements, buf.read(self.sphere_color_elements * 4))
        self.obst_count, self.obst_elements, self.obst_position_elements, self.obst_dim_elements, self.obst_rpy_elements, self.obst_color_elements = struct.unpack(">iiiiii", buf.read(24))
        self.obst_positions = struct.unpack('>%df' % self.obst_position_elements, buf.read(self.obst_position_elements * 4))
        self.obst_oris = struct.unpack('>%df' % self.obst_rpy_elements, buf.read(self.obst_rpy_elements * 4))
        self.obst_dims = struct.unpack('>%df' % self.obst_position_elements, buf.read(self.obst_position_elements * 4))
        self.obst_colors = struct.unpack('>%df' % self.obst_color_elements, buf.read(self.obst_color_elements * 4))
        self.path_count, self.path_elements, self.path_position_elements, self.path_color_elements = struct.unpack(">iiii", buf.read(16))
        self.path_lengths = struct.unpack('>%di' % self.path_elements, buf.read(self.path_elements * 4))
        self.path_start_idxs = struct.unpack('>%di' % self.path_elements, buf.read(self.path_elements * 4))
        self.path_widths = struct.unpack('>%df' % self.path_elements, buf.read(self.path_elements * 4))
        self.path_positions = struct.unpack('>%df' % self.path_position_elements, buf.read(self.path_position_elements * 4))
        self.path_colors = struct.unpack('>%df' % self.path_color_elements, buf.read(self.path_color_elements * 4))
        self.arrow_count, self.arrow_elements, self.arrow_position_elements, self.arrow_color_elements = struct.unpack(">iiii", buf.read(16))
        self.arrow_ids = []
        for i0 in range(self.arrow_elements):
            __arrow_ids_len = struct.unpack('>I', buf.read(4))[0]
            self.arrow_ids.append(buf.read(__arrow_ids_len)[:-1].decode('utf-8', 'replace'))
        self.arrow_nom = struct.unpack('>%df' % self.arrow_elements, buf.read(self.arrow_elements * 4))
        self.arrow_base_positions = struct.unpack('>%df' % self.arrow_position_elements, buf.read(self.arrow_position_elements * 4))
        self.arrow_directions = struct.unpack('>%df' % self.arrow_position_elements, buf.read(self.arrow_position_elements * 4))
        self.arrow_colors = struct.unpack('>%df' % self.arrow_color_elements, buf.read(self.arrow_color_elements * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if debug_visualization_lcmt in parents: return 0
        tmphash = (0xb9dfd6fd3533d6f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if debug_visualization_lcmt._packed_fingerprint is None:
            debug_visualization_lcmt._packed_fingerprint = struct.pack(">Q", debug_visualization_lcmt._get_hash_recursive([]))
        return debug_visualization_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

