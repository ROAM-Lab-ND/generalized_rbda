"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class jto_inputs_casadi_lcmt(object):
    __slots__ = ["NUM_X_VAR", "NUM_U_VAR", "NUM_TIMESTEPS", "NUM_U_TIMESTEPS", "NUM_X_VAR_TRAJ", "NUM_U_VAR_TRAJ", "NUM_OPT_VAR_TRAJ", "NUM_LEGS", "NUM_LEGS_x3", "NUM_GAIT_TABLE", "Xref", "Uref", "x0", "gait_schedule", "gait_schedule_TD", "dt_opt", "q_min", "q_max", "qd_min", "qd_max", "q_init", "qd_init", "c_init", "q_term_min", "q_term_max", "qd_term_min", "qd_term_max", "QX", "QN", "Qc", "Qf", "mu_ground", "l_leg_max", "f_max", "mass", "Ib", "Ib_inv", "flight_duration"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, ["NUM_X_VAR_TRAJ"], ["NUM_U_VAR_TRAJ"], ["NUM_OPT_VAR_TRAJ"], ["NUM_GAIT_TABLE"], ["NUM_GAIT_TABLE"], ["NUM_U_TIMESTEPS"], [6], [6], [6], [6], [6], [6], ["NUM_LEGS_x3"], [6], [6], [6], [6], [12], [12], [3], [3], None, None, None, None, [3], [3], None]

    def __init__(self):
        self.NUM_X_VAR = 0
        self.NUM_U_VAR = 0
        self.NUM_TIMESTEPS = 0
        self.NUM_U_TIMESTEPS = 0
        self.NUM_X_VAR_TRAJ = 0
        self.NUM_U_VAR_TRAJ = 0
        self.NUM_OPT_VAR_TRAJ = 0
        self.NUM_LEGS = 0
        self.NUM_LEGS_x3 = 0
        self.NUM_GAIT_TABLE = 0
        self.Xref = []
        self.Uref = []
        self.x0 = []
        self.gait_schedule = []
        self.gait_schedule_TD = []
        self.dt_opt = []
        self.q_min = [ 0.0 for dim0 in range(6) ]
        self.q_max = [ 0.0 for dim0 in range(6) ]
        self.qd_min = [ 0.0 for dim0 in range(6) ]
        self.qd_max = [ 0.0 for dim0 in range(6) ]
        self.q_init = [ 0.0 for dim0 in range(6) ]
        self.qd_init = [ 0.0 for dim0 in range(6) ]
        self.c_init = []
        self.q_term_min = [ 0.0 for dim0 in range(6) ]
        self.q_term_max = [ 0.0 for dim0 in range(6) ]
        self.qd_term_min = [ 0.0 for dim0 in range(6) ]
        self.qd_term_max = [ 0.0 for dim0 in range(6) ]
        self.QX = [ 0.0 for dim0 in range(12) ]
        self.QN = [ 0.0 for dim0 in range(12) ]
        self.Qc = [ 0.0 for dim0 in range(3) ]
        self.Qf = [ 0.0 for dim0 in range(3) ]
        self.mu_ground = 0.0
        self.l_leg_max = 0.0
        self.f_max = 0.0
        self.mass = 0.0
        self.Ib = [ 0.0 for dim0 in range(3) ]
        self.Ib_inv = [ 0.0 for dim0 in range(3) ]
        self.flight_duration = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(jto_inputs_casadi_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiiiiiiiii", self.NUM_X_VAR, self.NUM_U_VAR, self.NUM_TIMESTEPS, self.NUM_U_TIMESTEPS, self.NUM_X_VAR_TRAJ, self.NUM_U_VAR_TRAJ, self.NUM_OPT_VAR_TRAJ, self.NUM_LEGS, self.NUM_LEGS_x3, self.NUM_GAIT_TABLE))
        buf.write(struct.pack('>%dd' % self.NUM_X_VAR_TRAJ, *self.Xref[:self.NUM_X_VAR_TRAJ]))
        buf.write(struct.pack('>%dd' % self.NUM_U_VAR_TRAJ, *self.Uref[:self.NUM_U_VAR_TRAJ]))
        buf.write(struct.pack('>%dd' % self.NUM_OPT_VAR_TRAJ, *self.x0[:self.NUM_OPT_VAR_TRAJ]))
        buf.write(struct.pack('>%dd' % self.NUM_GAIT_TABLE, *self.gait_schedule[:self.NUM_GAIT_TABLE]))
        buf.write(struct.pack('>%dd' % self.NUM_GAIT_TABLE, *self.gait_schedule_TD[:self.NUM_GAIT_TABLE]))
        buf.write(struct.pack('>%dd' % self.NUM_U_TIMESTEPS, *self.dt_opt[:self.NUM_U_TIMESTEPS]))
        buf.write(struct.pack('>6d', *self.q_min[:6]))
        buf.write(struct.pack('>6d', *self.q_max[:6]))
        buf.write(struct.pack('>6d', *self.qd_min[:6]))
        buf.write(struct.pack('>6d', *self.qd_max[:6]))
        buf.write(struct.pack('>6d', *self.q_init[:6]))
        buf.write(struct.pack('>6d', *self.qd_init[:6]))
        buf.write(struct.pack('>%dd' % self.NUM_LEGS_x3, *self.c_init[:self.NUM_LEGS_x3]))
        buf.write(struct.pack('>6d', *self.q_term_min[:6]))
        buf.write(struct.pack('>6d', *self.q_term_max[:6]))
        buf.write(struct.pack('>6d', *self.qd_term_min[:6]))
        buf.write(struct.pack('>6d', *self.qd_term_max[:6]))
        buf.write(struct.pack('>12d', *self.QX[:12]))
        buf.write(struct.pack('>12d', *self.QN[:12]))
        buf.write(struct.pack('>3d', *self.Qc[:3]))
        buf.write(struct.pack('>3d', *self.Qf[:3]))
        buf.write(struct.pack(">dddd", self.mu_ground, self.l_leg_max, self.f_max, self.mass))
        buf.write(struct.pack('>3d', *self.Ib[:3]))
        buf.write(struct.pack('>3d', *self.Ib_inv[:3]))
        buf.write(struct.pack(">d", self.flight_duration))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != jto_inputs_casadi_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return jto_inputs_casadi_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = jto_inputs_casadi_lcmt()
        self.NUM_X_VAR, self.NUM_U_VAR, self.NUM_TIMESTEPS, self.NUM_U_TIMESTEPS, self.NUM_X_VAR_TRAJ, self.NUM_U_VAR_TRAJ, self.NUM_OPT_VAR_TRAJ, self.NUM_LEGS, self.NUM_LEGS_x3, self.NUM_GAIT_TABLE = struct.unpack(">iiiiiiiiii", buf.read(40))
        self.Xref = struct.unpack('>%dd' % self.NUM_X_VAR_TRAJ, buf.read(self.NUM_X_VAR_TRAJ * 8))
        self.Uref = struct.unpack('>%dd' % self.NUM_U_VAR_TRAJ, buf.read(self.NUM_U_VAR_TRAJ * 8))
        self.x0 = struct.unpack('>%dd' % self.NUM_OPT_VAR_TRAJ, buf.read(self.NUM_OPT_VAR_TRAJ * 8))
        self.gait_schedule = struct.unpack('>%dd' % self.NUM_GAIT_TABLE, buf.read(self.NUM_GAIT_TABLE * 8))
        self.gait_schedule_TD = struct.unpack('>%dd' % self.NUM_GAIT_TABLE, buf.read(self.NUM_GAIT_TABLE * 8))
        self.dt_opt = struct.unpack('>%dd' % self.NUM_U_TIMESTEPS, buf.read(self.NUM_U_TIMESTEPS * 8))
        self.q_min = struct.unpack('>6d', buf.read(48))
        self.q_max = struct.unpack('>6d', buf.read(48))
        self.qd_min = struct.unpack('>6d', buf.read(48))
        self.qd_max = struct.unpack('>6d', buf.read(48))
        self.q_init = struct.unpack('>6d', buf.read(48))
        self.qd_init = struct.unpack('>6d', buf.read(48))
        self.c_init = struct.unpack('>%dd' % self.NUM_LEGS_x3, buf.read(self.NUM_LEGS_x3 * 8))
        self.q_term_min = struct.unpack('>6d', buf.read(48))
        self.q_term_max = struct.unpack('>6d', buf.read(48))
        self.qd_term_min = struct.unpack('>6d', buf.read(48))
        self.qd_term_max = struct.unpack('>6d', buf.read(48))
        self.QX = struct.unpack('>12d', buf.read(96))
        self.QN = struct.unpack('>12d', buf.read(96))
        self.Qc = struct.unpack('>3d', buf.read(24))
        self.Qf = struct.unpack('>3d', buf.read(24))
        self.mu_ground, self.l_leg_max, self.f_max, self.mass = struct.unpack(">dddd", buf.read(32))
        self.Ib = struct.unpack('>3d', buf.read(24))
        self.Ib_inv = struct.unpack('>3d', buf.read(24))
        self.flight_duration = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if jto_inputs_casadi_lcmt in parents: return 0
        tmphash = (0x4a09cf8e00593dc6) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if jto_inputs_casadi_lcmt._packed_fingerprint is None:
            jto_inputs_casadi_lcmt._packed_fingerprint = struct.pack(">Q", jto_inputs_casadi_lcmt._get_hash_recursive([]))
        return jto_inputs_casadi_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

