"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class acrobatic_lcmt(object):
    __slots__ = ["time", "iter", "pcom_est", "pbody_est", "rpy_est", "vcom_est", "omegaBody_est", "h_est", "pfoot_est", "pfoot_leg_controller_est", "q_est", "qd_est", "tau_est", "pcom_ref", "pbody_ref", "rpy_ref", "vcom_ref", "omegaBody_ref", "h_ref", "pfoot_ref", "pfoot_leg_controller_ref", "q_ref", "qd_ref", "tau_ref", "pbody_TO", "rpy_TO", "vcom_TO", "omegaBody_TO", "h_TO", "u_ref", "u_TO", "cs_ref", "f_ff", "linear_error", "delta_u", "gQP", "lbQP", "ubQP", "lbAQP", "ubAQP", "Prde"]

    __typenames__ = ["float", "int32_t", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, [3], [3], [3], [3], [3], [3], [12], [12], [12], [12], [12], [3], [3], [3], [3], [3], [3], [12], [12], [12], [12], [12], [3], [3], [3], [3], [3], [12], [12], [4], [12], [24], [12], [12], [12], [12], [20], [20], [576]]

    def __init__(self):
        self.time = 0.0
        self.iter = 0
        self.pcom_est = [ 0.0 for dim0 in range(3) ]
        self.pbody_est = [ 0.0 for dim0 in range(3) ]
        self.rpy_est = [ 0.0 for dim0 in range(3) ]
        self.vcom_est = [ 0.0 for dim0 in range(3) ]
        self.omegaBody_est = [ 0.0 for dim0 in range(3) ]
        self.h_est = [ 0.0 for dim0 in range(3) ]
        self.pfoot_est = [ 0.0 for dim0 in range(12) ]
        self.pfoot_leg_controller_est = [ 0.0 for dim0 in range(12) ]
        self.q_est = [ 0.0 for dim0 in range(12) ]
        self.qd_est = [ 0.0 for dim0 in range(12) ]
        self.tau_est = [ 0.0 for dim0 in range(12) ]
        self.pcom_ref = [ 0.0 for dim0 in range(3) ]
        self.pbody_ref = [ 0.0 for dim0 in range(3) ]
        self.rpy_ref = [ 0.0 for dim0 in range(3) ]
        self.vcom_ref = [ 0.0 for dim0 in range(3) ]
        self.omegaBody_ref = [ 0.0 for dim0 in range(3) ]
        self.h_ref = [ 0.0 for dim0 in range(3) ]
        self.pfoot_ref = [ 0.0 for dim0 in range(12) ]
        self.pfoot_leg_controller_ref = [ 0.0 for dim0 in range(12) ]
        self.q_ref = [ 0.0 for dim0 in range(12) ]
        self.qd_ref = [ 0.0 for dim0 in range(12) ]
        self.tau_ref = [ 0.0 for dim0 in range(12) ]
        self.pbody_TO = [ 0.0 for dim0 in range(3) ]
        self.rpy_TO = [ 0.0 for dim0 in range(3) ]
        self.vcom_TO = [ 0.0 for dim0 in range(3) ]
        self.omegaBody_TO = [ 0.0 for dim0 in range(3) ]
        self.h_TO = [ 0.0 for dim0 in range(3) ]
        self.u_ref = [ 0.0 for dim0 in range(12) ]
        self.u_TO = [ 0.0 for dim0 in range(12) ]
        self.cs_ref = [ 0.0 for dim0 in range(4) ]
        self.f_ff = [ 0.0 for dim0 in range(12) ]
        self.linear_error = [ 0.0 for dim0 in range(24) ]
        self.delta_u = [ 0.0 for dim0 in range(12) ]
        self.gQP = [ 0.0 for dim0 in range(12) ]
        self.lbQP = [ 0.0 for dim0 in range(12) ]
        self.ubQP = [ 0.0 for dim0 in range(12) ]
        self.lbAQP = [ 0.0 for dim0 in range(20) ]
        self.ubAQP = [ 0.0 for dim0 in range(20) ]
        self.Prde = [ 0.0 for dim0 in range(576) ]

    def encode(self):
        buf = BytesIO()
        buf.write(acrobatic_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">fi", self.time, self.iter))
        buf.write(struct.pack('>3f', *self.pcom_est[:3]))
        buf.write(struct.pack('>3f', *self.pbody_est[:3]))
        buf.write(struct.pack('>3f', *self.rpy_est[:3]))
        buf.write(struct.pack('>3f', *self.vcom_est[:3]))
        buf.write(struct.pack('>3f', *self.omegaBody_est[:3]))
        buf.write(struct.pack('>3f', *self.h_est[:3]))
        buf.write(struct.pack('>12f', *self.pfoot_est[:12]))
        buf.write(struct.pack('>12f', *self.pfoot_leg_controller_est[:12]))
        buf.write(struct.pack('>12f', *self.q_est[:12]))
        buf.write(struct.pack('>12f', *self.qd_est[:12]))
        buf.write(struct.pack('>12f', *self.tau_est[:12]))
        buf.write(struct.pack('>3f', *self.pcom_ref[:3]))
        buf.write(struct.pack('>3f', *self.pbody_ref[:3]))
        buf.write(struct.pack('>3f', *self.rpy_ref[:3]))
        buf.write(struct.pack('>3f', *self.vcom_ref[:3]))
        buf.write(struct.pack('>3f', *self.omegaBody_ref[:3]))
        buf.write(struct.pack('>3f', *self.h_ref[:3]))
        buf.write(struct.pack('>12f', *self.pfoot_ref[:12]))
        buf.write(struct.pack('>12f', *self.pfoot_leg_controller_ref[:12]))
        buf.write(struct.pack('>12f', *self.q_ref[:12]))
        buf.write(struct.pack('>12f', *self.qd_ref[:12]))
        buf.write(struct.pack('>12f', *self.tau_ref[:12]))
        buf.write(struct.pack('>3f', *self.pbody_TO[:3]))
        buf.write(struct.pack('>3f', *self.rpy_TO[:3]))
        buf.write(struct.pack('>3f', *self.vcom_TO[:3]))
        buf.write(struct.pack('>3f', *self.omegaBody_TO[:3]))
        buf.write(struct.pack('>3f', *self.h_TO[:3]))
        buf.write(struct.pack('>12f', *self.u_ref[:12]))
        buf.write(struct.pack('>12f', *self.u_TO[:12]))
        buf.write(struct.pack('>4f', *self.cs_ref[:4]))
        buf.write(struct.pack('>12f', *self.f_ff[:12]))
        buf.write(struct.pack('>24f', *self.linear_error[:24]))
        buf.write(struct.pack('>12f', *self.delta_u[:12]))
        buf.write(struct.pack('>12f', *self.gQP[:12]))
        buf.write(struct.pack('>12f', *self.lbQP[:12]))
        buf.write(struct.pack('>12f', *self.ubQP[:12]))
        buf.write(struct.pack('>20f', *self.lbAQP[:20]))
        buf.write(struct.pack('>20f', *self.ubAQP[:20]))
        buf.write(struct.pack('>576f', *self.Prde[:576]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != acrobatic_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return acrobatic_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = acrobatic_lcmt()
        self.time, self.iter = struct.unpack(">fi", buf.read(8))
        self.pcom_est = struct.unpack('>3f', buf.read(12))
        self.pbody_est = struct.unpack('>3f', buf.read(12))
        self.rpy_est = struct.unpack('>3f', buf.read(12))
        self.vcom_est = struct.unpack('>3f', buf.read(12))
        self.omegaBody_est = struct.unpack('>3f', buf.read(12))
        self.h_est = struct.unpack('>3f', buf.read(12))
        self.pfoot_est = struct.unpack('>12f', buf.read(48))
        self.pfoot_leg_controller_est = struct.unpack('>12f', buf.read(48))
        self.q_est = struct.unpack('>12f', buf.read(48))
        self.qd_est = struct.unpack('>12f', buf.read(48))
        self.tau_est = struct.unpack('>12f', buf.read(48))
        self.pcom_ref = struct.unpack('>3f', buf.read(12))
        self.pbody_ref = struct.unpack('>3f', buf.read(12))
        self.rpy_ref = struct.unpack('>3f', buf.read(12))
        self.vcom_ref = struct.unpack('>3f', buf.read(12))
        self.omegaBody_ref = struct.unpack('>3f', buf.read(12))
        self.h_ref = struct.unpack('>3f', buf.read(12))
        self.pfoot_ref = struct.unpack('>12f', buf.read(48))
        self.pfoot_leg_controller_ref = struct.unpack('>12f', buf.read(48))
        self.q_ref = struct.unpack('>12f', buf.read(48))
        self.qd_ref = struct.unpack('>12f', buf.read(48))
        self.tau_ref = struct.unpack('>12f', buf.read(48))
        self.pbody_TO = struct.unpack('>3f', buf.read(12))
        self.rpy_TO = struct.unpack('>3f', buf.read(12))
        self.vcom_TO = struct.unpack('>3f', buf.read(12))
        self.omegaBody_TO = struct.unpack('>3f', buf.read(12))
        self.h_TO = struct.unpack('>3f', buf.read(12))
        self.u_ref = struct.unpack('>12f', buf.read(48))
        self.u_TO = struct.unpack('>12f', buf.read(48))
        self.cs_ref = struct.unpack('>4f', buf.read(16))
        self.f_ff = struct.unpack('>12f', buf.read(48))
        self.linear_error = struct.unpack('>24f', buf.read(96))
        self.delta_u = struct.unpack('>12f', buf.read(48))
        self.gQP = struct.unpack('>12f', buf.read(48))
        self.lbQP = struct.unpack('>12f', buf.read(48))
        self.ubQP = struct.unpack('>12f', buf.read(48))
        self.lbAQP = struct.unpack('>20f', buf.read(80))
        self.ubAQP = struct.unpack('>20f', buf.read(80))
        self.Prde = struct.unpack('>576f', buf.read(2304))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if acrobatic_lcmt in parents: return 0
        tmphash = (0xb556e8f43fb4eb9b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if acrobatic_lcmt._packed_fingerprint is None:
            acrobatic_lcmt._packed_fingerprint = struct.pack(">Q", acrobatic_lcmt._get_hash_recursive([]))
        return acrobatic_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

