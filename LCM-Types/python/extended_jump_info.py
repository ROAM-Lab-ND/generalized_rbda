"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class extended_jump_info(object):
    __slots__ = ["a", "b", "c", "d", "f", "yaw"]

    __typenames__ = ["double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None]

    def __init__(self):
        self.a = 0.0
        self.b = 0.0
        self.c = 0.0
        self.d = 0.0
        self.f = 0.0
        self.yaw = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(extended_jump_info._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddddd", self.a, self.b, self.c, self.d, self.f, self.yaw))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != extended_jump_info._get_packed_fingerprint():
            raise ValueError("Decode error")
        return extended_jump_info._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = extended_jump_info()
        self.a, self.b, self.c, self.d, self.f, self.yaw = struct.unpack(">dddddd", buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if extended_jump_info in parents: return 0
        tmphash = (0x264bb2d2f9f62f02) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if extended_jump_info._packed_fingerprint is None:
            extended_jump_info._packed_fingerprint = struct.pack(">Q", extended_jump_info._get_hash_recursive([]))
        return extended_jump_info._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

