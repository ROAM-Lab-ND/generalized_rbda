"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class jump3D_info_lcmt(object):
    __slots__ = ["obs_height", "dist_to_obs", "dist_past_obs_lb", "dist_past_obs_ub", "dist_past_obs_glub", "yaw_init", "yaw_term"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.obs_height = 0.0
        self.dist_to_obs = 0.0
        self.dist_past_obs_lb = 0.0
        self.dist_past_obs_ub = 0.0
        self.dist_past_obs_glub = 0.0
        self.yaw_init = 0.0
        self.yaw_term = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(jump3D_info_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ddddddd", self.obs_height, self.dist_to_obs, self.dist_past_obs_lb, self.dist_past_obs_ub, self.dist_past_obs_glub, self.yaw_init, self.yaw_term))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != jump3D_info_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return jump3D_info_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = jump3D_info_lcmt()
        self.obs_height, self.dist_to_obs, self.dist_past_obs_lb, self.dist_past_obs_ub, self.dist_past_obs_glub, self.yaw_init, self.yaw_term = struct.unpack(">ddddddd", buf.read(56))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if jump3D_info_lcmt in parents: return 0
        tmphash = (0xd7f28e09ee0e1bb0) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if jump3D_info_lcmt._packed_fingerprint is None:
            jump3D_info_lcmt._packed_fingerprint = struct.pack(">Q", jump3D_info_lcmt._get_hash_recursive([]))
        return jump3D_info_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

