"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class humanoid_gait_lcmt(object):
    __slots__ = ["contactStateScheduled", "contactStatePrev", "touchdownScheduled", "liftoffScheduled", "phaseVariable", "phaseStance", "phaseSwing", "timeStanceRemaining", "timeSwingRemaining", "periodTime", "timeStance", "timeSwing", "switchingPhase", "phaseOffset", "phaseScale"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [[4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4], [4]]

    def __init__(self):
        self.contactStateScheduled = [ 0.0 for dim0 in range(4) ]
        self.contactStatePrev = [ 0.0 for dim0 in range(4) ]
        self.touchdownScheduled = [ 0.0 for dim0 in range(4) ]
        self.liftoffScheduled = [ 0.0 for dim0 in range(4) ]
        self.phaseVariable = [ 0.0 for dim0 in range(4) ]
        self.phaseStance = [ 0.0 for dim0 in range(4) ]
        self.phaseSwing = [ 0.0 for dim0 in range(4) ]
        self.timeStanceRemaining = [ 0.0 for dim0 in range(4) ]
        self.timeSwingRemaining = [ 0.0 for dim0 in range(4) ]
        self.periodTime = [ 0.0 for dim0 in range(4) ]
        self.timeStance = [ 0.0 for dim0 in range(4) ]
        self.timeSwing = [ 0.0 for dim0 in range(4) ]
        self.switchingPhase = [ 0.0 for dim0 in range(4) ]
        self.phaseOffset = [ 0.0 for dim0 in range(4) ]
        self.phaseScale = [ 0.0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(humanoid_gait_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4d', *self.contactStateScheduled[:4]))
        buf.write(struct.pack('>4d', *self.contactStatePrev[:4]))
        buf.write(struct.pack('>4d', *self.touchdownScheduled[:4]))
        buf.write(struct.pack('>4d', *self.liftoffScheduled[:4]))
        buf.write(struct.pack('>4d', *self.phaseVariable[:4]))
        buf.write(struct.pack('>4d', *self.phaseStance[:4]))
        buf.write(struct.pack('>4d', *self.phaseSwing[:4]))
        buf.write(struct.pack('>4d', *self.timeStanceRemaining[:4]))
        buf.write(struct.pack('>4d', *self.timeSwingRemaining[:4]))
        buf.write(struct.pack('>4d', *self.periodTime[:4]))
        buf.write(struct.pack('>4d', *self.timeStance[:4]))
        buf.write(struct.pack('>4d', *self.timeSwing[:4]))
        buf.write(struct.pack('>4d', *self.switchingPhase[:4]))
        buf.write(struct.pack('>4d', *self.phaseOffset[:4]))
        buf.write(struct.pack('>4d', *self.phaseScale[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != humanoid_gait_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return humanoid_gait_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = humanoid_gait_lcmt()
        self.contactStateScheduled = struct.unpack('>4d', buf.read(32))
        self.contactStatePrev = struct.unpack('>4d', buf.read(32))
        self.touchdownScheduled = struct.unpack('>4d', buf.read(32))
        self.liftoffScheduled = struct.unpack('>4d', buf.read(32))
        self.phaseVariable = struct.unpack('>4d', buf.read(32))
        self.phaseStance = struct.unpack('>4d', buf.read(32))
        self.phaseSwing = struct.unpack('>4d', buf.read(32))
        self.timeStanceRemaining = struct.unpack('>4d', buf.read(32))
        self.timeSwingRemaining = struct.unpack('>4d', buf.read(32))
        self.periodTime = struct.unpack('>4d', buf.read(32))
        self.timeStance = struct.unpack('>4d', buf.read(32))
        self.timeSwing = struct.unpack('>4d', buf.read(32))
        self.switchingPhase = struct.unpack('>4d', buf.read(32))
        self.phaseOffset = struct.unpack('>4d', buf.read(32))
        self.phaseScale = struct.unpack('>4d', buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if humanoid_gait_lcmt in parents: return 0
        tmphash = (0x83dcdfcbb409ec9a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if humanoid_gait_lcmt._packed_fingerprint is None:
            humanoid_gait_lcmt._packed_fingerprint = struct.pack(">Q", humanoid_gait_lcmt._get_hash_recursive([]))
        return humanoid_gait_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

