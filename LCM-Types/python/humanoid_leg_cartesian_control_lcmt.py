"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class humanoid_leg_cartesian_control_lcmt(object):
    __slots__ = ["pcom", "pFootRightCurr", "pFootLeftCurr", "vFootRightCurr", "vFootLeftCurr", "pFootRightLand", "pFootLeftLand", "footForceRight", "footForceLeft", "legTorqueRight", "legTorqueLeft"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[3], [3], [3], [3], [3], [3], [3], [3], [3], [5], [5]]

    def __init__(self):
        self.pcom = [ 0.0 for dim0 in range(3) ]
        self.pFootRightCurr = [ 0.0 for dim0 in range(3) ]
        self.pFootLeftCurr = [ 0.0 for dim0 in range(3) ]
        self.vFootRightCurr = [ 0.0 for dim0 in range(3) ]
        self.vFootLeftCurr = [ 0.0 for dim0 in range(3) ]
        self.pFootRightLand = [ 0.0 for dim0 in range(3) ]
        self.pFootLeftLand = [ 0.0 for dim0 in range(3) ]
        self.footForceRight = [ 0.0 for dim0 in range(3) ]
        self.footForceLeft = [ 0.0 for dim0 in range(3) ]
        self.legTorqueRight = [ 0.0 for dim0 in range(5) ]
        self.legTorqueLeft = [ 0.0 for dim0 in range(5) ]

    def encode(self):
        buf = BytesIO()
        buf.write(humanoid_leg_cartesian_control_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3f', *self.pcom[:3]))
        buf.write(struct.pack('>3f', *self.pFootRightCurr[:3]))
        buf.write(struct.pack('>3f', *self.pFootLeftCurr[:3]))
        buf.write(struct.pack('>3f', *self.vFootRightCurr[:3]))
        buf.write(struct.pack('>3f', *self.vFootLeftCurr[:3]))
        buf.write(struct.pack('>3f', *self.pFootRightLand[:3]))
        buf.write(struct.pack('>3f', *self.pFootLeftLand[:3]))
        buf.write(struct.pack('>3f', *self.footForceRight[:3]))
        buf.write(struct.pack('>3f', *self.footForceLeft[:3]))
        buf.write(struct.pack('>5f', *self.legTorqueRight[:5]))
        buf.write(struct.pack('>5f', *self.legTorqueLeft[:5]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != humanoid_leg_cartesian_control_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return humanoid_leg_cartesian_control_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = humanoid_leg_cartesian_control_lcmt()
        self.pcom = struct.unpack('>3f', buf.read(12))
        self.pFootRightCurr = struct.unpack('>3f', buf.read(12))
        self.pFootLeftCurr = struct.unpack('>3f', buf.read(12))
        self.vFootRightCurr = struct.unpack('>3f', buf.read(12))
        self.vFootLeftCurr = struct.unpack('>3f', buf.read(12))
        self.pFootRightLand = struct.unpack('>3f', buf.read(12))
        self.pFootLeftLand = struct.unpack('>3f', buf.read(12))
        self.footForceRight = struct.unpack('>3f', buf.read(12))
        self.footForceLeft = struct.unpack('>3f', buf.read(12))
        self.legTorqueRight = struct.unpack('>5f', buf.read(20))
        self.legTorqueLeft = struct.unpack('>5f', buf.read(20))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if humanoid_leg_cartesian_control_lcmt in parents: return 0
        tmphash = (0xa78fc920bee9c719) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if humanoid_leg_cartesian_control_lcmt._packed_fingerprint is None:
            humanoid_leg_cartesian_control_lcmt._packed_fingerprint = struct.pack(">Q", humanoid_leg_cartesian_control_lcmt._get_hash_recursive([]))
        return humanoid_leg_cartesian_control_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

