"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class qkdmpc_outputs_lcmt(object):
    __slots__ = ["NUM_TIMESTEPS_x3", "NUM_TIMESTEPS_xLEGS_x3", "NUM_TIMESTEPS_xACTJOINT", "NUM_U_TIMESTEPS_xLEGS_x3", "NUM_OPT_VAR_TRAJ", "NUM_G_CONSTRAINTS", "NUM_X_CONSTRAINTS", "Xopt", "lagrange_mult_G", "lagrange_mult_X", "p_body", "rpy_body", "omega_body", "r", "rdot", "h", "f_grf", "p_feet", "q", "qd", "obj_val", "t_solve", "opt_solved", "iter"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None, ["NUM_OPT_VAR_TRAJ"], ["NUM_G_CONSTRAINTS"], ["NUM_X_CONSTRAINTS"], ["NUM_TIMESTEPS_x3"], ["NUM_TIMESTEPS_x3"], ["NUM_TIMESTEPS_x3"], ["NUM_TIMESTEPS_x3"], ["NUM_TIMESTEPS_x3"], ["NUM_TIMESTEPS_x3"], ["NUM_U_TIMESTEPS_xLEGS_x3"], ["NUM_TIMESTEPS_xLEGS_x3"], ["NUM_TIMESTEPS_xACTJOINT"], ["NUM_TIMESTEPS_xACTJOINT"], None, None, None, None]

    def __init__(self):
        self.NUM_TIMESTEPS_x3 = 0
        self.NUM_TIMESTEPS_xLEGS_x3 = 0
        self.NUM_TIMESTEPS_xACTJOINT = 0
        self.NUM_U_TIMESTEPS_xLEGS_x3 = 0
        self.NUM_OPT_VAR_TRAJ = 0
        self.NUM_G_CONSTRAINTS = 0
        self.NUM_X_CONSTRAINTS = 0
        self.Xopt = []
        self.lagrange_mult_G = []
        self.lagrange_mult_X = []
        self.p_body = []
        self.rpy_body = []
        self.omega_body = []
        self.r = []
        self.rdot = []
        self.h = []
        self.f_grf = []
        self.p_feet = []
        self.q = []
        self.qd = []
        self.obj_val = 0.0
        self.t_solve = 0.0
        self.opt_solved = 0
        self.iter = 0

    def encode(self):
        buf = BytesIO()
        buf.write(qkdmpc_outputs_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiiiiii", self.NUM_TIMESTEPS_x3, self.NUM_TIMESTEPS_xLEGS_x3, self.NUM_TIMESTEPS_xACTJOINT, self.NUM_U_TIMESTEPS_xLEGS_x3, self.NUM_OPT_VAR_TRAJ, self.NUM_G_CONSTRAINTS, self.NUM_X_CONSTRAINTS))
        buf.write(struct.pack('>%dd' % self.NUM_OPT_VAR_TRAJ, *self.Xopt[:self.NUM_OPT_VAR_TRAJ]))
        buf.write(struct.pack('>%dd' % self.NUM_G_CONSTRAINTS, *self.lagrange_mult_G[:self.NUM_G_CONSTRAINTS]))
        buf.write(struct.pack('>%dd' % self.NUM_X_CONSTRAINTS, *self.lagrange_mult_X[:self.NUM_X_CONSTRAINTS]))
        buf.write(struct.pack('>%dd' % self.NUM_TIMESTEPS_x3, *self.p_body[:self.NUM_TIMESTEPS_x3]))
        buf.write(struct.pack('>%dd' % self.NUM_TIMESTEPS_x3, *self.rpy_body[:self.NUM_TIMESTEPS_x3]))
        buf.write(struct.pack('>%dd' % self.NUM_TIMESTEPS_x3, *self.omega_body[:self.NUM_TIMESTEPS_x3]))
        buf.write(struct.pack('>%dd' % self.NUM_TIMESTEPS_x3, *self.r[:self.NUM_TIMESTEPS_x3]))
        buf.write(struct.pack('>%dd' % self.NUM_TIMESTEPS_x3, *self.rdot[:self.NUM_TIMESTEPS_x3]))
        buf.write(struct.pack('>%dd' % self.NUM_TIMESTEPS_x3, *self.h[:self.NUM_TIMESTEPS_x3]))
        buf.write(struct.pack('>%dd' % self.NUM_U_TIMESTEPS_xLEGS_x3, *self.f_grf[:self.NUM_U_TIMESTEPS_xLEGS_x3]))
        buf.write(struct.pack('>%dd' % self.NUM_TIMESTEPS_xLEGS_x3, *self.p_feet[:self.NUM_TIMESTEPS_xLEGS_x3]))
        buf.write(struct.pack('>%dd' % self.NUM_TIMESTEPS_xACTJOINT, *self.q[:self.NUM_TIMESTEPS_xACTJOINT]))
        buf.write(struct.pack('>%dd' % self.NUM_TIMESTEPS_xACTJOINT, *self.qd[:self.NUM_TIMESTEPS_xACTJOINT]))
        buf.write(struct.pack(">ddii", self.obj_val, self.t_solve, self.opt_solved, self.iter))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != qkdmpc_outputs_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return qkdmpc_outputs_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = qkdmpc_outputs_lcmt()
        self.NUM_TIMESTEPS_x3, self.NUM_TIMESTEPS_xLEGS_x3, self.NUM_TIMESTEPS_xACTJOINT, self.NUM_U_TIMESTEPS_xLEGS_x3, self.NUM_OPT_VAR_TRAJ, self.NUM_G_CONSTRAINTS, self.NUM_X_CONSTRAINTS = struct.unpack(">iiiiiii", buf.read(28))
        self.Xopt = struct.unpack('>%dd' % self.NUM_OPT_VAR_TRAJ, buf.read(self.NUM_OPT_VAR_TRAJ * 8))
        self.lagrange_mult_G = struct.unpack('>%dd' % self.NUM_G_CONSTRAINTS, buf.read(self.NUM_G_CONSTRAINTS * 8))
        self.lagrange_mult_X = struct.unpack('>%dd' % self.NUM_X_CONSTRAINTS, buf.read(self.NUM_X_CONSTRAINTS * 8))
        self.p_body = struct.unpack('>%dd' % self.NUM_TIMESTEPS_x3, buf.read(self.NUM_TIMESTEPS_x3 * 8))
        self.rpy_body = struct.unpack('>%dd' % self.NUM_TIMESTEPS_x3, buf.read(self.NUM_TIMESTEPS_x3 * 8))
        self.omega_body = struct.unpack('>%dd' % self.NUM_TIMESTEPS_x3, buf.read(self.NUM_TIMESTEPS_x3 * 8))
        self.r = struct.unpack('>%dd' % self.NUM_TIMESTEPS_x3, buf.read(self.NUM_TIMESTEPS_x3 * 8))
        self.rdot = struct.unpack('>%dd' % self.NUM_TIMESTEPS_x3, buf.read(self.NUM_TIMESTEPS_x3 * 8))
        self.h = struct.unpack('>%dd' % self.NUM_TIMESTEPS_x3, buf.read(self.NUM_TIMESTEPS_x3 * 8))
        self.f_grf = struct.unpack('>%dd' % self.NUM_U_TIMESTEPS_xLEGS_x3, buf.read(self.NUM_U_TIMESTEPS_xLEGS_x3 * 8))
        self.p_feet = struct.unpack('>%dd' % self.NUM_TIMESTEPS_xLEGS_x3, buf.read(self.NUM_TIMESTEPS_xLEGS_x3 * 8))
        self.q = struct.unpack('>%dd' % self.NUM_TIMESTEPS_xACTJOINT, buf.read(self.NUM_TIMESTEPS_xACTJOINT * 8))
        self.qd = struct.unpack('>%dd' % self.NUM_TIMESTEPS_xACTJOINT, buf.read(self.NUM_TIMESTEPS_xACTJOINT * 8))
        self.obj_val, self.t_solve, self.opt_solved, self.iter = struct.unpack(">ddii", buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if qkdmpc_outputs_lcmt in parents: return 0
        tmphash = (0xdc3d8fcbd4115f71) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if qkdmpc_outputs_lcmt._packed_fingerprint is None:
            qkdmpc_outputs_lcmt._packed_fingerprint = struct.pack(">Q", qkdmpc_outputs_lcmt._get_hash_recursive([]))
        return qkdmpc_outputs_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

