"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class humanoid_command_lcmt(object):
    __slots__ = ["q_des_hipz", "q_des_hipx", "q_des_hipy", "q_des_knee", "q_des_ankle", "q_des_shouldery", "q_des_shoulderx", "q_des_shoulderz", "q_des_elbow", "qd_des_hipz", "qd_des_hipx", "qd_des_hipy", "qd_des_knee", "qd_des_ankle", "qd_des_shouldery", "qd_des_shoulderx", "qd_des_shoulderz", "qd_des_elbow", "kp_hipz", "kp_hipx", "kp_hipy", "kp_knee", "kp_ankle", "kp_shouldery", "kp_shoulderx", "kp_shoulderz", "kp_elbow", "kd_hipz", "kd_hipx", "kd_hipy", "kd_knee", "kd_ankle", "kd_shouldery", "kd_shoulderx", "kd_shoulderz", "kd_elbow", "tau_hipz_ff", "tau_hipx_ff", "tau_hipy_ff", "tau_knee_ff", "tau_ankle_ff", "tau_shouldery_ff", "tau_shoulderx_ff", "tau_shoulderz_ff", "tau_elbow_ff", "flags"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "int32_t"]

    __dimensions__ = [[2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [6]]

    def __init__(self):
        self.q_des_hipz = [ 0.0 for dim0 in range(2) ]
        self.q_des_hipx = [ 0.0 for dim0 in range(2) ]
        self.q_des_hipy = [ 0.0 for dim0 in range(2) ]
        self.q_des_knee = [ 0.0 for dim0 in range(2) ]
        self.q_des_ankle = [ 0.0 for dim0 in range(2) ]
        self.q_des_shouldery = [ 0.0 for dim0 in range(2) ]
        self.q_des_shoulderx = [ 0.0 for dim0 in range(2) ]
        self.q_des_shoulderz = [ 0.0 for dim0 in range(2) ]
        self.q_des_elbow = [ 0.0 for dim0 in range(2) ]
        self.qd_des_hipz = [ 0.0 for dim0 in range(2) ]
        self.qd_des_hipx = [ 0.0 for dim0 in range(2) ]
        self.qd_des_hipy = [ 0.0 for dim0 in range(2) ]
        self.qd_des_knee = [ 0.0 for dim0 in range(2) ]
        self.qd_des_ankle = [ 0.0 for dim0 in range(2) ]
        self.qd_des_shouldery = [ 0.0 for dim0 in range(2) ]
        self.qd_des_shoulderx = [ 0.0 for dim0 in range(2) ]
        self.qd_des_shoulderz = [ 0.0 for dim0 in range(2) ]
        self.qd_des_elbow = [ 0.0 for dim0 in range(2) ]
        self.kp_hipz = [ 0.0 for dim0 in range(2) ]
        self.kp_hipx = [ 0.0 for dim0 in range(2) ]
        self.kp_hipy = [ 0.0 for dim0 in range(2) ]
        self.kp_knee = [ 0.0 for dim0 in range(2) ]
        self.kp_ankle = [ 0.0 for dim0 in range(2) ]
        self.kp_shouldery = [ 0.0 for dim0 in range(2) ]
        self.kp_shoulderx = [ 0.0 for dim0 in range(2) ]
        self.kp_shoulderz = [ 0.0 for dim0 in range(2) ]
        self.kp_elbow = [ 0.0 for dim0 in range(2) ]
        self.kd_hipz = [ 0.0 for dim0 in range(2) ]
        self.kd_hipx = [ 0.0 for dim0 in range(2) ]
        self.kd_hipy = [ 0.0 for dim0 in range(2) ]
        self.kd_knee = [ 0.0 for dim0 in range(2) ]
        self.kd_ankle = [ 0.0 for dim0 in range(2) ]
        self.kd_shouldery = [ 0.0 for dim0 in range(2) ]
        self.kd_shoulderx = [ 0.0 for dim0 in range(2) ]
        self.kd_shoulderz = [ 0.0 for dim0 in range(2) ]
        self.kd_elbow = [ 0.0 for dim0 in range(2) ]
        self.tau_hipz_ff = [ 0.0 for dim0 in range(2) ]
        self.tau_hipx_ff = [ 0.0 for dim0 in range(2) ]
        self.tau_hipy_ff = [ 0.0 for dim0 in range(2) ]
        self.tau_knee_ff = [ 0.0 for dim0 in range(2) ]
        self.tau_ankle_ff = [ 0.0 for dim0 in range(2) ]
        self.tau_shouldery_ff = [ 0.0 for dim0 in range(2) ]
        self.tau_shoulderx_ff = [ 0.0 for dim0 in range(2) ]
        self.tau_shoulderz_ff = [ 0.0 for dim0 in range(2) ]
        self.tau_elbow_ff = [ 0.0 for dim0 in range(2) ]
        self.flags = [ 0 for dim0 in range(6) ]

    def encode(self):
        buf = BytesIO()
        buf.write(humanoid_command_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>2f', *self.q_des_hipz[:2]))
        buf.write(struct.pack('>2f', *self.q_des_hipx[:2]))
        buf.write(struct.pack('>2f', *self.q_des_hipy[:2]))
        buf.write(struct.pack('>2f', *self.q_des_knee[:2]))
        buf.write(struct.pack('>2f', *self.q_des_ankle[:2]))
        buf.write(struct.pack('>2f', *self.q_des_shouldery[:2]))
        buf.write(struct.pack('>2f', *self.q_des_shoulderx[:2]))
        buf.write(struct.pack('>2f', *self.q_des_shoulderz[:2]))
        buf.write(struct.pack('>2f', *self.q_des_elbow[:2]))
        buf.write(struct.pack('>2f', *self.qd_des_hipz[:2]))
        buf.write(struct.pack('>2f', *self.qd_des_hipx[:2]))
        buf.write(struct.pack('>2f', *self.qd_des_hipy[:2]))
        buf.write(struct.pack('>2f', *self.qd_des_knee[:2]))
        buf.write(struct.pack('>2f', *self.qd_des_ankle[:2]))
        buf.write(struct.pack('>2f', *self.qd_des_shouldery[:2]))
        buf.write(struct.pack('>2f', *self.qd_des_shoulderx[:2]))
        buf.write(struct.pack('>2f', *self.qd_des_shoulderz[:2]))
        buf.write(struct.pack('>2f', *self.qd_des_elbow[:2]))
        buf.write(struct.pack('>2f', *self.kp_hipz[:2]))
        buf.write(struct.pack('>2f', *self.kp_hipx[:2]))
        buf.write(struct.pack('>2f', *self.kp_hipy[:2]))
        buf.write(struct.pack('>2f', *self.kp_knee[:2]))
        buf.write(struct.pack('>2f', *self.kp_ankle[:2]))
        buf.write(struct.pack('>2f', *self.kp_shouldery[:2]))
        buf.write(struct.pack('>2f', *self.kp_shoulderx[:2]))
        buf.write(struct.pack('>2f', *self.kp_shoulderz[:2]))
        buf.write(struct.pack('>2f', *self.kp_elbow[:2]))
        buf.write(struct.pack('>2f', *self.kd_hipz[:2]))
        buf.write(struct.pack('>2f', *self.kd_hipx[:2]))
        buf.write(struct.pack('>2f', *self.kd_hipy[:2]))
        buf.write(struct.pack('>2f', *self.kd_knee[:2]))
        buf.write(struct.pack('>2f', *self.kd_ankle[:2]))
        buf.write(struct.pack('>2f', *self.kd_shouldery[:2]))
        buf.write(struct.pack('>2f', *self.kd_shoulderx[:2]))
        buf.write(struct.pack('>2f', *self.kd_shoulderz[:2]))
        buf.write(struct.pack('>2f', *self.kd_elbow[:2]))
        buf.write(struct.pack('>2f', *self.tau_hipz_ff[:2]))
        buf.write(struct.pack('>2f', *self.tau_hipx_ff[:2]))
        buf.write(struct.pack('>2f', *self.tau_hipy_ff[:2]))
        buf.write(struct.pack('>2f', *self.tau_knee_ff[:2]))
        buf.write(struct.pack('>2f', *self.tau_ankle_ff[:2]))
        buf.write(struct.pack('>2f', *self.tau_shouldery_ff[:2]))
        buf.write(struct.pack('>2f', *self.tau_shoulderx_ff[:2]))
        buf.write(struct.pack('>2f', *self.tau_shoulderz_ff[:2]))
        buf.write(struct.pack('>2f', *self.tau_elbow_ff[:2]))
        buf.write(struct.pack('>6i', *self.flags[:6]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != humanoid_command_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return humanoid_command_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = humanoid_command_lcmt()
        self.q_des_hipz = struct.unpack('>2f', buf.read(8))
        self.q_des_hipx = struct.unpack('>2f', buf.read(8))
        self.q_des_hipy = struct.unpack('>2f', buf.read(8))
        self.q_des_knee = struct.unpack('>2f', buf.read(8))
        self.q_des_ankle = struct.unpack('>2f', buf.read(8))
        self.q_des_shouldery = struct.unpack('>2f', buf.read(8))
        self.q_des_shoulderx = struct.unpack('>2f', buf.read(8))
        self.q_des_shoulderz = struct.unpack('>2f', buf.read(8))
        self.q_des_elbow = struct.unpack('>2f', buf.read(8))
        self.qd_des_hipz = struct.unpack('>2f', buf.read(8))
        self.qd_des_hipx = struct.unpack('>2f', buf.read(8))
        self.qd_des_hipy = struct.unpack('>2f', buf.read(8))
        self.qd_des_knee = struct.unpack('>2f', buf.read(8))
        self.qd_des_ankle = struct.unpack('>2f', buf.read(8))
        self.qd_des_shouldery = struct.unpack('>2f', buf.read(8))
        self.qd_des_shoulderx = struct.unpack('>2f', buf.read(8))
        self.qd_des_shoulderz = struct.unpack('>2f', buf.read(8))
        self.qd_des_elbow = struct.unpack('>2f', buf.read(8))
        self.kp_hipz = struct.unpack('>2f', buf.read(8))
        self.kp_hipx = struct.unpack('>2f', buf.read(8))
        self.kp_hipy = struct.unpack('>2f', buf.read(8))
        self.kp_knee = struct.unpack('>2f', buf.read(8))
        self.kp_ankle = struct.unpack('>2f', buf.read(8))
        self.kp_shouldery = struct.unpack('>2f', buf.read(8))
        self.kp_shoulderx = struct.unpack('>2f', buf.read(8))
        self.kp_shoulderz = struct.unpack('>2f', buf.read(8))
        self.kp_elbow = struct.unpack('>2f', buf.read(8))
        self.kd_hipz = struct.unpack('>2f', buf.read(8))
        self.kd_hipx = struct.unpack('>2f', buf.read(8))
        self.kd_hipy = struct.unpack('>2f', buf.read(8))
        self.kd_knee = struct.unpack('>2f', buf.read(8))
        self.kd_ankle = struct.unpack('>2f', buf.read(8))
        self.kd_shouldery = struct.unpack('>2f', buf.read(8))
        self.kd_shoulderx = struct.unpack('>2f', buf.read(8))
        self.kd_shoulderz = struct.unpack('>2f', buf.read(8))
        self.kd_elbow = struct.unpack('>2f', buf.read(8))
        self.tau_hipz_ff = struct.unpack('>2f', buf.read(8))
        self.tau_hipx_ff = struct.unpack('>2f', buf.read(8))
        self.tau_hipy_ff = struct.unpack('>2f', buf.read(8))
        self.tau_knee_ff = struct.unpack('>2f', buf.read(8))
        self.tau_ankle_ff = struct.unpack('>2f', buf.read(8))
        self.tau_shouldery_ff = struct.unpack('>2f', buf.read(8))
        self.tau_shoulderx_ff = struct.unpack('>2f', buf.read(8))
        self.tau_shoulderz_ff = struct.unpack('>2f', buf.read(8))
        self.tau_elbow_ff = struct.unpack('>2f', buf.read(8))
        self.flags = struct.unpack('>6i', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if humanoid_command_lcmt in parents: return 0
        tmphash = (0xf51726f37a33b4b6) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if humanoid_command_lcmt._packed_fingerprint is None:
            humanoid_command_lcmt._packed_fingerprint = struct.pack(">Q", humanoid_command_lcmt._get_hash_recursive([]))
        return humanoid_command_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

