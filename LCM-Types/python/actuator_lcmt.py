"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class actuator_lcmt(object):
    __slots__ = ["iter", "qdot", "tau"]

    __typenames__ = ["int32_t", "float", "float"]

    __dimensions__ = [None, [10], [10]]

    def __init__(self):
        self.iter = 0
        self.qdot = [ 0.0 for dim0 in range(10) ]
        self.tau = [ 0.0 for dim0 in range(10) ]

    def encode(self):
        buf = BytesIO()
        buf.write(actuator_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.iter))
        buf.write(struct.pack('>10f', *self.qdot[:10]))
        buf.write(struct.pack('>10f', *self.tau[:10]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != actuator_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return actuator_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = actuator_lcmt()
        self.iter = struct.unpack(">i", buf.read(4))[0]
        self.qdot = struct.unpack('>10f', buf.read(40))
        self.tau = struct.unpack('>10f', buf.read(40))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if actuator_lcmt in parents: return 0
        tmphash = (0x645f6201325e366d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if actuator_lcmt._packed_fingerprint is None:
            actuator_lcmt._packed_fingerprint = struct.pack(">Q", actuator_lcmt._get_hash_recursive([]))
        return actuator_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

