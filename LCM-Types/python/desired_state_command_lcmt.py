"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class desired_state_command_lcmt(object):
    __slots__ = ["next_point", "cur_pos", "cur_yaw", "pos_error_world", "pos_error_body", "heading_direction", "yaw_error", "des_vel"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [[2], [2], None, [2], [2], None, None, [3]]

    def __init__(self):
        self.next_point = [ 0.0 for dim0 in range(2) ]
        self.cur_pos = [ 0.0 for dim0 in range(2) ]
        self.cur_yaw = 0.0
        self.pos_error_world = [ 0.0 for dim0 in range(2) ]
        self.pos_error_body = [ 0.0 for dim0 in range(2) ]
        self.heading_direction = 0.0
        self.yaw_error = 0.0
        self.des_vel = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(desired_state_command_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>2d', *self.next_point[:2]))
        buf.write(struct.pack('>2d', *self.cur_pos[:2]))
        buf.write(struct.pack(">d", self.cur_yaw))
        buf.write(struct.pack('>2d', *self.pos_error_world[:2]))
        buf.write(struct.pack('>2d', *self.pos_error_body[:2]))
        buf.write(struct.pack(">dd", self.heading_direction, self.yaw_error))
        buf.write(struct.pack('>3d', *self.des_vel[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != desired_state_command_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return desired_state_command_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = desired_state_command_lcmt()
        self.next_point = struct.unpack('>2d', buf.read(16))
        self.cur_pos = struct.unpack('>2d', buf.read(16))
        self.cur_yaw = struct.unpack(">d", buf.read(8))[0]
        self.pos_error_world = struct.unpack('>2d', buf.read(16))
        self.pos_error_body = struct.unpack('>2d', buf.read(16))
        self.heading_direction, self.yaw_error = struct.unpack(">dd", buf.read(16))
        self.des_vel = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if desired_state_command_lcmt in parents: return 0
        tmphash = (0x22b865cb04f82213) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if desired_state_command_lcmt._packed_fingerprint is None:
            desired_state_command_lcmt._packed_fingerprint = struct.pack(">Q", desired_state_command_lcmt._get_hash_recursive([]))
        return desired_state_command_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

