"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class wbc_VILR_test_data_lcmt(object):
    __slots__ = ["contact_est", "Wr_des", "Wr", "Wr_est", "deltas", "body_ori_cmd", "L_cmd", "Ld_cmd", "com_vel_cmd", "com_pos_cmd", "com_acc_cmd", "com_pos", "com_vel", "body_ori", "L", "body_ang_vel", "foot_pos_cmd", "foot_vel_cmd", "foot_acc_cmd", "foot_acc_numeric", "foot_pos", "foot_vel", "foot_local_pos", "foot_local_vel", "jpos_cmd", "jvel_cmd", "jacc_cmd", "jpos", "jvel", "rpy", "v_des_robot", "yaw_des", "yaw_turn_rate"]

    __typenames__ = ["int32_t", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[4], [10], [10], [10], [16], [4], [3], [3], [3], [3], [3], [3], [3], [4], [3], [3], [12], [12], [12], [12], [12], [12], [12], [12], [16], [16], [16], [16], [16], [3], [3], None, None]

    def __init__(self):
        self.contact_est = [ 0 for dim0 in range(4) ]
        self.Wr_des = [ 0.0 for dim0 in range(10) ]
        self.Wr = [ 0.0 for dim0 in range(10) ]
        self.Wr_est = [ 0.0 for dim0 in range(10) ]
        self.deltas = [ 0.0 for dim0 in range(16) ]
        self.body_ori_cmd = [ 0.0 for dim0 in range(4) ]
        self.L_cmd = [ 0.0 for dim0 in range(3) ]
        self.Ld_cmd = [ 0.0 for dim0 in range(3) ]
        self.com_vel_cmd = [ 0.0 for dim0 in range(3) ]
        self.com_pos_cmd = [ 0.0 for dim0 in range(3) ]
        self.com_acc_cmd = [ 0.0 for dim0 in range(3) ]
        self.com_pos = [ 0.0 for dim0 in range(3) ]
        self.com_vel = [ 0.0 for dim0 in range(3) ]
        self.body_ori = [ 0.0 for dim0 in range(4) ]
        self.L = [ 0.0 for dim0 in range(3) ]
        self.body_ang_vel = [ 0.0 for dim0 in range(3) ]
        self.foot_pos_cmd = [ 0.0 for dim0 in range(12) ]
        self.foot_vel_cmd = [ 0.0 for dim0 in range(12) ]
        self.foot_acc_cmd = [ 0.0 for dim0 in range(12) ]
        self.foot_acc_numeric = [ 0.0 for dim0 in range(12) ]
        self.foot_pos = [ 0.0 for dim0 in range(12) ]
        self.foot_vel = [ 0.0 for dim0 in range(12) ]
        self.foot_local_pos = [ 0.0 for dim0 in range(12) ]
        self.foot_local_vel = [ 0.0 for dim0 in range(12) ]
        self.jpos_cmd = [ 0.0 for dim0 in range(16) ]
        self.jvel_cmd = [ 0.0 for dim0 in range(16) ]
        self.jacc_cmd = [ 0.0 for dim0 in range(16) ]
        self.jpos = [ 0.0 for dim0 in range(16) ]
        self.jvel = [ 0.0 for dim0 in range(16) ]
        self.rpy = [ 0.0 for dim0 in range(3) ]
        self.v_des_robot = [ 0.0 for dim0 in range(3) ]
        self.yaw_des = 0.0
        self.yaw_turn_rate = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(wbc_VILR_test_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4i', *self.contact_est[:4]))
        buf.write(struct.pack('>10f', *self.Wr_des[:10]))
        buf.write(struct.pack('>10f', *self.Wr[:10]))
        buf.write(struct.pack('>10f', *self.Wr_est[:10]))
        buf.write(struct.pack('>16f', *self.deltas[:16]))
        buf.write(struct.pack('>4f', *self.body_ori_cmd[:4]))
        buf.write(struct.pack('>3f', *self.L_cmd[:3]))
        buf.write(struct.pack('>3f', *self.Ld_cmd[:3]))
        buf.write(struct.pack('>3f', *self.com_vel_cmd[:3]))
        buf.write(struct.pack('>3f', *self.com_pos_cmd[:3]))
        buf.write(struct.pack('>3f', *self.com_acc_cmd[:3]))
        buf.write(struct.pack('>3f', *self.com_pos[:3]))
        buf.write(struct.pack('>3f', *self.com_vel[:3]))
        buf.write(struct.pack('>4f', *self.body_ori[:4]))
        buf.write(struct.pack('>3f', *self.L[:3]))
        buf.write(struct.pack('>3f', *self.body_ang_vel[:3]))
        buf.write(struct.pack('>12f', *self.foot_pos_cmd[:12]))
        buf.write(struct.pack('>12f', *self.foot_vel_cmd[:12]))
        buf.write(struct.pack('>12f', *self.foot_acc_cmd[:12]))
        buf.write(struct.pack('>12f', *self.foot_acc_numeric[:12]))
        buf.write(struct.pack('>12f', *self.foot_pos[:12]))
        buf.write(struct.pack('>12f', *self.foot_vel[:12]))
        buf.write(struct.pack('>12f', *self.foot_local_pos[:12]))
        buf.write(struct.pack('>12f', *self.foot_local_vel[:12]))
        buf.write(struct.pack('>16f', *self.jpos_cmd[:16]))
        buf.write(struct.pack('>16f', *self.jvel_cmd[:16]))
        buf.write(struct.pack('>16f', *self.jacc_cmd[:16]))
        buf.write(struct.pack('>16f', *self.jpos[:16]))
        buf.write(struct.pack('>16f', *self.jvel[:16]))
        buf.write(struct.pack('>3f', *self.rpy[:3]))
        buf.write(struct.pack('>3f', *self.v_des_robot[:3]))
        buf.write(struct.pack(">ff", self.yaw_des, self.yaw_turn_rate))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != wbc_VILR_test_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return wbc_VILR_test_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = wbc_VILR_test_data_lcmt()
        self.contact_est = struct.unpack('>4i', buf.read(16))
        self.Wr_des = struct.unpack('>10f', buf.read(40))
        self.Wr = struct.unpack('>10f', buf.read(40))
        self.Wr_est = struct.unpack('>10f', buf.read(40))
        self.deltas = struct.unpack('>16f', buf.read(64))
        self.body_ori_cmd = struct.unpack('>4f', buf.read(16))
        self.L_cmd = struct.unpack('>3f', buf.read(12))
        self.Ld_cmd = struct.unpack('>3f', buf.read(12))
        self.com_vel_cmd = struct.unpack('>3f', buf.read(12))
        self.com_pos_cmd = struct.unpack('>3f', buf.read(12))
        self.com_acc_cmd = struct.unpack('>3f', buf.read(12))
        self.com_pos = struct.unpack('>3f', buf.read(12))
        self.com_vel = struct.unpack('>3f', buf.read(12))
        self.body_ori = struct.unpack('>4f', buf.read(16))
        self.L = struct.unpack('>3f', buf.read(12))
        self.body_ang_vel = struct.unpack('>3f', buf.read(12))
        self.foot_pos_cmd = struct.unpack('>12f', buf.read(48))
        self.foot_vel_cmd = struct.unpack('>12f', buf.read(48))
        self.foot_acc_cmd = struct.unpack('>12f', buf.read(48))
        self.foot_acc_numeric = struct.unpack('>12f', buf.read(48))
        self.foot_pos = struct.unpack('>12f', buf.read(48))
        self.foot_vel = struct.unpack('>12f', buf.read(48))
        self.foot_local_pos = struct.unpack('>12f', buf.read(48))
        self.foot_local_vel = struct.unpack('>12f', buf.read(48))
        self.jpos_cmd = struct.unpack('>16f', buf.read(64))
        self.jvel_cmd = struct.unpack('>16f', buf.read(64))
        self.jacc_cmd = struct.unpack('>16f', buf.read(64))
        self.jpos = struct.unpack('>16f', buf.read(64))
        self.jvel = struct.unpack('>16f', buf.read(64))
        self.rpy = struct.unpack('>3f', buf.read(12))
        self.v_des_robot = struct.unpack('>3f', buf.read(12))
        self.yaw_des, self.yaw_turn_rate = struct.unpack(">ff", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if wbc_VILR_test_data_lcmt in parents: return 0
        tmphash = (0x73b5cd7835e138f9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if wbc_VILR_test_data_lcmt._packed_fingerprint is None:
            wbc_VILR_test_data_lcmt._packed_fingerprint = struct.pack(">Q", wbc_VILR_test_data_lcmt._get_hash_recursive([]))
        return wbc_VILR_test_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

