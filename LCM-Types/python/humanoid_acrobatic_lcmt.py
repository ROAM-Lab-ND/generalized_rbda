"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class humanoid_acrobatic_lcmt(object):
    __slots__ = ["time", "iter", "pbody_cmd", "vbody_cmd", "abody_cmd", "rpy_cmd", "omegaBody_cmd", "pcom_cmd", "vcom_cmd", "acom_cmd", "jpos_cmd", "jvel_cmd", "Fr_cmd", "pfoot_cmd", "contact_state", "pbody_est", "vbody_est", "rpy_est", "omegaBody_est", "pcom_est", "vcom_est", "jpos_est", "jvel_est", "pfoot_est"]

    __typenames__ = ["float", "int32_t", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, [3], [3], [3], [3], [3], [3], [3], [3], [18], [18], [12], [12], [4], [3], [3], [3], [3], [3], [3], [18], [18], [12]]

    def __init__(self):
        self.time = 0.0
        self.iter = 0
        self.pbody_cmd = [ 0.0 for dim0 in range(3) ]
        self.vbody_cmd = [ 0.0 for dim0 in range(3) ]
        self.abody_cmd = [ 0.0 for dim0 in range(3) ]
        self.rpy_cmd = [ 0.0 for dim0 in range(3) ]
        self.omegaBody_cmd = [ 0.0 for dim0 in range(3) ]
        self.pcom_cmd = [ 0.0 for dim0 in range(3) ]
        self.vcom_cmd = [ 0.0 for dim0 in range(3) ]
        self.acom_cmd = [ 0.0 for dim0 in range(3) ]
        self.jpos_cmd = [ 0.0 for dim0 in range(18) ]
        self.jvel_cmd = [ 0.0 for dim0 in range(18) ]
        self.Fr_cmd = [ 0.0 for dim0 in range(12) ]
        self.pfoot_cmd = [ 0.0 for dim0 in range(12) ]
        self.contact_state = [ 0.0 for dim0 in range(4) ]
        self.pbody_est = [ 0.0 for dim0 in range(3) ]
        self.vbody_est = [ 0.0 for dim0 in range(3) ]
        self.rpy_est = [ 0.0 for dim0 in range(3) ]
        self.omegaBody_est = [ 0.0 for dim0 in range(3) ]
        self.pcom_est = [ 0.0 for dim0 in range(3) ]
        self.vcom_est = [ 0.0 for dim0 in range(3) ]
        self.jpos_est = [ 0.0 for dim0 in range(18) ]
        self.jvel_est = [ 0.0 for dim0 in range(18) ]
        self.pfoot_est = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(humanoid_acrobatic_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">fi", self.time, self.iter))
        buf.write(struct.pack('>3f', *self.pbody_cmd[:3]))
        buf.write(struct.pack('>3f', *self.vbody_cmd[:3]))
        buf.write(struct.pack('>3f', *self.abody_cmd[:3]))
        buf.write(struct.pack('>3f', *self.rpy_cmd[:3]))
        buf.write(struct.pack('>3f', *self.omegaBody_cmd[:3]))
        buf.write(struct.pack('>3f', *self.pcom_cmd[:3]))
        buf.write(struct.pack('>3f', *self.vcom_cmd[:3]))
        buf.write(struct.pack('>3f', *self.acom_cmd[:3]))
        buf.write(struct.pack('>18f', *self.jpos_cmd[:18]))
        buf.write(struct.pack('>18f', *self.jvel_cmd[:18]))
        buf.write(struct.pack('>12f', *self.Fr_cmd[:12]))
        buf.write(struct.pack('>12f', *self.pfoot_cmd[:12]))
        buf.write(struct.pack('>4f', *self.contact_state[:4]))
        buf.write(struct.pack('>3f', *self.pbody_est[:3]))
        buf.write(struct.pack('>3f', *self.vbody_est[:3]))
        buf.write(struct.pack('>3f', *self.rpy_est[:3]))
        buf.write(struct.pack('>3f', *self.omegaBody_est[:3]))
        buf.write(struct.pack('>3f', *self.pcom_est[:3]))
        buf.write(struct.pack('>3f', *self.vcom_est[:3]))
        buf.write(struct.pack('>18f', *self.jpos_est[:18]))
        buf.write(struct.pack('>18f', *self.jvel_est[:18]))
        buf.write(struct.pack('>12f', *self.pfoot_est[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != humanoid_acrobatic_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return humanoid_acrobatic_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = humanoid_acrobatic_lcmt()
        self.time, self.iter = struct.unpack(">fi", buf.read(8))
        self.pbody_cmd = struct.unpack('>3f', buf.read(12))
        self.vbody_cmd = struct.unpack('>3f', buf.read(12))
        self.abody_cmd = struct.unpack('>3f', buf.read(12))
        self.rpy_cmd = struct.unpack('>3f', buf.read(12))
        self.omegaBody_cmd = struct.unpack('>3f', buf.read(12))
        self.pcom_cmd = struct.unpack('>3f', buf.read(12))
        self.vcom_cmd = struct.unpack('>3f', buf.read(12))
        self.acom_cmd = struct.unpack('>3f', buf.read(12))
        self.jpos_cmd = struct.unpack('>18f', buf.read(72))
        self.jvel_cmd = struct.unpack('>18f', buf.read(72))
        self.Fr_cmd = struct.unpack('>12f', buf.read(48))
        self.pfoot_cmd = struct.unpack('>12f', buf.read(48))
        self.contact_state = struct.unpack('>4f', buf.read(16))
        self.pbody_est = struct.unpack('>3f', buf.read(12))
        self.vbody_est = struct.unpack('>3f', buf.read(12))
        self.rpy_est = struct.unpack('>3f', buf.read(12))
        self.omegaBody_est = struct.unpack('>3f', buf.read(12))
        self.pcom_est = struct.unpack('>3f', buf.read(12))
        self.vcom_est = struct.unpack('>3f', buf.read(12))
        self.jpos_est = struct.unpack('>18f', buf.read(72))
        self.jvel_est = struct.unpack('>18f', buf.read(72))
        self.pfoot_est = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if humanoid_acrobatic_lcmt in parents: return 0
        tmphash = (0xc72c14ddbc40bc23) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if humanoid_acrobatic_lcmt._packed_fingerprint is None:
            humanoid_acrobatic_lcmt._packed_fingerprint = struct.pack(">Q", humanoid_acrobatic_lcmt._get_hash_recursive([]))
        return humanoid_acrobatic_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

