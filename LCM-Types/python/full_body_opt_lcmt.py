"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class full_body_opt_lcmt(object):
    __slots__ = ["qfb_des", "vfb_des", "q_des", "qd_des", "tau_ff", "qfb", "vfb", "q", "qd", "tauEst", "tauAct"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[6], [6], [12], [12], [12], [6], [6], [12], [12], [12], [12]]

    def __init__(self):
        self.qfb_des = [ 0.0 for dim0 in range(6) ]
        self.vfb_des = [ 0.0 for dim0 in range(6) ]
        self.q_des = [ 0.0 for dim0 in range(12) ]
        self.qd_des = [ 0.0 for dim0 in range(12) ]
        self.tau_ff = [ 0.0 for dim0 in range(12) ]
        self.qfb = [ 0.0 for dim0 in range(6) ]
        self.vfb = [ 0.0 for dim0 in range(6) ]
        self.q = [ 0.0 for dim0 in range(12) ]
        self.qd = [ 0.0 for dim0 in range(12) ]
        self.tauEst = [ 0.0 for dim0 in range(12) ]
        self.tauAct = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(full_body_opt_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>6f', *self.qfb_des[:6]))
        buf.write(struct.pack('>6f', *self.vfb_des[:6]))
        buf.write(struct.pack('>12f', *self.q_des[:12]))
        buf.write(struct.pack('>12f', *self.qd_des[:12]))
        buf.write(struct.pack('>12f', *self.tau_ff[:12]))
        buf.write(struct.pack('>6f', *self.qfb[:6]))
        buf.write(struct.pack('>6f', *self.vfb[:6]))
        buf.write(struct.pack('>12f', *self.q[:12]))
        buf.write(struct.pack('>12f', *self.qd[:12]))
        buf.write(struct.pack('>12f', *self.tauEst[:12]))
        buf.write(struct.pack('>12f', *self.tauAct[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != full_body_opt_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return full_body_opt_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = full_body_opt_lcmt()
        self.qfb_des = struct.unpack('>6f', buf.read(24))
        self.vfb_des = struct.unpack('>6f', buf.read(24))
        self.q_des = struct.unpack('>12f', buf.read(48))
        self.qd_des = struct.unpack('>12f', buf.read(48))
        self.tau_ff = struct.unpack('>12f', buf.read(48))
        self.qfb = struct.unpack('>6f', buf.read(24))
        self.vfb = struct.unpack('>6f', buf.read(24))
        self.q = struct.unpack('>12f', buf.read(48))
        self.qd = struct.unpack('>12f', buf.read(48))
        self.tauEst = struct.unpack('>12f', buf.read(48))
        self.tauAct = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if full_body_opt_lcmt in parents: return 0
        tmphash = (0x681b4539430182c8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if full_body_opt_lcmt._packed_fingerprint is None:
            full_body_opt_lcmt._packed_fingerprint = struct.pack(">Q", full_body_opt_lcmt._get_hash_recursive([]))
        return full_body_opt_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

