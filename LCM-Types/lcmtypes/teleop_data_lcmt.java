/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class teleop_data_lcmt implements lcm.lcm.LCMEncodable
{
    public float q_base[];
    public float q_shoulderx[];
    public float q_shouldery[];
    public float q_elbow[];
    public float q_wristpitch[];
    public float q_wristroll[];
    public float q_gripper[];
    public float qd_base[];
    public float qd_shoulderx[];
    public float qd_shouldery[];
    public float qd_elbow[];
    public float qd_wristpitch[];
    public float qd_wristroll[];
    public float qd_gripper[];
    public int flags[];
    public int spi_driver_status;
 
    public teleop_data_lcmt()
    {
        q_base = new float[1];
        q_shoulderx = new float[1];
        q_shouldery = new float[1];
        q_elbow = new float[1];
        q_wristpitch = new float[1];
        q_wristroll = new float[1];
        q_gripper = new float[1];
        qd_base = new float[1];
        qd_shoulderx = new float[1];
        qd_shouldery = new float[1];
        qd_elbow = new float[1];
        qd_wristpitch = new float[1];
        qd_wristroll = new float[1];
        qd_gripper = new float[1];
        flags = new int[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xfaabae874779b89cL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.teleop_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.teleop_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.q_base[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.q_shoulderx[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.q_shouldery[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.q_elbow[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.q_wristpitch[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.q_wristroll[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.q_gripper[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.qd_base[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.qd_shoulderx[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.qd_shouldery[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.qd_elbow[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.qd_wristpitch[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.qd_wristroll[a]); 
        }
 
        for (int a = 0; a < 1; a++) {
            outs.writeFloat(this.qd_gripper[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeInt(this.flags[a]); 
        }
 
        outs.writeInt(this.spi_driver_status); 
 
    }
 
    public teleop_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public teleop_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.teleop_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.teleop_data_lcmt o = new lcmtypes.teleop_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.q_base = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.q_base[a] = ins.readFloat();
        }
 
        this.q_shoulderx = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.q_shoulderx[a] = ins.readFloat();
        }
 
        this.q_shouldery = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.q_shouldery[a] = ins.readFloat();
        }
 
        this.q_elbow = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.q_elbow[a] = ins.readFloat();
        }
 
        this.q_wristpitch = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.q_wristpitch[a] = ins.readFloat();
        }
 
        this.q_wristroll = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.q_wristroll[a] = ins.readFloat();
        }
 
        this.q_gripper = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.q_gripper[a] = ins.readFloat();
        }
 
        this.qd_base = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.qd_base[a] = ins.readFloat();
        }
 
        this.qd_shoulderx = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.qd_shoulderx[a] = ins.readFloat();
        }
 
        this.qd_shouldery = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.qd_shouldery[a] = ins.readFloat();
        }
 
        this.qd_elbow = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.qd_elbow[a] = ins.readFloat();
        }
 
        this.qd_wristpitch = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.qd_wristpitch[a] = ins.readFloat();
        }
 
        this.qd_wristroll = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.qd_wristroll[a] = ins.readFloat();
        }
 
        this.qd_gripper = new float[(int) 1];
        for (int a = 0; a < 1; a++) {
            this.qd_gripper[a] = ins.readFloat();
        }
 
        this.flags = new int[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.flags[a] = ins.readInt();
        }
 
        this.spi_driver_status = ins.readInt();
 
    }
 
    public lcmtypes.teleop_data_lcmt copy()
    {
        lcmtypes.teleop_data_lcmt outobj = new lcmtypes.teleop_data_lcmt();
        outobj.q_base = new float[(int) 1];
        System.arraycopy(this.q_base, 0, outobj.q_base, 0, 1); 
        outobj.q_shoulderx = new float[(int) 1];
        System.arraycopy(this.q_shoulderx, 0, outobj.q_shoulderx, 0, 1); 
        outobj.q_shouldery = new float[(int) 1];
        System.arraycopy(this.q_shouldery, 0, outobj.q_shouldery, 0, 1); 
        outobj.q_elbow = new float[(int) 1];
        System.arraycopy(this.q_elbow, 0, outobj.q_elbow, 0, 1); 
        outobj.q_wristpitch = new float[(int) 1];
        System.arraycopy(this.q_wristpitch, 0, outobj.q_wristpitch, 0, 1); 
        outobj.q_wristroll = new float[(int) 1];
        System.arraycopy(this.q_wristroll, 0, outobj.q_wristroll, 0, 1); 
        outobj.q_gripper = new float[(int) 1];
        System.arraycopy(this.q_gripper, 0, outobj.q_gripper, 0, 1); 
        outobj.qd_base = new float[(int) 1];
        System.arraycopy(this.qd_base, 0, outobj.qd_base, 0, 1); 
        outobj.qd_shoulderx = new float[(int) 1];
        System.arraycopy(this.qd_shoulderx, 0, outobj.qd_shoulderx, 0, 1); 
        outobj.qd_shouldery = new float[(int) 1];
        System.arraycopy(this.qd_shouldery, 0, outobj.qd_shouldery, 0, 1); 
        outobj.qd_elbow = new float[(int) 1];
        System.arraycopy(this.qd_elbow, 0, outobj.qd_elbow, 0, 1); 
        outobj.qd_wristpitch = new float[(int) 1];
        System.arraycopy(this.qd_wristpitch, 0, outobj.qd_wristpitch, 0, 1); 
        outobj.qd_wristroll = new float[(int) 1];
        System.arraycopy(this.qd_wristroll, 0, outobj.qd_wristroll, 0, 1); 
        outobj.qd_gripper = new float[(int) 1];
        System.arraycopy(this.qd_gripper, 0, outobj.qd_gripper, 0, 1); 
        outobj.flags = new int[(int) 4];
        System.arraycopy(this.flags, 0, outobj.flags, 0, 4); 
        outobj.spi_driver_status = this.spi_driver_status;
 
        return outobj;
    }
 
}

