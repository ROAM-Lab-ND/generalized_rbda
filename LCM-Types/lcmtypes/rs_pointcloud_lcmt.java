/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class rs_pointcloud_lcmt implements lcm.lcm.LCMEncodable
{
    public float pointlist[][];
    public int num_valid_points;
 
    public rs_pointcloud_lcmt()
    {
        pointlist = new float[5001][3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x945096be3fd57503L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.rs_pointcloud_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.rs_pointcloud_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 5001; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeFloat(this.pointlist[a][b]); 
            }
        }
 
        outs.writeInt(this.num_valid_points); 
 
    }
 
    public rs_pointcloud_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public rs_pointcloud_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.rs_pointcloud_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.rs_pointcloud_lcmt o = new lcmtypes.rs_pointcloud_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.pointlist = new float[(int) 5001][(int) 3];
        for (int a = 0; a < 5001; a++) {
            for (int b = 0; b < 3; b++) {
                this.pointlist[a][b] = ins.readFloat();
            }
        }
 
        this.num_valid_points = ins.readInt();
 
    }
 
    public lcmtypes.rs_pointcloud_lcmt copy()
    {
        lcmtypes.rs_pointcloud_lcmt outobj = new lcmtypes.rs_pointcloud_lcmt();
        outobj.pointlist = new float[(int) 5001][(int) 3];
        for (int a = 0; a < 5001; a++) {
            System.arraycopy(this.pointlist[a], 0, outobj.pointlist[a], 0, 3);        }
 
        outobj.num_valid_points = this.num_valid_points;
 
        return outobj;
    }
 
}

