/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class wbc_VILR_test_data_lcmt implements lcm.lcm.LCMEncodable
{
    public int contact_est[];
    public float Wr_des[];
    public float Wr[];
    public float Wr_est[];
    public float deltas[];
    public float body_ori_cmd[];
    public float L_cmd[];
    public float Ld_cmd[];
    public float com_vel_cmd[];
    public float com_pos_cmd[];
    public float com_acc_cmd[];
    public float com_pos[];
    public float com_vel[];
    public float body_ori[];
    public float L[];
    public float body_ang_vel[];
    public float foot_pos_cmd[];
    public float foot_vel_cmd[];
    public float foot_acc_cmd[];
    public float foot_acc_numeric[];
    public float foot_pos[];
    public float foot_vel[];
    public float foot_local_pos[];
    public float foot_local_vel[];
    public float jpos_cmd[];
    public float jvel_cmd[];
    public float jacc_cmd[];
    public float jpos[];
    public float jvel[];
    public float rpy[];
    public float v_des_robot[];
    public float yaw_des;
    public float yaw_turn_rate;
 
    public wbc_VILR_test_data_lcmt()
    {
        contact_est = new int[4];
        Wr_des = new float[10];
        Wr = new float[10];
        Wr_est = new float[10];
        deltas = new float[16];
        body_ori_cmd = new float[4];
        L_cmd = new float[3];
        Ld_cmd = new float[3];
        com_vel_cmd = new float[3];
        com_pos_cmd = new float[3];
        com_acc_cmd = new float[3];
        com_pos = new float[3];
        com_vel = new float[3];
        body_ori = new float[4];
        L = new float[3];
        body_ang_vel = new float[3];
        foot_pos_cmd = new float[12];
        foot_vel_cmd = new float[12];
        foot_acc_cmd = new float[12];
        foot_acc_numeric = new float[12];
        foot_pos = new float[12];
        foot_vel = new float[12];
        foot_local_pos = new float[12];
        foot_local_vel = new float[12];
        jpos_cmd = new float[16];
        jvel_cmd = new float[16];
        jacc_cmd = new float[16];
        jpos = new float[16];
        jvel = new float[16];
        rpy = new float[3];
        v_des_robot = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x73b5cd7835e138f9L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.wbc_VILR_test_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.wbc_VILR_test_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 4; a++) {
            outs.writeInt(this.contact_est[a]); 
        }
 
        for (int a = 0; a < 10; a++) {
            outs.writeFloat(this.Wr_des[a]); 
        }
 
        for (int a = 0; a < 10; a++) {
            outs.writeFloat(this.Wr[a]); 
        }
 
        for (int a = 0; a < 10; a++) {
            outs.writeFloat(this.Wr_est[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.deltas[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.body_ori_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.L_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.Ld_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.com_vel_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.com_pos_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.com_acc_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.com_pos[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.com_vel[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.body_ori[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.L[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.body_ang_vel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_pos_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_vel_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_acc_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_acc_numeric[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_pos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_vel[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_local_pos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.foot_local_vel[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.jpos_cmd[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.jvel_cmd[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.jacc_cmd[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.jpos[a]); 
        }
 
        for (int a = 0; a < 16; a++) {
            outs.writeFloat(this.jvel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpy[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.v_des_robot[a]); 
        }
 
        outs.writeFloat(this.yaw_des); 
 
        outs.writeFloat(this.yaw_turn_rate); 
 
    }
 
    public wbc_VILR_test_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public wbc_VILR_test_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.wbc_VILR_test_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.wbc_VILR_test_data_lcmt o = new lcmtypes.wbc_VILR_test_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.contact_est = new int[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.contact_est[a] = ins.readInt();
        }
 
        this.Wr_des = new float[(int) 10];
        for (int a = 0; a < 10; a++) {
            this.Wr_des[a] = ins.readFloat();
        }
 
        this.Wr = new float[(int) 10];
        for (int a = 0; a < 10; a++) {
            this.Wr[a] = ins.readFloat();
        }
 
        this.Wr_est = new float[(int) 10];
        for (int a = 0; a < 10; a++) {
            this.Wr_est[a] = ins.readFloat();
        }
 
        this.deltas = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.deltas[a] = ins.readFloat();
        }
 
        this.body_ori_cmd = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.body_ori_cmd[a] = ins.readFloat();
        }
 
        this.L_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.L_cmd[a] = ins.readFloat();
        }
 
        this.Ld_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Ld_cmd[a] = ins.readFloat();
        }
 
        this.com_vel_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.com_vel_cmd[a] = ins.readFloat();
        }
 
        this.com_pos_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.com_pos_cmd[a] = ins.readFloat();
        }
 
        this.com_acc_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.com_acc_cmd[a] = ins.readFloat();
        }
 
        this.com_pos = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.com_pos[a] = ins.readFloat();
        }
 
        this.com_vel = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.com_vel[a] = ins.readFloat();
        }
 
        this.body_ori = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.body_ori[a] = ins.readFloat();
        }
 
        this.L = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.L[a] = ins.readFloat();
        }
 
        this.body_ang_vel = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.body_ang_vel[a] = ins.readFloat();
        }
 
        this.foot_pos_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_pos_cmd[a] = ins.readFloat();
        }
 
        this.foot_vel_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_vel_cmd[a] = ins.readFloat();
        }
 
        this.foot_acc_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_acc_cmd[a] = ins.readFloat();
        }
 
        this.foot_acc_numeric = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_acc_numeric[a] = ins.readFloat();
        }
 
        this.foot_pos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_pos[a] = ins.readFloat();
        }
 
        this.foot_vel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_vel[a] = ins.readFloat();
        }
 
        this.foot_local_pos = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_local_pos[a] = ins.readFloat();
        }
 
        this.foot_local_vel = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_local_vel[a] = ins.readFloat();
        }
 
        this.jpos_cmd = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.jpos_cmd[a] = ins.readFloat();
        }
 
        this.jvel_cmd = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.jvel_cmd[a] = ins.readFloat();
        }
 
        this.jacc_cmd = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.jacc_cmd[a] = ins.readFloat();
        }
 
        this.jpos = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.jpos[a] = ins.readFloat();
        }
 
        this.jvel = new float[(int) 16];
        for (int a = 0; a < 16; a++) {
            this.jvel[a] = ins.readFloat();
        }
 
        this.rpy = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy[a] = ins.readFloat();
        }
 
        this.v_des_robot = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.v_des_robot[a] = ins.readFloat();
        }
 
        this.yaw_des = ins.readFloat();
 
        this.yaw_turn_rate = ins.readFloat();
 
    }
 
    public lcmtypes.wbc_VILR_test_data_lcmt copy()
    {
        lcmtypes.wbc_VILR_test_data_lcmt outobj = new lcmtypes.wbc_VILR_test_data_lcmt();
        outobj.contact_est = new int[(int) 4];
        System.arraycopy(this.contact_est, 0, outobj.contact_est, 0, 4); 
        outobj.Wr_des = new float[(int) 10];
        System.arraycopy(this.Wr_des, 0, outobj.Wr_des, 0, 10); 
        outobj.Wr = new float[(int) 10];
        System.arraycopy(this.Wr, 0, outobj.Wr, 0, 10); 
        outobj.Wr_est = new float[(int) 10];
        System.arraycopy(this.Wr_est, 0, outobj.Wr_est, 0, 10); 
        outobj.deltas = new float[(int) 16];
        System.arraycopy(this.deltas, 0, outobj.deltas, 0, 16); 
        outobj.body_ori_cmd = new float[(int) 4];
        System.arraycopy(this.body_ori_cmd, 0, outobj.body_ori_cmd, 0, 4); 
        outobj.L_cmd = new float[(int) 3];
        System.arraycopy(this.L_cmd, 0, outobj.L_cmd, 0, 3); 
        outobj.Ld_cmd = new float[(int) 3];
        System.arraycopy(this.Ld_cmd, 0, outobj.Ld_cmd, 0, 3); 
        outobj.com_vel_cmd = new float[(int) 3];
        System.arraycopy(this.com_vel_cmd, 0, outobj.com_vel_cmd, 0, 3); 
        outobj.com_pos_cmd = new float[(int) 3];
        System.arraycopy(this.com_pos_cmd, 0, outobj.com_pos_cmd, 0, 3); 
        outobj.com_acc_cmd = new float[(int) 3];
        System.arraycopy(this.com_acc_cmd, 0, outobj.com_acc_cmd, 0, 3); 
        outobj.com_pos = new float[(int) 3];
        System.arraycopy(this.com_pos, 0, outobj.com_pos, 0, 3); 
        outobj.com_vel = new float[(int) 3];
        System.arraycopy(this.com_vel, 0, outobj.com_vel, 0, 3); 
        outobj.body_ori = new float[(int) 4];
        System.arraycopy(this.body_ori, 0, outobj.body_ori, 0, 4); 
        outobj.L = new float[(int) 3];
        System.arraycopy(this.L, 0, outobj.L, 0, 3); 
        outobj.body_ang_vel = new float[(int) 3];
        System.arraycopy(this.body_ang_vel, 0, outobj.body_ang_vel, 0, 3); 
        outobj.foot_pos_cmd = new float[(int) 12];
        System.arraycopy(this.foot_pos_cmd, 0, outobj.foot_pos_cmd, 0, 12); 
        outobj.foot_vel_cmd = new float[(int) 12];
        System.arraycopy(this.foot_vel_cmd, 0, outobj.foot_vel_cmd, 0, 12); 
        outobj.foot_acc_cmd = new float[(int) 12];
        System.arraycopy(this.foot_acc_cmd, 0, outobj.foot_acc_cmd, 0, 12); 
        outobj.foot_acc_numeric = new float[(int) 12];
        System.arraycopy(this.foot_acc_numeric, 0, outobj.foot_acc_numeric, 0, 12); 
        outobj.foot_pos = new float[(int) 12];
        System.arraycopy(this.foot_pos, 0, outobj.foot_pos, 0, 12); 
        outobj.foot_vel = new float[(int) 12];
        System.arraycopy(this.foot_vel, 0, outobj.foot_vel, 0, 12); 
        outobj.foot_local_pos = new float[(int) 12];
        System.arraycopy(this.foot_local_pos, 0, outobj.foot_local_pos, 0, 12); 
        outobj.foot_local_vel = new float[(int) 12];
        System.arraycopy(this.foot_local_vel, 0, outobj.foot_local_vel, 0, 12); 
        outobj.jpos_cmd = new float[(int) 16];
        System.arraycopy(this.jpos_cmd, 0, outobj.jpos_cmd, 0, 16); 
        outobj.jvel_cmd = new float[(int) 16];
        System.arraycopy(this.jvel_cmd, 0, outobj.jvel_cmd, 0, 16); 
        outobj.jacc_cmd = new float[(int) 16];
        System.arraycopy(this.jacc_cmd, 0, outobj.jacc_cmd, 0, 16); 
        outobj.jpos = new float[(int) 16];
        System.arraycopy(this.jpos, 0, outobj.jpos, 0, 16); 
        outobj.jvel = new float[(int) 16];
        System.arraycopy(this.jvel, 0, outobj.jvel, 0, 16); 
        outobj.rpy = new float[(int) 3];
        System.arraycopy(this.rpy, 0, outobj.rpy, 0, 3); 
        outobj.v_des_robot = new float[(int) 3];
        System.arraycopy(this.v_des_robot, 0, outobj.v_des_robot, 0, 3); 
        outobj.yaw_des = this.yaw_des;
 
        outobj.yaw_turn_rate = this.yaw_turn_rate;
 
        return outobj;
    }
 
}

