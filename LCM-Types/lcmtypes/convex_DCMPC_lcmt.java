/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class convex_DCMPC_lcmt implements lcm.lcm.LCMEncodable
{
    public float X_guess[];
    public float Xref[];
    public float Uref[];
    public float cs[];
    public float dt[];
    public float r[];
    public float psi;
    public float q_min[];
    public float q_max[];
    public float qd_min[];
    public float qd_max[];
    public float q_init[];
    public float qd_init[];
    public float mu;
    public float fmax;
    public float mass;
    public float Ib[];
    public float Ib_inv[];
    public float g;
    public float Q[];
    public float R[];
    public float X[];
    public float U[];
 
    public convex_DCMPC_lcmt()
    {
        X_guess = new float[252];
        Xref = new float[132];
        Uref = new float[120];
        cs = new float[40];
        dt = new float[10];
        r = new float[12];
        q_min = new float[6];
        q_max = new float[6];
        qd_min = new float[6];
        qd_max = new float[6];
        q_init = new float[6];
        qd_init = new float[6];
        Ib = new float[3];
        Ib_inv = new float[3];
        Q = new float[12];
        R = new float[12];
        X = new float[132];
        U = new float[120];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x02729437cbf038bfL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.convex_DCMPC_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.convex_DCMPC_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 252; a++) {
            outs.writeFloat(this.X_guess[a]); 
        }
 
        for (int a = 0; a < 132; a++) {
            outs.writeFloat(this.Xref[a]); 
        }
 
        for (int a = 0; a < 120; a++) {
            outs.writeFloat(this.Uref[a]); 
        }
 
        for (int a = 0; a < 40; a++) {
            outs.writeFloat(this.cs[a]); 
        }
 
        for (int a = 0; a < 10; a++) {
            outs.writeFloat(this.dt[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.r[a]); 
        }
 
        outs.writeFloat(this.psi); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.q_min[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.q_max[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.qd_min[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.qd_max[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.q_init[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.qd_init[a]); 
        }
 
        outs.writeFloat(this.mu); 
 
        outs.writeFloat(this.fmax); 
 
        outs.writeFloat(this.mass); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.Ib[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.Ib_inv[a]); 
        }
 
        outs.writeFloat(this.g); 
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.Q[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.R[a]); 
        }
 
        for (int a = 0; a < 132; a++) {
            outs.writeFloat(this.X[a]); 
        }
 
        for (int a = 0; a < 120; a++) {
            outs.writeFloat(this.U[a]); 
        }
 
    }
 
    public convex_DCMPC_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public convex_DCMPC_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.convex_DCMPC_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.convex_DCMPC_lcmt o = new lcmtypes.convex_DCMPC_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.X_guess = new float[(int) 252];
        for (int a = 0; a < 252; a++) {
            this.X_guess[a] = ins.readFloat();
        }
 
        this.Xref = new float[(int) 132];
        for (int a = 0; a < 132; a++) {
            this.Xref[a] = ins.readFloat();
        }
 
        this.Uref = new float[(int) 120];
        for (int a = 0; a < 120; a++) {
            this.Uref[a] = ins.readFloat();
        }
 
        this.cs = new float[(int) 40];
        for (int a = 0; a < 40; a++) {
            this.cs[a] = ins.readFloat();
        }
 
        this.dt = new float[(int) 10];
        for (int a = 0; a < 10; a++) {
            this.dt[a] = ins.readFloat();
        }
 
        this.r = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.r[a] = ins.readFloat();
        }
 
        this.psi = ins.readFloat();
 
        this.q_min = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.q_min[a] = ins.readFloat();
        }
 
        this.q_max = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.q_max[a] = ins.readFloat();
        }
 
        this.qd_min = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.qd_min[a] = ins.readFloat();
        }
 
        this.qd_max = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.qd_max[a] = ins.readFloat();
        }
 
        this.q_init = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.q_init[a] = ins.readFloat();
        }
 
        this.qd_init = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.qd_init[a] = ins.readFloat();
        }
 
        this.mu = ins.readFloat();
 
        this.fmax = ins.readFloat();
 
        this.mass = ins.readFloat();
 
        this.Ib = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Ib[a] = ins.readFloat();
        }
 
        this.Ib_inv = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Ib_inv[a] = ins.readFloat();
        }
 
        this.g = ins.readFloat();
 
        this.Q = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.Q[a] = ins.readFloat();
        }
 
        this.R = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.R[a] = ins.readFloat();
        }
 
        this.X = new float[(int) 132];
        for (int a = 0; a < 132; a++) {
            this.X[a] = ins.readFloat();
        }
 
        this.U = new float[(int) 120];
        for (int a = 0; a < 120; a++) {
            this.U[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.convex_DCMPC_lcmt copy()
    {
        lcmtypes.convex_DCMPC_lcmt outobj = new lcmtypes.convex_DCMPC_lcmt();
        outobj.X_guess = new float[(int) 252];
        System.arraycopy(this.X_guess, 0, outobj.X_guess, 0, 252); 
        outobj.Xref = new float[(int) 132];
        System.arraycopy(this.Xref, 0, outobj.Xref, 0, 132); 
        outobj.Uref = new float[(int) 120];
        System.arraycopy(this.Uref, 0, outobj.Uref, 0, 120); 
        outobj.cs = new float[(int) 40];
        System.arraycopy(this.cs, 0, outobj.cs, 0, 40); 
        outobj.dt = new float[(int) 10];
        System.arraycopy(this.dt, 0, outobj.dt, 0, 10); 
        outobj.r = new float[(int) 12];
        System.arraycopy(this.r, 0, outobj.r, 0, 12); 
        outobj.psi = this.psi;
 
        outobj.q_min = new float[(int) 6];
        System.arraycopy(this.q_min, 0, outobj.q_min, 0, 6); 
        outobj.q_max = new float[(int) 6];
        System.arraycopy(this.q_max, 0, outobj.q_max, 0, 6); 
        outobj.qd_min = new float[(int) 6];
        System.arraycopy(this.qd_min, 0, outobj.qd_min, 0, 6); 
        outobj.qd_max = new float[(int) 6];
        System.arraycopy(this.qd_max, 0, outobj.qd_max, 0, 6); 
        outobj.q_init = new float[(int) 6];
        System.arraycopy(this.q_init, 0, outobj.q_init, 0, 6); 
        outobj.qd_init = new float[(int) 6];
        System.arraycopy(this.qd_init, 0, outobj.qd_init, 0, 6); 
        outobj.mu = this.mu;
 
        outobj.fmax = this.fmax;
 
        outobj.mass = this.mass;
 
        outobj.Ib = new float[(int) 3];
        System.arraycopy(this.Ib, 0, outobj.Ib, 0, 3); 
        outobj.Ib_inv = new float[(int) 3];
        System.arraycopy(this.Ib_inv, 0, outobj.Ib_inv, 0, 3); 
        outobj.g = this.g;
 
        outobj.Q = new float[(int) 12];
        System.arraycopy(this.Q, 0, outobj.Q, 0, 12); 
        outobj.R = new float[(int) 12];
        System.arraycopy(this.R, 0, outobj.R, 0, 12); 
        outobj.X = new float[(int) 132];
        System.arraycopy(this.X, 0, outobj.X, 0, 132); 
        outobj.U = new float[(int) 120];
        System.arraycopy(this.U, 0, outobj.U, 0, 120); 
        return outobj;
    }
 
}

