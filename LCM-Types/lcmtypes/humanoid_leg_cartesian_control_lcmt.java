/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class humanoid_leg_cartesian_control_lcmt implements lcm.lcm.LCMEncodable
{
    public float pcom[];
    public float pFootRightCurr[];
    public float pFootLeftCurr[];
    public float vFootRightCurr[];
    public float vFootLeftCurr[];
    public float pFootRightLand[];
    public float pFootLeftLand[];
    public float footForceRight[];
    public float footForceLeft[];
    public float legTorqueRight[];
    public float legTorqueLeft[];
 
    public humanoid_leg_cartesian_control_lcmt()
    {
        pcom = new float[3];
        pFootRightCurr = new float[3];
        pFootLeftCurr = new float[3];
        vFootRightCurr = new float[3];
        vFootLeftCurr = new float[3];
        pFootRightLand = new float[3];
        pFootLeftLand = new float[3];
        footForceRight = new float[3];
        footForceLeft = new float[3];
        legTorqueRight = new float[5];
        legTorqueLeft = new float[5];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xa78fc920bee9c719L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.humanoid_leg_cartesian_control_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.humanoid_leg_cartesian_control_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pcom[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pFootRightCurr[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pFootLeftCurr[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vFootRightCurr[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vFootLeftCurr[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pFootRightLand[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pFootLeftLand[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.footForceRight[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.footForceLeft[a]); 
        }
 
        for (int a = 0; a < 5; a++) {
            outs.writeFloat(this.legTorqueRight[a]); 
        }
 
        for (int a = 0; a < 5; a++) {
            outs.writeFloat(this.legTorqueLeft[a]); 
        }
 
    }
 
    public humanoid_leg_cartesian_control_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public humanoid_leg_cartesian_control_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.humanoid_leg_cartesian_control_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.humanoid_leg_cartesian_control_lcmt o = new lcmtypes.humanoid_leg_cartesian_control_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.pcom = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pcom[a] = ins.readFloat();
        }
 
        this.pFootRightCurr = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pFootRightCurr[a] = ins.readFloat();
        }
 
        this.pFootLeftCurr = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pFootLeftCurr[a] = ins.readFloat();
        }
 
        this.vFootRightCurr = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vFootRightCurr[a] = ins.readFloat();
        }
 
        this.vFootLeftCurr = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vFootLeftCurr[a] = ins.readFloat();
        }
 
        this.pFootRightLand = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pFootRightLand[a] = ins.readFloat();
        }
 
        this.pFootLeftLand = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pFootLeftLand[a] = ins.readFloat();
        }
 
        this.footForceRight = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.footForceRight[a] = ins.readFloat();
        }
 
        this.footForceLeft = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.footForceLeft[a] = ins.readFloat();
        }
 
        this.legTorqueRight = new float[(int) 5];
        for (int a = 0; a < 5; a++) {
            this.legTorqueRight[a] = ins.readFloat();
        }
 
        this.legTorqueLeft = new float[(int) 5];
        for (int a = 0; a < 5; a++) {
            this.legTorqueLeft[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.humanoid_leg_cartesian_control_lcmt copy()
    {
        lcmtypes.humanoid_leg_cartesian_control_lcmt outobj = new lcmtypes.humanoid_leg_cartesian_control_lcmt();
        outobj.pcom = new float[(int) 3];
        System.arraycopy(this.pcom, 0, outobj.pcom, 0, 3); 
        outobj.pFootRightCurr = new float[(int) 3];
        System.arraycopy(this.pFootRightCurr, 0, outobj.pFootRightCurr, 0, 3); 
        outobj.pFootLeftCurr = new float[(int) 3];
        System.arraycopy(this.pFootLeftCurr, 0, outobj.pFootLeftCurr, 0, 3); 
        outobj.vFootRightCurr = new float[(int) 3];
        System.arraycopy(this.vFootRightCurr, 0, outobj.vFootRightCurr, 0, 3); 
        outobj.vFootLeftCurr = new float[(int) 3];
        System.arraycopy(this.vFootLeftCurr, 0, outobj.vFootLeftCurr, 0, 3); 
        outobj.pFootRightLand = new float[(int) 3];
        System.arraycopy(this.pFootRightLand, 0, outobj.pFootRightLand, 0, 3); 
        outobj.pFootLeftLand = new float[(int) 3];
        System.arraycopy(this.pFootLeftLand, 0, outobj.pFootLeftLand, 0, 3); 
        outobj.footForceRight = new float[(int) 3];
        System.arraycopy(this.footForceRight, 0, outobj.footForceRight, 0, 3); 
        outobj.footForceLeft = new float[(int) 3];
        System.arraycopy(this.footForceLeft, 0, outobj.footForceLeft, 0, 3); 
        outobj.legTorqueRight = new float[(int) 5];
        System.arraycopy(this.legTorqueRight, 0, outobj.legTorqueRight, 0, 5); 
        outobj.legTorqueLeft = new float[(int) 5];
        System.arraycopy(this.legTorqueLeft, 0, outobj.legTorqueLeft, 0, 5); 
        return outobj;
    }
 
}

