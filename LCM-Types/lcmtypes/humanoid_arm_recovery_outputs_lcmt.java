/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class humanoid_arm_recovery_outputs_lcmt implements lcm.lcm.LCMEncodable
{
    public int optim_iter;
    public int opt_solved;
    public double cpu_opt_time_microseconds;
    public double t_sent;
    public double time_start;
    public double p_body[];
    public double rpy[];
    public double v_body[];
    public double omega_body[];
    public double c_toe[];
    public double c_heel[];
    public double f_toe[];
    public double f_heel[];
    public double r[];
    public double rdot[];
    public double rddot[];
    public double h[];
    public double hdot[];
    public double vG[];
    public double vGdot[];
    public double jpos[];
    public double jvel[];
    public double a_body[];
    public double alf_body[];
    public double jacc[];
    public double fb_dist[];
    public double iter_dist;
    public double vLimb[];
    public double contact_state[];
 
    public humanoid_arm_recovery_outputs_lcmt()
    {
        p_body = new double[3];
        rpy = new double[3];
        v_body = new double[3];
        omega_body = new double[3];
        c_toe = new double[6];
        c_heel = new double[6];
        f_toe = new double[6];
        f_heel = new double[6];
        r = new double[3];
        rdot = new double[3];
        rddot = new double[3];
        h = new double[6];
        hdot = new double[6];
        vG = new double[6];
        vGdot = new double[6];
        jpos = new double[18];
        jvel = new double[18];
        a_body = new double[3];
        alf_body = new double[3];
        jacc = new double[18];
        fb_dist = new double[6];
        vLimb = new double[12];
        contact_state = new double[6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xbb37a25edeaa3345L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.humanoid_arm_recovery_outputs_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.humanoid_arm_recovery_outputs_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.optim_iter); 
 
        outs.writeInt(this.opt_solved); 
 
        outs.writeDouble(this.cpu_opt_time_microseconds); 
 
        outs.writeDouble(this.t_sent); 
 
        outs.writeDouble(this.time_start); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.p_body[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.rpy[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.v_body[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.omega_body[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.c_toe[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.c_heel[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.f_toe[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.f_heel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.r[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.rdot[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.rddot[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.h[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.hdot[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.vG[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.vGdot[a]); 
        }
 
        for (int a = 0; a < 18; a++) {
            outs.writeDouble(this.jpos[a]); 
        }
 
        for (int a = 0; a < 18; a++) {
            outs.writeDouble(this.jvel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.a_body[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.alf_body[a]); 
        }
 
        for (int a = 0; a < 18; a++) {
            outs.writeDouble(this.jacc[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.fb_dist[a]); 
        }
 
        outs.writeDouble(this.iter_dist); 
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.vLimb[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.contact_state[a]); 
        }
 
    }
 
    public humanoid_arm_recovery_outputs_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public humanoid_arm_recovery_outputs_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.humanoid_arm_recovery_outputs_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.humanoid_arm_recovery_outputs_lcmt o = new lcmtypes.humanoid_arm_recovery_outputs_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.optim_iter = ins.readInt();
 
        this.opt_solved = ins.readInt();
 
        this.cpu_opt_time_microseconds = ins.readDouble();
 
        this.t_sent = ins.readDouble();
 
        this.time_start = ins.readDouble();
 
        this.p_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.p_body[a] = ins.readDouble();
        }
 
        this.rpy = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy[a] = ins.readDouble();
        }
 
        this.v_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.v_body[a] = ins.readDouble();
        }
 
        this.omega_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omega_body[a] = ins.readDouble();
        }
 
        this.c_toe = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.c_toe[a] = ins.readDouble();
        }
 
        this.c_heel = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.c_heel[a] = ins.readDouble();
        }
 
        this.f_toe = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.f_toe[a] = ins.readDouble();
        }
 
        this.f_heel = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.f_heel[a] = ins.readDouble();
        }
 
        this.r = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.r[a] = ins.readDouble();
        }
 
        this.rdot = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rdot[a] = ins.readDouble();
        }
 
        this.rddot = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rddot[a] = ins.readDouble();
        }
 
        this.h = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.h[a] = ins.readDouble();
        }
 
        this.hdot = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.hdot[a] = ins.readDouble();
        }
 
        this.vG = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.vG[a] = ins.readDouble();
        }
 
        this.vGdot = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.vGdot[a] = ins.readDouble();
        }
 
        this.jpos = new double[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.jpos[a] = ins.readDouble();
        }
 
        this.jvel = new double[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.jvel[a] = ins.readDouble();
        }
 
        this.a_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.a_body[a] = ins.readDouble();
        }
 
        this.alf_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.alf_body[a] = ins.readDouble();
        }
 
        this.jacc = new double[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.jacc[a] = ins.readDouble();
        }
 
        this.fb_dist = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.fb_dist[a] = ins.readDouble();
        }
 
        this.iter_dist = ins.readDouble();
 
        this.vLimb = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.vLimb[a] = ins.readDouble();
        }
 
        this.contact_state = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.contact_state[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.humanoid_arm_recovery_outputs_lcmt copy()
    {
        lcmtypes.humanoid_arm_recovery_outputs_lcmt outobj = new lcmtypes.humanoid_arm_recovery_outputs_lcmt();
        outobj.optim_iter = this.optim_iter;
 
        outobj.opt_solved = this.opt_solved;
 
        outobj.cpu_opt_time_microseconds = this.cpu_opt_time_microseconds;
 
        outobj.t_sent = this.t_sent;
 
        outobj.time_start = this.time_start;
 
        outobj.p_body = new double[(int) 3];
        System.arraycopy(this.p_body, 0, outobj.p_body, 0, 3); 
        outobj.rpy = new double[(int) 3];
        System.arraycopy(this.rpy, 0, outobj.rpy, 0, 3); 
        outobj.v_body = new double[(int) 3];
        System.arraycopy(this.v_body, 0, outobj.v_body, 0, 3); 
        outobj.omega_body = new double[(int) 3];
        System.arraycopy(this.omega_body, 0, outobj.omega_body, 0, 3); 
        outobj.c_toe = new double[(int) 6];
        System.arraycopy(this.c_toe, 0, outobj.c_toe, 0, 6); 
        outobj.c_heel = new double[(int) 6];
        System.arraycopy(this.c_heel, 0, outobj.c_heel, 0, 6); 
        outobj.f_toe = new double[(int) 6];
        System.arraycopy(this.f_toe, 0, outobj.f_toe, 0, 6); 
        outobj.f_heel = new double[(int) 6];
        System.arraycopy(this.f_heel, 0, outobj.f_heel, 0, 6); 
        outobj.r = new double[(int) 3];
        System.arraycopy(this.r, 0, outobj.r, 0, 3); 
        outobj.rdot = new double[(int) 3];
        System.arraycopy(this.rdot, 0, outobj.rdot, 0, 3); 
        outobj.rddot = new double[(int) 3];
        System.arraycopy(this.rddot, 0, outobj.rddot, 0, 3); 
        outobj.h = new double[(int) 6];
        System.arraycopy(this.h, 0, outobj.h, 0, 6); 
        outobj.hdot = new double[(int) 6];
        System.arraycopy(this.hdot, 0, outobj.hdot, 0, 6); 
        outobj.vG = new double[(int) 6];
        System.arraycopy(this.vG, 0, outobj.vG, 0, 6); 
        outobj.vGdot = new double[(int) 6];
        System.arraycopy(this.vGdot, 0, outobj.vGdot, 0, 6); 
        outobj.jpos = new double[(int) 18];
        System.arraycopy(this.jpos, 0, outobj.jpos, 0, 18); 
        outobj.jvel = new double[(int) 18];
        System.arraycopy(this.jvel, 0, outobj.jvel, 0, 18); 
        outobj.a_body = new double[(int) 3];
        System.arraycopy(this.a_body, 0, outobj.a_body, 0, 3); 
        outobj.alf_body = new double[(int) 3];
        System.arraycopy(this.alf_body, 0, outobj.alf_body, 0, 3); 
        outobj.jacc = new double[(int) 18];
        System.arraycopy(this.jacc, 0, outobj.jacc, 0, 18); 
        outobj.fb_dist = new double[(int) 6];
        System.arraycopy(this.fb_dist, 0, outobj.fb_dist, 0, 6); 
        outobj.iter_dist = this.iter_dist;
 
        outobj.vLimb = new double[(int) 12];
        System.arraycopy(this.vLimb, 0, outobj.vLimb, 0, 12); 
        outobj.contact_state = new double[(int) 6];
        System.arraycopy(this.contact_state, 0, outobj.contact_state, 0, 6); 
        return outobj;
    }
 
}

