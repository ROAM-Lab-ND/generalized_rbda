/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class humanoid_acrobatic_lcmt implements lcm.lcm.LCMEncodable
{
    public float time;
    public int iter;
    public float pbody_cmd[];
    public float vbody_cmd[];
    public float abody_cmd[];
    public float rpy_cmd[];
    public float omegaBody_cmd[];
    public float pcom_cmd[];
    public float vcom_cmd[];
    public float acom_cmd[];
    public float jpos_cmd[];
    public float jvel_cmd[];
    public float Fr_cmd[];
    public float pfoot_cmd[];
    public float contact_state[];
    public float pbody_est[];
    public float vbody_est[];
    public float rpy_est[];
    public float omegaBody_est[];
    public float pcom_est[];
    public float vcom_est[];
    public float jpos_est[];
    public float jvel_est[];
    public float pfoot_est[];
 
    public humanoid_acrobatic_lcmt()
    {
        pbody_cmd = new float[3];
        vbody_cmd = new float[3];
        abody_cmd = new float[3];
        rpy_cmd = new float[3];
        omegaBody_cmd = new float[3];
        pcom_cmd = new float[3];
        vcom_cmd = new float[3];
        acom_cmd = new float[3];
        jpos_cmd = new float[18];
        jvel_cmd = new float[18];
        Fr_cmd = new float[12];
        pfoot_cmd = new float[12];
        contact_state = new float[4];
        pbody_est = new float[3];
        vbody_est = new float[3];
        rpy_est = new float[3];
        omegaBody_est = new float[3];
        pcom_est = new float[3];
        vcom_est = new float[3];
        jpos_est = new float[18];
        jvel_est = new float[18];
        pfoot_est = new float[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc72c14ddbc40bc23L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.humanoid_acrobatic_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.humanoid_acrobatic_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeFloat(this.time); 
 
        outs.writeInt(this.iter); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pbody_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vbody_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.abody_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpy_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.omegaBody_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pcom_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vcom_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.acom_cmd[a]); 
        }
 
        for (int a = 0; a < 18; a++) {
            outs.writeFloat(this.jpos_cmd[a]); 
        }
 
        for (int a = 0; a < 18; a++) {
            outs.writeFloat(this.jvel_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.Fr_cmd[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.pfoot_cmd[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.contact_state[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pbody_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vbody_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpy_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.omegaBody_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pcom_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vcom_est[a]); 
        }
 
        for (int a = 0; a < 18; a++) {
            outs.writeFloat(this.jpos_est[a]); 
        }
 
        for (int a = 0; a < 18; a++) {
            outs.writeFloat(this.jvel_est[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.pfoot_est[a]); 
        }
 
    }
 
    public humanoid_acrobatic_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public humanoid_acrobatic_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.humanoid_acrobatic_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.humanoid_acrobatic_lcmt o = new lcmtypes.humanoid_acrobatic_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.time = ins.readFloat();
 
        this.iter = ins.readInt();
 
        this.pbody_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pbody_cmd[a] = ins.readFloat();
        }
 
        this.vbody_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vbody_cmd[a] = ins.readFloat();
        }
 
        this.abody_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.abody_cmd[a] = ins.readFloat();
        }
 
        this.rpy_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy_cmd[a] = ins.readFloat();
        }
 
        this.omegaBody_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omegaBody_cmd[a] = ins.readFloat();
        }
 
        this.pcom_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pcom_cmd[a] = ins.readFloat();
        }
 
        this.vcom_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vcom_cmd[a] = ins.readFloat();
        }
 
        this.acom_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.acom_cmd[a] = ins.readFloat();
        }
 
        this.jpos_cmd = new float[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.jpos_cmd[a] = ins.readFloat();
        }
 
        this.jvel_cmd = new float[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.jvel_cmd[a] = ins.readFloat();
        }
 
        this.Fr_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.Fr_cmd[a] = ins.readFloat();
        }
 
        this.pfoot_cmd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.pfoot_cmd[a] = ins.readFloat();
        }
 
        this.contact_state = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.contact_state[a] = ins.readFloat();
        }
 
        this.pbody_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pbody_est[a] = ins.readFloat();
        }
 
        this.vbody_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vbody_est[a] = ins.readFloat();
        }
 
        this.rpy_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy_est[a] = ins.readFloat();
        }
 
        this.omegaBody_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omegaBody_est[a] = ins.readFloat();
        }
 
        this.pcom_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pcom_est[a] = ins.readFloat();
        }
 
        this.vcom_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vcom_est[a] = ins.readFloat();
        }
 
        this.jpos_est = new float[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.jpos_est[a] = ins.readFloat();
        }
 
        this.jvel_est = new float[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.jvel_est[a] = ins.readFloat();
        }
 
        this.pfoot_est = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.pfoot_est[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.humanoid_acrobatic_lcmt copy()
    {
        lcmtypes.humanoid_acrobatic_lcmt outobj = new lcmtypes.humanoid_acrobatic_lcmt();
        outobj.time = this.time;
 
        outobj.iter = this.iter;
 
        outobj.pbody_cmd = new float[(int) 3];
        System.arraycopy(this.pbody_cmd, 0, outobj.pbody_cmd, 0, 3); 
        outobj.vbody_cmd = new float[(int) 3];
        System.arraycopy(this.vbody_cmd, 0, outobj.vbody_cmd, 0, 3); 
        outobj.abody_cmd = new float[(int) 3];
        System.arraycopy(this.abody_cmd, 0, outobj.abody_cmd, 0, 3); 
        outobj.rpy_cmd = new float[(int) 3];
        System.arraycopy(this.rpy_cmd, 0, outobj.rpy_cmd, 0, 3); 
        outobj.omegaBody_cmd = new float[(int) 3];
        System.arraycopy(this.omegaBody_cmd, 0, outobj.omegaBody_cmd, 0, 3); 
        outobj.pcom_cmd = new float[(int) 3];
        System.arraycopy(this.pcom_cmd, 0, outobj.pcom_cmd, 0, 3); 
        outobj.vcom_cmd = new float[(int) 3];
        System.arraycopy(this.vcom_cmd, 0, outobj.vcom_cmd, 0, 3); 
        outobj.acom_cmd = new float[(int) 3];
        System.arraycopy(this.acom_cmd, 0, outobj.acom_cmd, 0, 3); 
        outobj.jpos_cmd = new float[(int) 18];
        System.arraycopy(this.jpos_cmd, 0, outobj.jpos_cmd, 0, 18); 
        outobj.jvel_cmd = new float[(int) 18];
        System.arraycopy(this.jvel_cmd, 0, outobj.jvel_cmd, 0, 18); 
        outobj.Fr_cmd = new float[(int) 12];
        System.arraycopy(this.Fr_cmd, 0, outobj.Fr_cmd, 0, 12); 
        outobj.pfoot_cmd = new float[(int) 12];
        System.arraycopy(this.pfoot_cmd, 0, outobj.pfoot_cmd, 0, 12); 
        outobj.contact_state = new float[(int) 4];
        System.arraycopy(this.contact_state, 0, outobj.contact_state, 0, 4); 
        outobj.pbody_est = new float[(int) 3];
        System.arraycopy(this.pbody_est, 0, outobj.pbody_est, 0, 3); 
        outobj.vbody_est = new float[(int) 3];
        System.arraycopy(this.vbody_est, 0, outobj.vbody_est, 0, 3); 
        outobj.rpy_est = new float[(int) 3];
        System.arraycopy(this.rpy_est, 0, outobj.rpy_est, 0, 3); 
        outobj.omegaBody_est = new float[(int) 3];
        System.arraycopy(this.omegaBody_est, 0, outobj.omegaBody_est, 0, 3); 
        outobj.pcom_est = new float[(int) 3];
        System.arraycopy(this.pcom_est, 0, outobj.pcom_est, 0, 3); 
        outobj.vcom_est = new float[(int) 3];
        System.arraycopy(this.vcom_est, 0, outobj.vcom_est, 0, 3); 
        outobj.jpos_est = new float[(int) 18];
        System.arraycopy(this.jpos_est, 0, outobj.jpos_est, 0, 18); 
        outobj.jvel_est = new float[(int) 18];
        System.arraycopy(this.jvel_est, 0, outobj.jvel_est, 0, 18); 
        outobj.pfoot_est = new float[(int) 12];
        System.arraycopy(this.pfoot_est, 0, outobj.pfoot_est, 0, 12); 
        return outobj;
    }
 
}

