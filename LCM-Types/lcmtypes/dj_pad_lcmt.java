/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class dj_pad_lcmt implements lcm.lcm.LCMEncodable
{
    public double slider_0[];
    public double slider_1[];
    public double slider_2[];
    public double slider_3[];
    public double slider_4[];
    public double slider_5[];
    public double slider_6[];
    public double slider_7[];
    public int params_count;
    public String params_names[];
    public int params_types[];
 
    public dj_pad_lcmt()
    {
        slider_0 = new double[3];
        slider_1 = new double[3];
        slider_2 = new double[3];
        slider_3 = new double[3];
        slider_4 = new double[3];
        slider_5 = new double[3];
        slider_6 = new double[3];
        slider_7 = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x136a31e2d7e40798L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.dj_pad_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.dj_pad_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.slider_0[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.slider_1[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.slider_2[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.slider_3[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.slider_4[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.slider_5[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.slider_6[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.slider_7[a]); 
        }
 
        outs.writeInt(this.params_count); 
 
        for (int a = 0; a < this.params_count; a++) {
            __strbuf = new char[this.params_names[a].length()]; this.params_names[a].getChars(0, this.params_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.params_count; a++) {
            outs.writeInt(this.params_types[a]); 
        }
 
    }
 
    public dj_pad_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public dj_pad_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.dj_pad_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.dj_pad_lcmt o = new lcmtypes.dj_pad_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.slider_0 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.slider_0[a] = ins.readDouble();
        }
 
        this.slider_1 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.slider_1[a] = ins.readDouble();
        }
 
        this.slider_2 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.slider_2[a] = ins.readDouble();
        }
 
        this.slider_3 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.slider_3[a] = ins.readDouble();
        }
 
        this.slider_4 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.slider_4[a] = ins.readDouble();
        }
 
        this.slider_5 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.slider_5[a] = ins.readDouble();
        }
 
        this.slider_6 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.slider_6[a] = ins.readDouble();
        }
 
        this.slider_7 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.slider_7[a] = ins.readDouble();
        }
 
        this.params_count = ins.readInt();
 
        this.params_names = new String[(int) params_count];
        for (int a = 0; a < this.params_count; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.params_names[a] = new String(__strbuf);
        }
 
        this.params_types = new int[(int) params_count];
        for (int a = 0; a < this.params_count; a++) {
            this.params_types[a] = ins.readInt();
        }
 
    }
 
    public lcmtypes.dj_pad_lcmt copy()
    {
        lcmtypes.dj_pad_lcmt outobj = new lcmtypes.dj_pad_lcmt();
        outobj.slider_0 = new double[(int) 3];
        System.arraycopy(this.slider_0, 0, outobj.slider_0, 0, 3); 
        outobj.slider_1 = new double[(int) 3];
        System.arraycopy(this.slider_1, 0, outobj.slider_1, 0, 3); 
        outobj.slider_2 = new double[(int) 3];
        System.arraycopy(this.slider_2, 0, outobj.slider_2, 0, 3); 
        outobj.slider_3 = new double[(int) 3];
        System.arraycopy(this.slider_3, 0, outobj.slider_3, 0, 3); 
        outobj.slider_4 = new double[(int) 3];
        System.arraycopy(this.slider_4, 0, outobj.slider_4, 0, 3); 
        outobj.slider_5 = new double[(int) 3];
        System.arraycopy(this.slider_5, 0, outobj.slider_5, 0, 3); 
        outobj.slider_6 = new double[(int) 3];
        System.arraycopy(this.slider_6, 0, outobj.slider_6, 0, 3); 
        outobj.slider_7 = new double[(int) 3];
        System.arraycopy(this.slider_7, 0, outobj.slider_7, 0, 3); 
        outobj.params_count = this.params_count;
 
        outobj.params_names = new String[(int) params_count];
        if (this.params_count > 0)
            System.arraycopy(this.params_names, 0, outobj.params_names, 0, this.params_count); 
        outobj.params_types = new int[(int) params_count];
        if (this.params_count > 0)
            System.arraycopy(this.params_types, 0, outobj.params_types, 0, this.params_count); 
        return outobj;
    }
 
}

