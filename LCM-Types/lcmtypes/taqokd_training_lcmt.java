/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class taqokd_training_lcmt implements lcm.lcm.LCMEncodable
{
    public double a;
    public double b;
    public double c;
    public double d;
    public double f;
    public double heading;
    public int train_iter_max;
    public double mu;
    public double f_max;
    public double dist_to_obs_sf;
    public double obs_height_sf;
    public double land_height_offset;
    public double land_dist_sf1;
    public double land_dist_sf2;
    public double px_flight;
    public double py_flight;
    public double k_softplus;
    public double vert_vel_sf;
    public double robot_mass_sf;
    public double wbc_fb_weight;
    public int b_use_wbc;
    public double pz_takeoff[];
    public double roll_takeoff[];
    public double pitch_takeoff[];
    public double pz_flight[];
    public double roll_flight[];
    public double pitch_flight[];
 
    public taqokd_training_lcmt()
    {
        pz_takeoff = new double[3];
        roll_takeoff = new double[3];
        pitch_takeoff = new double[3];
        pz_flight = new double[3];
        roll_flight = new double[3];
        pitch_flight = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe8ee047f2ac4fdd3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.taqokd_training_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.taqokd_training_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.a); 
 
        outs.writeDouble(this.b); 
 
        outs.writeDouble(this.c); 
 
        outs.writeDouble(this.d); 
 
        outs.writeDouble(this.f); 
 
        outs.writeDouble(this.heading); 
 
        outs.writeInt(this.train_iter_max); 
 
        outs.writeDouble(this.mu); 
 
        outs.writeDouble(this.f_max); 
 
        outs.writeDouble(this.dist_to_obs_sf); 
 
        outs.writeDouble(this.obs_height_sf); 
 
        outs.writeDouble(this.land_height_offset); 
 
        outs.writeDouble(this.land_dist_sf1); 
 
        outs.writeDouble(this.land_dist_sf2); 
 
        outs.writeDouble(this.px_flight); 
 
        outs.writeDouble(this.py_flight); 
 
        outs.writeDouble(this.k_softplus); 
 
        outs.writeDouble(this.vert_vel_sf); 
 
        outs.writeDouble(this.robot_mass_sf); 
 
        outs.writeDouble(this.wbc_fb_weight); 
 
        outs.writeInt(this.b_use_wbc); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.pz_takeoff[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.roll_takeoff[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.pitch_takeoff[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.pz_flight[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.roll_flight[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.pitch_flight[a]); 
        }
 
    }
 
    public taqokd_training_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public taqokd_training_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.taqokd_training_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.taqokd_training_lcmt o = new lcmtypes.taqokd_training_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.a = ins.readDouble();
 
        this.b = ins.readDouble();
 
        this.c = ins.readDouble();
 
        this.d = ins.readDouble();
 
        this.f = ins.readDouble();
 
        this.heading = ins.readDouble();
 
        this.train_iter_max = ins.readInt();
 
        this.mu = ins.readDouble();
 
        this.f_max = ins.readDouble();
 
        this.dist_to_obs_sf = ins.readDouble();
 
        this.obs_height_sf = ins.readDouble();
 
        this.land_height_offset = ins.readDouble();
 
        this.land_dist_sf1 = ins.readDouble();
 
        this.land_dist_sf2 = ins.readDouble();
 
        this.px_flight = ins.readDouble();
 
        this.py_flight = ins.readDouble();
 
        this.k_softplus = ins.readDouble();
 
        this.vert_vel_sf = ins.readDouble();
 
        this.robot_mass_sf = ins.readDouble();
 
        this.wbc_fb_weight = ins.readDouble();
 
        this.b_use_wbc = ins.readInt();
 
        this.pz_takeoff = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pz_takeoff[a] = ins.readDouble();
        }
 
        this.roll_takeoff = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.roll_takeoff[a] = ins.readDouble();
        }
 
        this.pitch_takeoff = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pitch_takeoff[a] = ins.readDouble();
        }
 
        this.pz_flight = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pz_flight[a] = ins.readDouble();
        }
 
        this.roll_flight = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.roll_flight[a] = ins.readDouble();
        }
 
        this.pitch_flight = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pitch_flight[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.taqokd_training_lcmt copy()
    {
        lcmtypes.taqokd_training_lcmt outobj = new lcmtypes.taqokd_training_lcmt();
        outobj.a = this.a;
 
        outobj.b = this.b;
 
        outobj.c = this.c;
 
        outobj.d = this.d;
 
        outobj.f = this.f;
 
        outobj.heading = this.heading;
 
        outobj.train_iter_max = this.train_iter_max;
 
        outobj.mu = this.mu;
 
        outobj.f_max = this.f_max;
 
        outobj.dist_to_obs_sf = this.dist_to_obs_sf;
 
        outobj.obs_height_sf = this.obs_height_sf;
 
        outobj.land_height_offset = this.land_height_offset;
 
        outobj.land_dist_sf1 = this.land_dist_sf1;
 
        outobj.land_dist_sf2 = this.land_dist_sf2;
 
        outobj.px_flight = this.px_flight;
 
        outobj.py_flight = this.py_flight;
 
        outobj.k_softplus = this.k_softplus;
 
        outobj.vert_vel_sf = this.vert_vel_sf;
 
        outobj.robot_mass_sf = this.robot_mass_sf;
 
        outobj.wbc_fb_weight = this.wbc_fb_weight;
 
        outobj.b_use_wbc = this.b_use_wbc;
 
        outobj.pz_takeoff = new double[(int) 3];
        System.arraycopy(this.pz_takeoff, 0, outobj.pz_takeoff, 0, 3); 
        outobj.roll_takeoff = new double[(int) 3];
        System.arraycopy(this.roll_takeoff, 0, outobj.roll_takeoff, 0, 3); 
        outobj.pitch_takeoff = new double[(int) 3];
        System.arraycopy(this.pitch_takeoff, 0, outobj.pitch_takeoff, 0, 3); 
        outobj.pz_flight = new double[(int) 3];
        System.arraycopy(this.pz_flight, 0, outobj.pz_flight, 0, 3); 
        outobj.roll_flight = new double[(int) 3];
        System.arraycopy(this.roll_flight, 0, outobj.roll_flight, 0, 3); 
        outobj.pitch_flight = new double[(int) 3];
        System.arraycopy(this.pitch_flight, 0, outobj.pitch_flight, 0, 3); 
        return outobj;
    }
 
}

