/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class tello_data_lcmt implements lcm.lcm.LCMEncodable
{
    public float q_hipz[];
    public float q_hipx[];
    public float q_hipy[];
    public float q_knee[];
    public float q_ankle[];
    public float qd_hipz[];
    public float qd_hipx[];
    public float qd_hipy[];
    public float qd_knee[];
    public float qd_ankle[];
    public int flags[];
    public int spi_driver_status;
 
    public tello_data_lcmt()
    {
        q_hipz = new float[2];
        q_hipx = new float[2];
        q_hipy = new float[2];
        q_knee = new float[2];
        q_ankle = new float[2];
        qd_hipz = new float[2];
        qd_hipx = new float[2];
        qd_hipy = new float[2];
        qd_knee = new float[2];
        qd_ankle = new float[2];
        flags = new int[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9fb4ac24573690b7L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.tello_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.tello_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.q_hipz[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.q_hipx[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.q_hipy[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.q_knee[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.q_ankle[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.qd_hipz[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.qd_hipx[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.qd_hipy[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.qd_knee[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.qd_ankle[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeInt(this.flags[a]); 
        }
 
        outs.writeInt(this.spi_driver_status); 
 
    }
 
    public tello_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public tello_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.tello_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.tello_data_lcmt o = new lcmtypes.tello_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.q_hipz = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.q_hipz[a] = ins.readFloat();
        }
 
        this.q_hipx = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.q_hipx[a] = ins.readFloat();
        }
 
        this.q_hipy = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.q_hipy[a] = ins.readFloat();
        }
 
        this.q_knee = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.q_knee[a] = ins.readFloat();
        }
 
        this.q_ankle = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.q_ankle[a] = ins.readFloat();
        }
 
        this.qd_hipz = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.qd_hipz[a] = ins.readFloat();
        }
 
        this.qd_hipx = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.qd_hipx[a] = ins.readFloat();
        }
 
        this.qd_hipy = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.qd_hipy[a] = ins.readFloat();
        }
 
        this.qd_knee = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.qd_knee[a] = ins.readFloat();
        }
 
        this.qd_ankle = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.qd_ankle[a] = ins.readFloat();
        }
 
        this.flags = new int[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.flags[a] = ins.readInt();
        }
 
        this.spi_driver_status = ins.readInt();
 
    }
 
    public lcmtypes.tello_data_lcmt copy()
    {
        lcmtypes.tello_data_lcmt outobj = new lcmtypes.tello_data_lcmt();
        outobj.q_hipz = new float[(int) 2];
        System.arraycopy(this.q_hipz, 0, outobj.q_hipz, 0, 2); 
        outobj.q_hipx = new float[(int) 2];
        System.arraycopy(this.q_hipx, 0, outobj.q_hipx, 0, 2); 
        outobj.q_hipy = new float[(int) 2];
        System.arraycopy(this.q_hipy, 0, outobj.q_hipy, 0, 2); 
        outobj.q_knee = new float[(int) 2];
        System.arraycopy(this.q_knee, 0, outobj.q_knee, 0, 2); 
        outobj.q_ankle = new float[(int) 2];
        System.arraycopy(this.q_ankle, 0, outobj.q_ankle, 0, 2); 
        outobj.qd_hipz = new float[(int) 2];
        System.arraycopy(this.qd_hipz, 0, outobj.qd_hipz, 0, 2); 
        outobj.qd_hipx = new float[(int) 2];
        System.arraycopy(this.qd_hipx, 0, outobj.qd_hipx, 0, 2); 
        outobj.qd_hipy = new float[(int) 2];
        System.arraycopy(this.qd_hipy, 0, outobj.qd_hipy, 0, 2); 
        outobj.qd_knee = new float[(int) 2];
        System.arraycopy(this.qd_knee, 0, outobj.qd_knee, 0, 2); 
        outobj.qd_ankle = new float[(int) 2];
        System.arraycopy(this.qd_ankle, 0, outobj.qd_ankle, 0, 2); 
        outobj.flags = new int[(int) 4];
        System.arraycopy(this.flags, 0, outobj.flags, 0, 4); 
        outobj.spi_driver_status = this.spi_driver_status;
 
        return outobj;
    }
 
}

