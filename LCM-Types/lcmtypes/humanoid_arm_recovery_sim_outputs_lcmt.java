/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class humanoid_arm_recovery_sim_outputs_lcmt implements lcm.lcm.LCMEncodable
{
    public boolean terminate_sim;
    public boolean body_low;
    public boolean stayed_upright;
    public boolean knee_on_ground;
    public boolean opt_solved;
 
    public humanoid_arm_recovery_sim_outputs_lcmt()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1cd303d81466f3ccL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.humanoid_arm_recovery_sim_outputs_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.humanoid_arm_recovery_sim_outputs_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte( this.terminate_sim ? 1 : 0); 
 
        outs.writeByte( this.body_low ? 1 : 0); 
 
        outs.writeByte( this.stayed_upright ? 1 : 0); 
 
        outs.writeByte( this.knee_on_ground ? 1 : 0); 
 
        outs.writeByte( this.opt_solved ? 1 : 0); 
 
    }
 
    public humanoid_arm_recovery_sim_outputs_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public humanoid_arm_recovery_sim_outputs_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.humanoid_arm_recovery_sim_outputs_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.humanoid_arm_recovery_sim_outputs_lcmt o = new lcmtypes.humanoid_arm_recovery_sim_outputs_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.terminate_sim = ins.readByte()!=0;
 
        this.body_low = ins.readByte()!=0;
 
        this.stayed_upright = ins.readByte()!=0;
 
        this.knee_on_ground = ins.readByte()!=0;
 
        this.opt_solved = ins.readByte()!=0;
 
    }
 
    public lcmtypes.humanoid_arm_recovery_sim_outputs_lcmt copy()
    {
        lcmtypes.humanoid_arm_recovery_sim_outputs_lcmt outobj = new lcmtypes.humanoid_arm_recovery_sim_outputs_lcmt();
        outobj.terminate_sim = this.terminate_sim;
 
        outobj.body_low = this.body_low;
 
        outobj.stayed_upright = this.stayed_upright;
 
        outobj.knee_on_ground = this.knee_on_ground;
 
        outobj.opt_solved = this.opt_solved;
 
        return outobj;
    }
 
}

