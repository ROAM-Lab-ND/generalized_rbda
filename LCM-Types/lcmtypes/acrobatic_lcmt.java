/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class acrobatic_lcmt implements lcm.lcm.LCMEncodable
{
    public float time;
    public int iter;
    public float pcom_est[];
    public float pbody_est[];
    public float rpy_est[];
    public float vcom_est[];
    public float omegaBody_est[];
    public float h_est[];
    public float pfoot_est[];
    public float pfoot_leg_controller_est[];
    public float q_est[];
    public float qd_est[];
    public float tau_est[];
    public float pcom_ref[];
    public float pbody_ref[];
    public float rpy_ref[];
    public float vcom_ref[];
    public float omegaBody_ref[];
    public float h_ref[];
    public float pfoot_ref[];
    public float pfoot_leg_controller_ref[];
    public float q_ref[];
    public float qd_ref[];
    public float tau_ref[];
    public float pbody_TO[];
    public float rpy_TO[];
    public float vcom_TO[];
    public float omegaBody_TO[];
    public float h_TO[];
    public float u_ref[];
    public float u_TO[];
    public float cs_ref[];
    public float f_ff[];
    public float linear_error[];
    public float delta_u[];
    public float gQP[];
    public float lbQP[];
    public float ubQP[];
    public float lbAQP[];
    public float ubAQP[];
    public float Prde[];
 
    public acrobatic_lcmt()
    {
        pcom_est = new float[3];
        pbody_est = new float[3];
        rpy_est = new float[3];
        vcom_est = new float[3];
        omegaBody_est = new float[3];
        h_est = new float[3];
        pfoot_est = new float[12];
        pfoot_leg_controller_est = new float[12];
        q_est = new float[12];
        qd_est = new float[12];
        tau_est = new float[12];
        pcom_ref = new float[3];
        pbody_ref = new float[3];
        rpy_ref = new float[3];
        vcom_ref = new float[3];
        omegaBody_ref = new float[3];
        h_ref = new float[3];
        pfoot_ref = new float[12];
        pfoot_leg_controller_ref = new float[12];
        q_ref = new float[12];
        qd_ref = new float[12];
        tau_ref = new float[12];
        pbody_TO = new float[3];
        rpy_TO = new float[3];
        vcom_TO = new float[3];
        omegaBody_TO = new float[3];
        h_TO = new float[3];
        u_ref = new float[12];
        u_TO = new float[12];
        cs_ref = new float[4];
        f_ff = new float[12];
        linear_error = new float[24];
        delta_u = new float[12];
        gQP = new float[12];
        lbQP = new float[12];
        ubQP = new float[12];
        lbAQP = new float[20];
        ubAQP = new float[20];
        Prde = new float[576];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xb556e8f43fb4eb9bL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.acrobatic_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.acrobatic_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeFloat(this.time); 
 
        outs.writeInt(this.iter); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pcom_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pbody_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpy_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vcom_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.omegaBody_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.h_est[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.pfoot_est[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.pfoot_leg_controller_est[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.q_est[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.qd_est[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.tau_est[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pcom_ref[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pbody_ref[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpy_ref[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vcom_ref[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.omegaBody_ref[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.h_ref[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.pfoot_ref[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.pfoot_leg_controller_ref[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.q_ref[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.qd_ref[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.tau_ref[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pbody_TO[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpy_TO[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vcom_TO[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.omegaBody_TO[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.h_TO[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.u_ref[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.u_TO[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.cs_ref[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.f_ff[a]); 
        }
 
        for (int a = 0; a < 24; a++) {
            outs.writeFloat(this.linear_error[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.delta_u[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.gQP[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.lbQP[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.ubQP[a]); 
        }
 
        for (int a = 0; a < 20; a++) {
            outs.writeFloat(this.lbAQP[a]); 
        }
 
        for (int a = 0; a < 20; a++) {
            outs.writeFloat(this.ubAQP[a]); 
        }
 
        for (int a = 0; a < 576; a++) {
            outs.writeFloat(this.Prde[a]); 
        }
 
    }
 
    public acrobatic_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public acrobatic_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.acrobatic_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.acrobatic_lcmt o = new lcmtypes.acrobatic_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.time = ins.readFloat();
 
        this.iter = ins.readInt();
 
        this.pcom_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pcom_est[a] = ins.readFloat();
        }
 
        this.pbody_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pbody_est[a] = ins.readFloat();
        }
 
        this.rpy_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy_est[a] = ins.readFloat();
        }
 
        this.vcom_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vcom_est[a] = ins.readFloat();
        }
 
        this.omegaBody_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omegaBody_est[a] = ins.readFloat();
        }
 
        this.h_est = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.h_est[a] = ins.readFloat();
        }
 
        this.pfoot_est = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.pfoot_est[a] = ins.readFloat();
        }
 
        this.pfoot_leg_controller_est = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.pfoot_leg_controller_est[a] = ins.readFloat();
        }
 
        this.q_est = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.q_est[a] = ins.readFloat();
        }
 
        this.qd_est = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.qd_est[a] = ins.readFloat();
        }
 
        this.tau_est = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tau_est[a] = ins.readFloat();
        }
 
        this.pcom_ref = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pcom_ref[a] = ins.readFloat();
        }
 
        this.pbody_ref = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pbody_ref[a] = ins.readFloat();
        }
 
        this.rpy_ref = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy_ref[a] = ins.readFloat();
        }
 
        this.vcom_ref = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vcom_ref[a] = ins.readFloat();
        }
 
        this.omegaBody_ref = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omegaBody_ref[a] = ins.readFloat();
        }
 
        this.h_ref = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.h_ref[a] = ins.readFloat();
        }
 
        this.pfoot_ref = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.pfoot_ref[a] = ins.readFloat();
        }
 
        this.pfoot_leg_controller_ref = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.pfoot_leg_controller_ref[a] = ins.readFloat();
        }
 
        this.q_ref = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.q_ref[a] = ins.readFloat();
        }
 
        this.qd_ref = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.qd_ref[a] = ins.readFloat();
        }
 
        this.tau_ref = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tau_ref[a] = ins.readFloat();
        }
 
        this.pbody_TO = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pbody_TO[a] = ins.readFloat();
        }
 
        this.rpy_TO = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy_TO[a] = ins.readFloat();
        }
 
        this.vcom_TO = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vcom_TO[a] = ins.readFloat();
        }
 
        this.omegaBody_TO = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omegaBody_TO[a] = ins.readFloat();
        }
 
        this.h_TO = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.h_TO[a] = ins.readFloat();
        }
 
        this.u_ref = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.u_ref[a] = ins.readFloat();
        }
 
        this.u_TO = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.u_TO[a] = ins.readFloat();
        }
 
        this.cs_ref = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.cs_ref[a] = ins.readFloat();
        }
 
        this.f_ff = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.f_ff[a] = ins.readFloat();
        }
 
        this.linear_error = new float[(int) 24];
        for (int a = 0; a < 24; a++) {
            this.linear_error[a] = ins.readFloat();
        }
 
        this.delta_u = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.delta_u[a] = ins.readFloat();
        }
 
        this.gQP = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.gQP[a] = ins.readFloat();
        }
 
        this.lbQP = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.lbQP[a] = ins.readFloat();
        }
 
        this.ubQP = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.ubQP[a] = ins.readFloat();
        }
 
        this.lbAQP = new float[(int) 20];
        for (int a = 0; a < 20; a++) {
            this.lbAQP[a] = ins.readFloat();
        }
 
        this.ubAQP = new float[(int) 20];
        for (int a = 0; a < 20; a++) {
            this.ubAQP[a] = ins.readFloat();
        }
 
        this.Prde = new float[(int) 576];
        for (int a = 0; a < 576; a++) {
            this.Prde[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.acrobatic_lcmt copy()
    {
        lcmtypes.acrobatic_lcmt outobj = new lcmtypes.acrobatic_lcmt();
        outobj.time = this.time;
 
        outobj.iter = this.iter;
 
        outobj.pcom_est = new float[(int) 3];
        System.arraycopy(this.pcom_est, 0, outobj.pcom_est, 0, 3); 
        outobj.pbody_est = new float[(int) 3];
        System.arraycopy(this.pbody_est, 0, outobj.pbody_est, 0, 3); 
        outobj.rpy_est = new float[(int) 3];
        System.arraycopy(this.rpy_est, 0, outobj.rpy_est, 0, 3); 
        outobj.vcom_est = new float[(int) 3];
        System.arraycopy(this.vcom_est, 0, outobj.vcom_est, 0, 3); 
        outobj.omegaBody_est = new float[(int) 3];
        System.arraycopy(this.omegaBody_est, 0, outobj.omegaBody_est, 0, 3); 
        outobj.h_est = new float[(int) 3];
        System.arraycopy(this.h_est, 0, outobj.h_est, 0, 3); 
        outobj.pfoot_est = new float[(int) 12];
        System.arraycopy(this.pfoot_est, 0, outobj.pfoot_est, 0, 12); 
        outobj.pfoot_leg_controller_est = new float[(int) 12];
        System.arraycopy(this.pfoot_leg_controller_est, 0, outobj.pfoot_leg_controller_est, 0, 12); 
        outobj.q_est = new float[(int) 12];
        System.arraycopy(this.q_est, 0, outobj.q_est, 0, 12); 
        outobj.qd_est = new float[(int) 12];
        System.arraycopy(this.qd_est, 0, outobj.qd_est, 0, 12); 
        outobj.tau_est = new float[(int) 12];
        System.arraycopy(this.tau_est, 0, outobj.tau_est, 0, 12); 
        outobj.pcom_ref = new float[(int) 3];
        System.arraycopy(this.pcom_ref, 0, outobj.pcom_ref, 0, 3); 
        outobj.pbody_ref = new float[(int) 3];
        System.arraycopy(this.pbody_ref, 0, outobj.pbody_ref, 0, 3); 
        outobj.rpy_ref = new float[(int) 3];
        System.arraycopy(this.rpy_ref, 0, outobj.rpy_ref, 0, 3); 
        outobj.vcom_ref = new float[(int) 3];
        System.arraycopy(this.vcom_ref, 0, outobj.vcom_ref, 0, 3); 
        outobj.omegaBody_ref = new float[(int) 3];
        System.arraycopy(this.omegaBody_ref, 0, outobj.omegaBody_ref, 0, 3); 
        outobj.h_ref = new float[(int) 3];
        System.arraycopy(this.h_ref, 0, outobj.h_ref, 0, 3); 
        outobj.pfoot_ref = new float[(int) 12];
        System.arraycopy(this.pfoot_ref, 0, outobj.pfoot_ref, 0, 12); 
        outobj.pfoot_leg_controller_ref = new float[(int) 12];
        System.arraycopy(this.pfoot_leg_controller_ref, 0, outobj.pfoot_leg_controller_ref, 0, 12); 
        outobj.q_ref = new float[(int) 12];
        System.arraycopy(this.q_ref, 0, outobj.q_ref, 0, 12); 
        outobj.qd_ref = new float[(int) 12];
        System.arraycopy(this.qd_ref, 0, outobj.qd_ref, 0, 12); 
        outobj.tau_ref = new float[(int) 12];
        System.arraycopy(this.tau_ref, 0, outobj.tau_ref, 0, 12); 
        outobj.pbody_TO = new float[(int) 3];
        System.arraycopy(this.pbody_TO, 0, outobj.pbody_TO, 0, 3); 
        outobj.rpy_TO = new float[(int) 3];
        System.arraycopy(this.rpy_TO, 0, outobj.rpy_TO, 0, 3); 
        outobj.vcom_TO = new float[(int) 3];
        System.arraycopy(this.vcom_TO, 0, outobj.vcom_TO, 0, 3); 
        outobj.omegaBody_TO = new float[(int) 3];
        System.arraycopy(this.omegaBody_TO, 0, outobj.omegaBody_TO, 0, 3); 
        outobj.h_TO = new float[(int) 3];
        System.arraycopy(this.h_TO, 0, outobj.h_TO, 0, 3); 
        outobj.u_ref = new float[(int) 12];
        System.arraycopy(this.u_ref, 0, outobj.u_ref, 0, 12); 
        outobj.u_TO = new float[(int) 12];
        System.arraycopy(this.u_TO, 0, outobj.u_TO, 0, 12); 
        outobj.cs_ref = new float[(int) 4];
        System.arraycopy(this.cs_ref, 0, outobj.cs_ref, 0, 4); 
        outobj.f_ff = new float[(int) 12];
        System.arraycopy(this.f_ff, 0, outobj.f_ff, 0, 12); 
        outobj.linear_error = new float[(int) 24];
        System.arraycopy(this.linear_error, 0, outobj.linear_error, 0, 24); 
        outobj.delta_u = new float[(int) 12];
        System.arraycopy(this.delta_u, 0, outobj.delta_u, 0, 12); 
        outobj.gQP = new float[(int) 12];
        System.arraycopy(this.gQP, 0, outobj.gQP, 0, 12); 
        outobj.lbQP = new float[(int) 12];
        System.arraycopy(this.lbQP, 0, outobj.lbQP, 0, 12); 
        outobj.ubQP = new float[(int) 12];
        System.arraycopy(this.ubQP, 0, outobj.ubQP, 0, 12); 
        outobj.lbAQP = new float[(int) 20];
        System.arraycopy(this.lbAQP, 0, outobj.lbAQP, 0, 20); 
        outobj.ubAQP = new float[(int) 20];
        System.arraycopy(this.ubAQP, 0, outobj.ubAQP, 0, 20); 
        outobj.Prde = new float[(int) 576];
        System.arraycopy(this.Prde, 0, outobj.Prde, 0, 576); 
        return outobj;
    }
 
}

