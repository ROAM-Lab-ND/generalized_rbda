/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class extended_jump_info implements lcm.lcm.LCMEncodable
{
    public double a;
    public double b;
    public double c;
    public double d;
    public double f;
    public double yaw;
 
    public extended_jump_info()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x264bb2d2f9f62f02L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.extended_jump_info.class))
            return 0L;
 
        classes.add(lcmtypes.extended_jump_info.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.a); 
 
        outs.writeDouble(this.b); 
 
        outs.writeDouble(this.c); 
 
        outs.writeDouble(this.d); 
 
        outs.writeDouble(this.f); 
 
        outs.writeDouble(this.yaw); 
 
    }
 
    public extended_jump_info(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public extended_jump_info(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.extended_jump_info _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.extended_jump_info o = new lcmtypes.extended_jump_info();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.a = ins.readDouble();
 
        this.b = ins.readDouble();
 
        this.c = ins.readDouble();
 
        this.d = ins.readDouble();
 
        this.f = ins.readDouble();
 
        this.yaw = ins.readDouble();
 
    }
 
    public lcmtypes.extended_jump_info copy()
    {
        lcmtypes.extended_jump_info outobj = new lcmtypes.extended_jump_info();
        outobj.a = this.a;
 
        outobj.b = this.b;
 
        outobj.c = this.c;
 
        outobj.d = this.d;
 
        outobj.f = this.f;
 
        outobj.yaw = this.yaw;
 
        return outobj;
    }
 
}

