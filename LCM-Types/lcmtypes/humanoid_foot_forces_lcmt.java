/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class humanoid_foot_forces_lcmt implements lcm.lcm.LCMEncodable
{
    public double force0[];
    public double force1[];
    public double force2[];
    public double force3[];
    public double force4[];
    public double force5[];
 
    public humanoid_foot_forces_lcmt()
    {
        force0 = new double[3];
        force1 = new double[3];
        force2 = new double[3];
        force3 = new double[3];
        force4 = new double[3];
        force5 = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0f975212ee6b66a0L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.humanoid_foot_forces_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.humanoid_foot_forces_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.force0[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.force1[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.force2[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.force3[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.force4[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.force5[a]); 
        }
 
    }
 
    public humanoid_foot_forces_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public humanoid_foot_forces_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.humanoid_foot_forces_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.humanoid_foot_forces_lcmt o = new lcmtypes.humanoid_foot_forces_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.force0 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.force0[a] = ins.readDouble();
        }
 
        this.force1 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.force1[a] = ins.readDouble();
        }
 
        this.force2 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.force2[a] = ins.readDouble();
        }
 
        this.force3 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.force3[a] = ins.readDouble();
        }
 
        this.force4 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.force4[a] = ins.readDouble();
        }
 
        this.force5 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.force5[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.humanoid_foot_forces_lcmt copy()
    {
        lcmtypes.humanoid_foot_forces_lcmt outobj = new lcmtypes.humanoid_foot_forces_lcmt();
        outobj.force0 = new double[(int) 3];
        System.arraycopy(this.force0, 0, outobj.force0, 0, 3); 
        outobj.force1 = new double[(int) 3];
        System.arraycopy(this.force1, 0, outobj.force1, 0, 3); 
        outobj.force2 = new double[(int) 3];
        System.arraycopy(this.force2, 0, outobj.force2, 0, 3); 
        outobj.force3 = new double[(int) 3];
        System.arraycopy(this.force3, 0, outobj.force3, 0, 3); 
        outobj.force4 = new double[(int) 3];
        System.arraycopy(this.force4, 0, outobj.force4, 0, 3); 
        outobj.force5 = new double[(int) 3];
        System.arraycopy(this.force5, 0, outobj.force5, 0, 3); 
        return outobj;
    }
 
}

