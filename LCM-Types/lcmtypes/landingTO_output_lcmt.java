/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class landingTO_output_lcmt implements lcm.lcm.LCMEncodable
{
    public double opt_soln[];
    public double obj_val;
    public double t_solve;
    public int opt_solved;
    public int iter;
 
    public landingTO_output_lcmt()
    {
        opt_soln = new double[972];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1d402410c0bb43f3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.landingTO_output_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.landingTO_output_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 972; a++) {
            outs.writeDouble(this.opt_soln[a]); 
        }
 
        outs.writeDouble(this.obj_val); 
 
        outs.writeDouble(this.t_solve); 
 
        outs.writeInt(this.opt_solved); 
 
        outs.writeInt(this.iter); 
 
    }
 
    public landingTO_output_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public landingTO_output_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.landingTO_output_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.landingTO_output_lcmt o = new lcmtypes.landingTO_output_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.opt_soln = new double[(int) 972];
        for (int a = 0; a < 972; a++) {
            this.opt_soln[a] = ins.readDouble();
        }
 
        this.obj_val = ins.readDouble();
 
        this.t_solve = ins.readDouble();
 
        this.opt_solved = ins.readInt();
 
        this.iter = ins.readInt();
 
    }
 
    public lcmtypes.landingTO_output_lcmt copy()
    {
        lcmtypes.landingTO_output_lcmt outobj = new lcmtypes.landingTO_output_lcmt();
        outobj.opt_soln = new double[(int) 972];
        System.arraycopy(this.opt_soln, 0, outobj.opt_soln, 0, 972); 
        outobj.obj_val = this.obj_val;
 
        outobj.t_solve = this.t_solve;
 
        outobj.opt_solved = this.opt_solved;
 
        outobj.iter = this.iter;
 
        return outobj;
    }
 
}

