/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class quadruped_menu_data_lcmt implements lcm.lcm.LCMEncodable
{
    public boolean cheater_mode;
    public long control_mode;
    public boolean use_wbc;
    public boolean use_rc;
    public boolean display_heightmap;
    public boolean display_path_planning;
    public boolean display_potential_field;
    public boolean display_traverability;
    public double Kd_body[];
    public double Kd_cam[];
    public double Kd_clm[];
    public double Kd_foot[];
    public double Kd_joint[];
    public double Kd_ori[];
    public double Kp_body[];
    public double Kp_cam[];
    public double Kp_clm[];
    public double Kp_foot[];
    public double Kp_joint[];
    public double Kp_ori[];
    public double Q_ang[];
    public double Q_ori[];
    public double Q_pos[];
    public double Q_vel[];
    public double RPC_H_phi0[];
    public double RPC_H_r_rot[];
    public double RPC_H_r_trans[];
    public double RPC_H_theta0[];
    public double RPC_Q_dp[];
    public double RPC_Q_dtheta[];
    public double RPC_Q_p[];
    public double RPC_Q_theta[];
    public double RPC_R_f[];
    public double RPC_R_r[];
    public double RPC_filter[];
    public double RPC_gravity[];
    public double RPC_inertia[];
    public double RPC_interface_type;
    public double RPC_mass;
    public double RPC_mu;
    public double RPC_use_async_filt;
    public double RPC_use_pred_comp;
    public double RPC_visualize_pred;
    public double R_control;
    public double R_prev;
    public double Swing_Kd_cartesian[];
    public double Swing_Kd_joint[];
    public double Swing_Kp_cartesian[];
    public double Swing_Kp_joint[];
    public double Swing_step_offset[];
    public double Swing_traj_height;
    public double Swing_use_tau_ff;
    public double acro_task;
    public double des_dp[];
    public double des_dp_max[];
    public double des_dtheta[];
    public double des_dtheta_max[];
    public double des_p[];
    public double des_theta[];
    public double des_theta_max[];
    public double gait_disturbance[];
    public double gait_max_leg_angle;
    public double gait_max_stance_time;
    public double gait_min_stance_time;
    public double gait_override;
    public double gait_period_time;
    public double gait_recovery[];
    public double gait_switching_phase;
    public double gait_type;
    public double stance_legs;
 
    public quadruped_menu_data_lcmt()
    {
        Kd_body = new double[3];
        Kd_cam = new double[3];
        Kd_clm = new double[3];
        Kd_foot = new double[3];
        Kd_joint = new double[3];
        Kd_ori = new double[3];
        Kp_body = new double[3];
        Kp_cam = new double[3];
        Kp_clm = new double[3];
        Kp_foot = new double[3];
        Kp_joint = new double[3];
        Kp_ori = new double[3];
        Q_ang = new double[3];
        Q_ori = new double[3];
        Q_pos = new double[3];
        Q_vel = new double[3];
        RPC_H_phi0 = new double[3];
        RPC_H_r_rot = new double[3];
        RPC_H_r_trans = new double[3];
        RPC_H_theta0 = new double[3];
        RPC_Q_dp = new double[3];
        RPC_Q_dtheta = new double[3];
        RPC_Q_p = new double[3];
        RPC_Q_theta = new double[3];
        RPC_R_f = new double[3];
        RPC_R_r = new double[3];
        RPC_filter = new double[3];
        RPC_gravity = new double[3];
        RPC_inertia = new double[3];
        Swing_Kd_cartesian = new double[3];
        Swing_Kd_joint = new double[3];
        Swing_Kp_cartesian = new double[3];
        Swing_Kp_joint = new double[3];
        Swing_step_offset = new double[3];
        des_dp = new double[3];
        des_dp_max = new double[3];
        des_dtheta = new double[3];
        des_dtheta_max = new double[3];
        des_p = new double[3];
        des_theta = new double[3];
        des_theta_max = new double[3];
        gait_disturbance = new double[3];
        gait_recovery = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x86997f7be4843cebL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.quadruped_menu_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.quadruped_menu_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte( this.cheater_mode ? 1 : 0); 
 
        outs.writeLong(this.control_mode); 
 
        outs.writeByte( this.use_wbc ? 1 : 0); 
 
        outs.writeByte( this.use_rc ? 1 : 0); 
 
        outs.writeByte( this.display_heightmap ? 1 : 0); 
 
        outs.writeByte( this.display_path_planning ? 1 : 0); 
 
        outs.writeByte( this.display_potential_field ? 1 : 0); 
 
        outs.writeByte( this.display_traverability ? 1 : 0); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_body[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_cam[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_clm[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_foot[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_joint[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_ori[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_body[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_cam[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_clm[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_foot[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_joint[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_ori[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Q_ang[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Q_ori[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Q_pos[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Q_vel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_H_phi0[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_H_r_rot[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_H_r_trans[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_H_theta0[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_Q_dp[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_Q_dtheta[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_Q_p[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_Q_theta[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_R_f[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_R_r[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_filter[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_gravity[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.RPC_inertia[a]); 
        }
 
        outs.writeDouble(this.RPC_interface_type); 
 
        outs.writeDouble(this.RPC_mass); 
 
        outs.writeDouble(this.RPC_mu); 
 
        outs.writeDouble(this.RPC_use_async_filt); 
 
        outs.writeDouble(this.RPC_use_pred_comp); 
 
        outs.writeDouble(this.RPC_visualize_pred); 
 
        outs.writeDouble(this.R_control); 
 
        outs.writeDouble(this.R_prev); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Swing_Kd_cartesian[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Swing_Kd_joint[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Swing_Kp_cartesian[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Swing_Kp_joint[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Swing_step_offset[a]); 
        }
 
        outs.writeDouble(this.Swing_traj_height); 
 
        outs.writeDouble(this.Swing_use_tau_ff); 
 
        outs.writeDouble(this.acro_task); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.des_dp[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.des_dp_max[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.des_dtheta[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.des_dtheta_max[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.des_p[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.des_theta[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.des_theta_max[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.gait_disturbance[a]); 
        }
 
        outs.writeDouble(this.gait_max_leg_angle); 
 
        outs.writeDouble(this.gait_max_stance_time); 
 
        outs.writeDouble(this.gait_min_stance_time); 
 
        outs.writeDouble(this.gait_override); 
 
        outs.writeDouble(this.gait_period_time); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.gait_recovery[a]); 
        }
 
        outs.writeDouble(this.gait_switching_phase); 
 
        outs.writeDouble(this.gait_type); 
 
        outs.writeDouble(this.stance_legs); 
 
    }
 
    public quadruped_menu_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public quadruped_menu_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.quadruped_menu_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.quadruped_menu_data_lcmt o = new lcmtypes.quadruped_menu_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.cheater_mode = ins.readByte()!=0;
 
        this.control_mode = ins.readLong();
 
        this.use_wbc = ins.readByte()!=0;
 
        this.use_rc = ins.readByte()!=0;
 
        this.display_heightmap = ins.readByte()!=0;
 
        this.display_path_planning = ins.readByte()!=0;
 
        this.display_potential_field = ins.readByte()!=0;
 
        this.display_traverability = ins.readByte()!=0;
 
        this.Kd_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_body[a] = ins.readDouble();
        }
 
        this.Kd_cam = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_cam[a] = ins.readDouble();
        }
 
        this.Kd_clm = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_clm[a] = ins.readDouble();
        }
 
        this.Kd_foot = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_foot[a] = ins.readDouble();
        }
 
        this.Kd_joint = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_joint[a] = ins.readDouble();
        }
 
        this.Kd_ori = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_ori[a] = ins.readDouble();
        }
 
        this.Kp_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_body[a] = ins.readDouble();
        }
 
        this.Kp_cam = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_cam[a] = ins.readDouble();
        }
 
        this.Kp_clm = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_clm[a] = ins.readDouble();
        }
 
        this.Kp_foot = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_foot[a] = ins.readDouble();
        }
 
        this.Kp_joint = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_joint[a] = ins.readDouble();
        }
 
        this.Kp_ori = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_ori[a] = ins.readDouble();
        }
 
        this.Q_ang = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Q_ang[a] = ins.readDouble();
        }
 
        this.Q_ori = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Q_ori[a] = ins.readDouble();
        }
 
        this.Q_pos = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Q_pos[a] = ins.readDouble();
        }
 
        this.Q_vel = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Q_vel[a] = ins.readDouble();
        }
 
        this.RPC_H_phi0 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_H_phi0[a] = ins.readDouble();
        }
 
        this.RPC_H_r_rot = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_H_r_rot[a] = ins.readDouble();
        }
 
        this.RPC_H_r_trans = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_H_r_trans[a] = ins.readDouble();
        }
 
        this.RPC_H_theta0 = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_H_theta0[a] = ins.readDouble();
        }
 
        this.RPC_Q_dp = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_Q_dp[a] = ins.readDouble();
        }
 
        this.RPC_Q_dtheta = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_Q_dtheta[a] = ins.readDouble();
        }
 
        this.RPC_Q_p = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_Q_p[a] = ins.readDouble();
        }
 
        this.RPC_Q_theta = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_Q_theta[a] = ins.readDouble();
        }
 
        this.RPC_R_f = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_R_f[a] = ins.readDouble();
        }
 
        this.RPC_R_r = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_R_r[a] = ins.readDouble();
        }
 
        this.RPC_filter = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_filter[a] = ins.readDouble();
        }
 
        this.RPC_gravity = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_gravity[a] = ins.readDouble();
        }
 
        this.RPC_inertia = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.RPC_inertia[a] = ins.readDouble();
        }
 
        this.RPC_interface_type = ins.readDouble();
 
        this.RPC_mass = ins.readDouble();
 
        this.RPC_mu = ins.readDouble();
 
        this.RPC_use_async_filt = ins.readDouble();
 
        this.RPC_use_pred_comp = ins.readDouble();
 
        this.RPC_visualize_pred = ins.readDouble();
 
        this.R_control = ins.readDouble();
 
        this.R_prev = ins.readDouble();
 
        this.Swing_Kd_cartesian = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Swing_Kd_cartesian[a] = ins.readDouble();
        }
 
        this.Swing_Kd_joint = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Swing_Kd_joint[a] = ins.readDouble();
        }
 
        this.Swing_Kp_cartesian = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Swing_Kp_cartesian[a] = ins.readDouble();
        }
 
        this.Swing_Kp_joint = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Swing_Kp_joint[a] = ins.readDouble();
        }
 
        this.Swing_step_offset = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Swing_step_offset[a] = ins.readDouble();
        }
 
        this.Swing_traj_height = ins.readDouble();
 
        this.Swing_use_tau_ff = ins.readDouble();
 
        this.acro_task = ins.readDouble();
 
        this.des_dp = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.des_dp[a] = ins.readDouble();
        }
 
        this.des_dp_max = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.des_dp_max[a] = ins.readDouble();
        }
 
        this.des_dtheta = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.des_dtheta[a] = ins.readDouble();
        }
 
        this.des_dtheta_max = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.des_dtheta_max[a] = ins.readDouble();
        }
 
        this.des_p = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.des_p[a] = ins.readDouble();
        }
 
        this.des_theta = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.des_theta[a] = ins.readDouble();
        }
 
        this.des_theta_max = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.des_theta_max[a] = ins.readDouble();
        }
 
        this.gait_disturbance = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.gait_disturbance[a] = ins.readDouble();
        }
 
        this.gait_max_leg_angle = ins.readDouble();
 
        this.gait_max_stance_time = ins.readDouble();
 
        this.gait_min_stance_time = ins.readDouble();
 
        this.gait_override = ins.readDouble();
 
        this.gait_period_time = ins.readDouble();
 
        this.gait_recovery = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.gait_recovery[a] = ins.readDouble();
        }
 
        this.gait_switching_phase = ins.readDouble();
 
        this.gait_type = ins.readDouble();
 
        this.stance_legs = ins.readDouble();
 
    }
 
    public lcmtypes.quadruped_menu_data_lcmt copy()
    {
        lcmtypes.quadruped_menu_data_lcmt outobj = new lcmtypes.quadruped_menu_data_lcmt();
        outobj.cheater_mode = this.cheater_mode;
 
        outobj.control_mode = this.control_mode;
 
        outobj.use_wbc = this.use_wbc;
 
        outobj.use_rc = this.use_rc;
 
        outobj.display_heightmap = this.display_heightmap;
 
        outobj.display_path_planning = this.display_path_planning;
 
        outobj.display_potential_field = this.display_potential_field;
 
        outobj.display_traverability = this.display_traverability;
 
        outobj.Kd_body = new double[(int) 3];
        System.arraycopy(this.Kd_body, 0, outobj.Kd_body, 0, 3); 
        outobj.Kd_cam = new double[(int) 3];
        System.arraycopy(this.Kd_cam, 0, outobj.Kd_cam, 0, 3); 
        outobj.Kd_clm = new double[(int) 3];
        System.arraycopy(this.Kd_clm, 0, outobj.Kd_clm, 0, 3); 
        outobj.Kd_foot = new double[(int) 3];
        System.arraycopy(this.Kd_foot, 0, outobj.Kd_foot, 0, 3); 
        outobj.Kd_joint = new double[(int) 3];
        System.arraycopy(this.Kd_joint, 0, outobj.Kd_joint, 0, 3); 
        outobj.Kd_ori = new double[(int) 3];
        System.arraycopy(this.Kd_ori, 0, outobj.Kd_ori, 0, 3); 
        outobj.Kp_body = new double[(int) 3];
        System.arraycopy(this.Kp_body, 0, outobj.Kp_body, 0, 3); 
        outobj.Kp_cam = new double[(int) 3];
        System.arraycopy(this.Kp_cam, 0, outobj.Kp_cam, 0, 3); 
        outobj.Kp_clm = new double[(int) 3];
        System.arraycopy(this.Kp_clm, 0, outobj.Kp_clm, 0, 3); 
        outobj.Kp_foot = new double[(int) 3];
        System.arraycopy(this.Kp_foot, 0, outobj.Kp_foot, 0, 3); 
        outobj.Kp_joint = new double[(int) 3];
        System.arraycopy(this.Kp_joint, 0, outobj.Kp_joint, 0, 3); 
        outobj.Kp_ori = new double[(int) 3];
        System.arraycopy(this.Kp_ori, 0, outobj.Kp_ori, 0, 3); 
        outobj.Q_ang = new double[(int) 3];
        System.arraycopy(this.Q_ang, 0, outobj.Q_ang, 0, 3); 
        outobj.Q_ori = new double[(int) 3];
        System.arraycopy(this.Q_ori, 0, outobj.Q_ori, 0, 3); 
        outobj.Q_pos = new double[(int) 3];
        System.arraycopy(this.Q_pos, 0, outobj.Q_pos, 0, 3); 
        outobj.Q_vel = new double[(int) 3];
        System.arraycopy(this.Q_vel, 0, outobj.Q_vel, 0, 3); 
        outobj.RPC_H_phi0 = new double[(int) 3];
        System.arraycopy(this.RPC_H_phi0, 0, outobj.RPC_H_phi0, 0, 3); 
        outobj.RPC_H_r_rot = new double[(int) 3];
        System.arraycopy(this.RPC_H_r_rot, 0, outobj.RPC_H_r_rot, 0, 3); 
        outobj.RPC_H_r_trans = new double[(int) 3];
        System.arraycopy(this.RPC_H_r_trans, 0, outobj.RPC_H_r_trans, 0, 3); 
        outobj.RPC_H_theta0 = new double[(int) 3];
        System.arraycopy(this.RPC_H_theta0, 0, outobj.RPC_H_theta0, 0, 3); 
        outobj.RPC_Q_dp = new double[(int) 3];
        System.arraycopy(this.RPC_Q_dp, 0, outobj.RPC_Q_dp, 0, 3); 
        outobj.RPC_Q_dtheta = new double[(int) 3];
        System.arraycopy(this.RPC_Q_dtheta, 0, outobj.RPC_Q_dtheta, 0, 3); 
        outobj.RPC_Q_p = new double[(int) 3];
        System.arraycopy(this.RPC_Q_p, 0, outobj.RPC_Q_p, 0, 3); 
        outobj.RPC_Q_theta = new double[(int) 3];
        System.arraycopy(this.RPC_Q_theta, 0, outobj.RPC_Q_theta, 0, 3); 
        outobj.RPC_R_f = new double[(int) 3];
        System.arraycopy(this.RPC_R_f, 0, outobj.RPC_R_f, 0, 3); 
        outobj.RPC_R_r = new double[(int) 3];
        System.arraycopy(this.RPC_R_r, 0, outobj.RPC_R_r, 0, 3); 
        outobj.RPC_filter = new double[(int) 3];
        System.arraycopy(this.RPC_filter, 0, outobj.RPC_filter, 0, 3); 
        outobj.RPC_gravity = new double[(int) 3];
        System.arraycopy(this.RPC_gravity, 0, outobj.RPC_gravity, 0, 3); 
        outobj.RPC_inertia = new double[(int) 3];
        System.arraycopy(this.RPC_inertia, 0, outobj.RPC_inertia, 0, 3); 
        outobj.RPC_interface_type = this.RPC_interface_type;
 
        outobj.RPC_mass = this.RPC_mass;
 
        outobj.RPC_mu = this.RPC_mu;
 
        outobj.RPC_use_async_filt = this.RPC_use_async_filt;
 
        outobj.RPC_use_pred_comp = this.RPC_use_pred_comp;
 
        outobj.RPC_visualize_pred = this.RPC_visualize_pred;
 
        outobj.R_control = this.R_control;
 
        outobj.R_prev = this.R_prev;
 
        outobj.Swing_Kd_cartesian = new double[(int) 3];
        System.arraycopy(this.Swing_Kd_cartesian, 0, outobj.Swing_Kd_cartesian, 0, 3); 
        outobj.Swing_Kd_joint = new double[(int) 3];
        System.arraycopy(this.Swing_Kd_joint, 0, outobj.Swing_Kd_joint, 0, 3); 
        outobj.Swing_Kp_cartesian = new double[(int) 3];
        System.arraycopy(this.Swing_Kp_cartesian, 0, outobj.Swing_Kp_cartesian, 0, 3); 
        outobj.Swing_Kp_joint = new double[(int) 3];
        System.arraycopy(this.Swing_Kp_joint, 0, outobj.Swing_Kp_joint, 0, 3); 
        outobj.Swing_step_offset = new double[(int) 3];
        System.arraycopy(this.Swing_step_offset, 0, outobj.Swing_step_offset, 0, 3); 
        outobj.Swing_traj_height = this.Swing_traj_height;
 
        outobj.Swing_use_tau_ff = this.Swing_use_tau_ff;
 
        outobj.acro_task = this.acro_task;
 
        outobj.des_dp = new double[(int) 3];
        System.arraycopy(this.des_dp, 0, outobj.des_dp, 0, 3); 
        outobj.des_dp_max = new double[(int) 3];
        System.arraycopy(this.des_dp_max, 0, outobj.des_dp_max, 0, 3); 
        outobj.des_dtheta = new double[(int) 3];
        System.arraycopy(this.des_dtheta, 0, outobj.des_dtheta, 0, 3); 
        outobj.des_dtheta_max = new double[(int) 3];
        System.arraycopy(this.des_dtheta_max, 0, outobj.des_dtheta_max, 0, 3); 
        outobj.des_p = new double[(int) 3];
        System.arraycopy(this.des_p, 0, outobj.des_p, 0, 3); 
        outobj.des_theta = new double[(int) 3];
        System.arraycopy(this.des_theta, 0, outobj.des_theta, 0, 3); 
        outobj.des_theta_max = new double[(int) 3];
        System.arraycopy(this.des_theta_max, 0, outobj.des_theta_max, 0, 3); 
        outobj.gait_disturbance = new double[(int) 3];
        System.arraycopy(this.gait_disturbance, 0, outobj.gait_disturbance, 0, 3); 
        outobj.gait_max_leg_angle = this.gait_max_leg_angle;
 
        outobj.gait_max_stance_time = this.gait_max_stance_time;
 
        outobj.gait_min_stance_time = this.gait_min_stance_time;
 
        outobj.gait_override = this.gait_override;
 
        outobj.gait_period_time = this.gait_period_time;
 
        outobj.gait_recovery = new double[(int) 3];
        System.arraycopy(this.gait_recovery, 0, outobj.gait_recovery, 0, 3); 
        outobj.gait_switching_phase = this.gait_switching_phase;
 
        outobj.gait_type = this.gait_type;
 
        outobj.stance_legs = this.stance_legs;
 
        return outobj;
    }
 
}

