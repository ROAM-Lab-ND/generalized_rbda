/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class grid_map_lcmt implements lcm.lcm.LCMEncodable
{
    public int rows;
    public int cols;
    public int totalCells;
    public float resolution;
    public float center[];
    public float heightmap[];
    public int indexmap[];
 
    public grid_map_lcmt()
    {
        center = new float[2];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x97c8d40346e867d2L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.grid_map_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.grid_map_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.rows); 
 
        outs.writeInt(this.cols); 
 
        outs.writeInt(this.totalCells); 
 
        outs.writeFloat(this.resolution); 
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.center[a]); 
        }
 
        for (int a = 0; a < this.totalCells; a++) {
            outs.writeFloat(this.heightmap[a]); 
        }
 
        for (int a = 0; a < this.totalCells; a++) {
            outs.writeInt(this.indexmap[a]); 
        }
 
    }
 
    public grid_map_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public grid_map_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.grid_map_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.grid_map_lcmt o = new lcmtypes.grid_map_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.rows = ins.readInt();
 
        this.cols = ins.readInt();
 
        this.totalCells = ins.readInt();
 
        this.resolution = ins.readFloat();
 
        this.center = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.center[a] = ins.readFloat();
        }
 
        this.heightmap = new float[(int) totalCells];
        for (int a = 0; a < this.totalCells; a++) {
            this.heightmap[a] = ins.readFloat();
        }
 
        this.indexmap = new int[(int) totalCells];
        for (int a = 0; a < this.totalCells; a++) {
            this.indexmap[a] = ins.readInt();
        }
 
    }
 
    public lcmtypes.grid_map_lcmt copy()
    {
        lcmtypes.grid_map_lcmt outobj = new lcmtypes.grid_map_lcmt();
        outobj.rows = this.rows;
 
        outobj.cols = this.cols;
 
        outobj.totalCells = this.totalCells;
 
        outobj.resolution = this.resolution;
 
        outobj.center = new float[(int) 2];
        System.arraycopy(this.center, 0, outobj.center, 0, 2); 
        outobj.heightmap = new float[(int) totalCells];
        if (this.totalCells > 0)
            System.arraycopy(this.heightmap, 0, outobj.heightmap, 0, this.totalCells); 
        outobj.indexmap = new int[(int) totalCells];
        if (this.totalCells > 0)
            System.arraycopy(this.indexmap, 0, outobj.indexmap, 0, this.totalCells); 
        return outobj;
    }
 
}

