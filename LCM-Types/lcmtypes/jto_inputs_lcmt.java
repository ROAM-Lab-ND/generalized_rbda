/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class jto_inputs_lcmt implements lcm.lcm.LCMEncodable
{
    public int num_timesteps;
    public double dt;
    public double state_min0[];
    public double state_max0[];
    public double foot_min0[];
    public double foot_max0[];
    public double x_warm_start[];
    public double u_warm_start[];
    public double x_reference[];
    public double u_reference[];
    public double contact_state[];
    public double state_min[];
    public double state_max[];
    public double force_min[];
    public double force_max[];
    public double mu[];
    public double Q[];
    public double Q_f[];
    public double R[];
 
    public jto_inputs_lcmt()
    {
        state_min0 = new double[12];
        state_max0 = new double[12];
        foot_min0 = new double[12];
        foot_max0 = new double[12];
        x_warm_start = new double[360];
        u_warm_start = new double[720];
        x_reference = new double[360];
        u_reference = new double[720];
        contact_state = new double[124];
        state_min = new double[12];
        state_max = new double[12];
        force_min = new double[12];
        force_max = new double[12];
        mu = new double[4];
        Q = new double[12];
        Q_f = new double[12];
        R = new double[24];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8633f902b49a12eaL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.jto_inputs_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.jto_inputs_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.num_timesteps); 
 
        outs.writeDouble(this.dt); 
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.state_min0[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.state_max0[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.foot_min0[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.foot_max0[a]); 
        }
 
        for (int a = 0; a < 360; a++) {
            outs.writeDouble(this.x_warm_start[a]); 
        }
 
        for (int a = 0; a < 720; a++) {
            outs.writeDouble(this.u_warm_start[a]); 
        }
 
        for (int a = 0; a < 360; a++) {
            outs.writeDouble(this.x_reference[a]); 
        }
 
        for (int a = 0; a < 720; a++) {
            outs.writeDouble(this.u_reference[a]); 
        }
 
        for (int a = 0; a < 124; a++) {
            outs.writeDouble(this.contact_state[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.state_min[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.state_max[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.force_min[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.force_max[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.mu[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.Q[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.Q_f[a]); 
        }
 
        for (int a = 0; a < 24; a++) {
            outs.writeDouble(this.R[a]); 
        }
 
    }
 
    public jto_inputs_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public jto_inputs_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.jto_inputs_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.jto_inputs_lcmt o = new lcmtypes.jto_inputs_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.num_timesteps = ins.readInt();
 
        this.dt = ins.readDouble();
 
        this.state_min0 = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.state_min0[a] = ins.readDouble();
        }
 
        this.state_max0 = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.state_max0[a] = ins.readDouble();
        }
 
        this.foot_min0 = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_min0[a] = ins.readDouble();
        }
 
        this.foot_max0 = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.foot_max0[a] = ins.readDouble();
        }
 
        this.x_warm_start = new double[(int) 360];
        for (int a = 0; a < 360; a++) {
            this.x_warm_start[a] = ins.readDouble();
        }
 
        this.u_warm_start = new double[(int) 720];
        for (int a = 0; a < 720; a++) {
            this.u_warm_start[a] = ins.readDouble();
        }
 
        this.x_reference = new double[(int) 360];
        for (int a = 0; a < 360; a++) {
            this.x_reference[a] = ins.readDouble();
        }
 
        this.u_reference = new double[(int) 720];
        for (int a = 0; a < 720; a++) {
            this.u_reference[a] = ins.readDouble();
        }
 
        this.contact_state = new double[(int) 124];
        for (int a = 0; a < 124; a++) {
            this.contact_state[a] = ins.readDouble();
        }
 
        this.state_min = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.state_min[a] = ins.readDouble();
        }
 
        this.state_max = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.state_max[a] = ins.readDouble();
        }
 
        this.force_min = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.force_min[a] = ins.readDouble();
        }
 
        this.force_max = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.force_max[a] = ins.readDouble();
        }
 
        this.mu = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.mu[a] = ins.readDouble();
        }
 
        this.Q = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.Q[a] = ins.readDouble();
        }
 
        this.Q_f = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.Q_f[a] = ins.readDouble();
        }
 
        this.R = new double[(int) 24];
        for (int a = 0; a < 24; a++) {
            this.R[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.jto_inputs_lcmt copy()
    {
        lcmtypes.jto_inputs_lcmt outobj = new lcmtypes.jto_inputs_lcmt();
        outobj.num_timesteps = this.num_timesteps;
 
        outobj.dt = this.dt;
 
        outobj.state_min0 = new double[(int) 12];
        System.arraycopy(this.state_min0, 0, outobj.state_min0, 0, 12); 
        outobj.state_max0 = new double[(int) 12];
        System.arraycopy(this.state_max0, 0, outobj.state_max0, 0, 12); 
        outobj.foot_min0 = new double[(int) 12];
        System.arraycopy(this.foot_min0, 0, outobj.foot_min0, 0, 12); 
        outobj.foot_max0 = new double[(int) 12];
        System.arraycopy(this.foot_max0, 0, outobj.foot_max0, 0, 12); 
        outobj.x_warm_start = new double[(int) 360];
        System.arraycopy(this.x_warm_start, 0, outobj.x_warm_start, 0, 360); 
        outobj.u_warm_start = new double[(int) 720];
        System.arraycopy(this.u_warm_start, 0, outobj.u_warm_start, 0, 720); 
        outobj.x_reference = new double[(int) 360];
        System.arraycopy(this.x_reference, 0, outobj.x_reference, 0, 360); 
        outobj.u_reference = new double[(int) 720];
        System.arraycopy(this.u_reference, 0, outobj.u_reference, 0, 720); 
        outobj.contact_state = new double[(int) 124];
        System.arraycopy(this.contact_state, 0, outobj.contact_state, 0, 124); 
        outobj.state_min = new double[(int) 12];
        System.arraycopy(this.state_min, 0, outobj.state_min, 0, 12); 
        outobj.state_max = new double[(int) 12];
        System.arraycopy(this.state_max, 0, outobj.state_max, 0, 12); 
        outobj.force_min = new double[(int) 12];
        System.arraycopy(this.force_min, 0, outobj.force_min, 0, 12); 
        outobj.force_max = new double[(int) 12];
        System.arraycopy(this.force_max, 0, outobj.force_max, 0, 12); 
        outobj.mu = new double[(int) 4];
        System.arraycopy(this.mu, 0, outobj.mu, 0, 4); 
        outobj.Q = new double[(int) 12];
        System.arraycopy(this.Q, 0, outobj.Q, 0, 12); 
        outobj.Q_f = new double[(int) 12];
        System.arraycopy(this.Q_f, 0, outobj.Q_f, 0, 12); 
        outobj.R = new double[(int) 24];
        System.arraycopy(this.R, 0, outobj.R, 0, 24); 
        return outobj;
    }
 
}

