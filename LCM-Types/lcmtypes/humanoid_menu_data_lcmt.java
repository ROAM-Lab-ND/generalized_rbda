/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class humanoid_menu_data_lcmt implements lcm.lcm.LCMEncodable
{
    public boolean cheater_mode;
    public long control_mode;
    public boolean use_wbc;
    public boolean use_rc;
    public boolean display_heightmap;
    public boolean display_path_planning;
    public boolean display_potential_field;
    public boolean display_traverability;
    public double Kd_body[];
    public double Kd_cam[];
    public double Kd_clm[];
    public double Kd_foot[];
    public double Kd_joint[];
    public double Kd_ori[];
    public double Kp_body[];
    public double Kp_cam[];
    public double Kp_clm[];
    public double Kp_foot[];
    public double Kp_joint[];
    public double Kp_ori[];
 
    public humanoid_menu_data_lcmt()
    {
        Kd_body = new double[3];
        Kd_cam = new double[3];
        Kd_clm = new double[3];
        Kd_foot = new double[3];
        Kd_joint = new double[3];
        Kd_ori = new double[3];
        Kp_body = new double[3];
        Kp_cam = new double[3];
        Kp_clm = new double[3];
        Kp_foot = new double[3];
        Kp_joint = new double[3];
        Kp_ori = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7945c66fec25576aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.humanoid_menu_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.humanoid_menu_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte( this.cheater_mode ? 1 : 0); 
 
        outs.writeLong(this.control_mode); 
 
        outs.writeByte( this.use_wbc ? 1 : 0); 
 
        outs.writeByte( this.use_rc ? 1 : 0); 
 
        outs.writeByte( this.display_heightmap ? 1 : 0); 
 
        outs.writeByte( this.display_path_planning ? 1 : 0); 
 
        outs.writeByte( this.display_potential_field ? 1 : 0); 
 
        outs.writeByte( this.display_traverability ? 1 : 0); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_body[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_cam[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_clm[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_foot[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_joint[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kd_ori[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_body[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_cam[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_clm[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_foot[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_joint[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.Kp_ori[a]); 
        }
 
    }
 
    public humanoid_menu_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public humanoid_menu_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.humanoid_menu_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.humanoid_menu_data_lcmt o = new lcmtypes.humanoid_menu_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.cheater_mode = ins.readByte()!=0;
 
        this.control_mode = ins.readLong();
 
        this.use_wbc = ins.readByte()!=0;
 
        this.use_rc = ins.readByte()!=0;
 
        this.display_heightmap = ins.readByte()!=0;
 
        this.display_path_planning = ins.readByte()!=0;
 
        this.display_potential_field = ins.readByte()!=0;
 
        this.display_traverability = ins.readByte()!=0;
 
        this.Kd_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_body[a] = ins.readDouble();
        }
 
        this.Kd_cam = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_cam[a] = ins.readDouble();
        }
 
        this.Kd_clm = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_clm[a] = ins.readDouble();
        }
 
        this.Kd_foot = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_foot[a] = ins.readDouble();
        }
 
        this.Kd_joint = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_joint[a] = ins.readDouble();
        }
 
        this.Kd_ori = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kd_ori[a] = ins.readDouble();
        }
 
        this.Kp_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_body[a] = ins.readDouble();
        }
 
        this.Kp_cam = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_cam[a] = ins.readDouble();
        }
 
        this.Kp_clm = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_clm[a] = ins.readDouble();
        }
 
        this.Kp_foot = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_foot[a] = ins.readDouble();
        }
 
        this.Kp_joint = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_joint[a] = ins.readDouble();
        }
 
        this.Kp_ori = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.Kp_ori[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.humanoid_menu_data_lcmt copy()
    {
        lcmtypes.humanoid_menu_data_lcmt outobj = new lcmtypes.humanoid_menu_data_lcmt();
        outobj.cheater_mode = this.cheater_mode;
 
        outobj.control_mode = this.control_mode;
 
        outobj.use_wbc = this.use_wbc;
 
        outobj.use_rc = this.use_rc;
 
        outobj.display_heightmap = this.display_heightmap;
 
        outobj.display_path_planning = this.display_path_planning;
 
        outobj.display_potential_field = this.display_potential_field;
 
        outobj.display_traverability = this.display_traverability;
 
        outobj.Kd_body = new double[(int) 3];
        System.arraycopy(this.Kd_body, 0, outobj.Kd_body, 0, 3); 
        outobj.Kd_cam = new double[(int) 3];
        System.arraycopy(this.Kd_cam, 0, outobj.Kd_cam, 0, 3); 
        outobj.Kd_clm = new double[(int) 3];
        System.arraycopy(this.Kd_clm, 0, outobj.Kd_clm, 0, 3); 
        outobj.Kd_foot = new double[(int) 3];
        System.arraycopy(this.Kd_foot, 0, outobj.Kd_foot, 0, 3); 
        outobj.Kd_joint = new double[(int) 3];
        System.arraycopy(this.Kd_joint, 0, outobj.Kd_joint, 0, 3); 
        outobj.Kd_ori = new double[(int) 3];
        System.arraycopy(this.Kd_ori, 0, outobj.Kd_ori, 0, 3); 
        outobj.Kp_body = new double[(int) 3];
        System.arraycopy(this.Kp_body, 0, outobj.Kp_body, 0, 3); 
        outobj.Kp_cam = new double[(int) 3];
        System.arraycopy(this.Kp_cam, 0, outobj.Kp_cam, 0, 3); 
        outobj.Kp_clm = new double[(int) 3];
        System.arraycopy(this.Kp_clm, 0, outobj.Kp_clm, 0, 3); 
        outobj.Kp_foot = new double[(int) 3];
        System.arraycopy(this.Kp_foot, 0, outobj.Kp_foot, 0, 3); 
        outobj.Kp_joint = new double[(int) 3];
        System.arraycopy(this.Kp_joint, 0, outobj.Kp_joint, 0, 3); 
        outobj.Kp_ori = new double[(int) 3];
        System.arraycopy(this.Kp_ori, 0, outobj.Kp_ori, 0, 3); 
        return outobj;
    }
 
}

