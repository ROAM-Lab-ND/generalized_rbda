/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class humanoid_gait_lcmt implements lcm.lcm.LCMEncodable
{
    public double contactStateScheduled[];
    public double contactStatePrev[];
    public double touchdownScheduled[];
    public double liftoffScheduled[];
    public double phaseVariable[];
    public double phaseStance[];
    public double phaseSwing[];
    public double timeStanceRemaining[];
    public double timeSwingRemaining[];
    public double periodTime[];
    public double timeStance[];
    public double timeSwing[];
    public double switchingPhase[];
    public double phaseOffset[];
    public double phaseScale[];
 
    public humanoid_gait_lcmt()
    {
        contactStateScheduled = new double[4];
        contactStatePrev = new double[4];
        touchdownScheduled = new double[4];
        liftoffScheduled = new double[4];
        phaseVariable = new double[4];
        phaseStance = new double[4];
        phaseSwing = new double[4];
        timeStanceRemaining = new double[4];
        timeSwingRemaining = new double[4];
        periodTime = new double[4];
        timeStance = new double[4];
        timeSwing = new double[4];
        switchingPhase = new double[4];
        phaseOffset = new double[4];
        phaseScale = new double[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x83dcdfcbb409ec9aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.humanoid_gait_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.humanoid_gait_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.contactStateScheduled[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.contactStatePrev[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.touchdownScheduled[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.liftoffScheduled[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.phaseVariable[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.phaseStance[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.phaseSwing[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.timeStanceRemaining[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.timeSwingRemaining[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.periodTime[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.timeStance[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.timeSwing[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.switchingPhase[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.phaseOffset[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.phaseScale[a]); 
        }
 
    }
 
    public humanoid_gait_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public humanoid_gait_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.humanoid_gait_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.humanoid_gait_lcmt o = new lcmtypes.humanoid_gait_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.contactStateScheduled = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.contactStateScheduled[a] = ins.readDouble();
        }
 
        this.contactStatePrev = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.contactStatePrev[a] = ins.readDouble();
        }
 
        this.touchdownScheduled = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.touchdownScheduled[a] = ins.readDouble();
        }
 
        this.liftoffScheduled = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.liftoffScheduled[a] = ins.readDouble();
        }
 
        this.phaseVariable = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.phaseVariable[a] = ins.readDouble();
        }
 
        this.phaseStance = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.phaseStance[a] = ins.readDouble();
        }
 
        this.phaseSwing = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.phaseSwing[a] = ins.readDouble();
        }
 
        this.timeStanceRemaining = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.timeStanceRemaining[a] = ins.readDouble();
        }
 
        this.timeSwingRemaining = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.timeSwingRemaining[a] = ins.readDouble();
        }
 
        this.periodTime = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.periodTime[a] = ins.readDouble();
        }
 
        this.timeStance = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.timeStance[a] = ins.readDouble();
        }
 
        this.timeSwing = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.timeSwing[a] = ins.readDouble();
        }
 
        this.switchingPhase = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.switchingPhase[a] = ins.readDouble();
        }
 
        this.phaseOffset = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.phaseOffset[a] = ins.readDouble();
        }
 
        this.phaseScale = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.phaseScale[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.humanoid_gait_lcmt copy()
    {
        lcmtypes.humanoid_gait_lcmt outobj = new lcmtypes.humanoid_gait_lcmt();
        outobj.contactStateScheduled = new double[(int) 4];
        System.arraycopy(this.contactStateScheduled, 0, outobj.contactStateScheduled, 0, 4); 
        outobj.contactStatePrev = new double[(int) 4];
        System.arraycopy(this.contactStatePrev, 0, outobj.contactStatePrev, 0, 4); 
        outobj.touchdownScheduled = new double[(int) 4];
        System.arraycopy(this.touchdownScheduled, 0, outobj.touchdownScheduled, 0, 4); 
        outobj.liftoffScheduled = new double[(int) 4];
        System.arraycopy(this.liftoffScheduled, 0, outobj.liftoffScheduled, 0, 4); 
        outobj.phaseVariable = new double[(int) 4];
        System.arraycopy(this.phaseVariable, 0, outobj.phaseVariable, 0, 4); 
        outobj.phaseStance = new double[(int) 4];
        System.arraycopy(this.phaseStance, 0, outobj.phaseStance, 0, 4); 
        outobj.phaseSwing = new double[(int) 4];
        System.arraycopy(this.phaseSwing, 0, outobj.phaseSwing, 0, 4); 
        outobj.timeStanceRemaining = new double[(int) 4];
        System.arraycopy(this.timeStanceRemaining, 0, outobj.timeStanceRemaining, 0, 4); 
        outobj.timeSwingRemaining = new double[(int) 4];
        System.arraycopy(this.timeSwingRemaining, 0, outobj.timeSwingRemaining, 0, 4); 
        outobj.periodTime = new double[(int) 4];
        System.arraycopy(this.periodTime, 0, outobj.periodTime, 0, 4); 
        outobj.timeStance = new double[(int) 4];
        System.arraycopy(this.timeStance, 0, outobj.timeStance, 0, 4); 
        outobj.timeSwing = new double[(int) 4];
        System.arraycopy(this.timeSwing, 0, outobj.timeSwing, 0, 4); 
        outobj.switchingPhase = new double[(int) 4];
        System.arraycopy(this.switchingPhase, 0, outobj.switchingPhase, 0, 4); 
        outobj.phaseOffset = new double[(int) 4];
        System.arraycopy(this.phaseOffset, 0, outobj.phaseOffset, 0, 4); 
        outobj.phaseScale = new double[(int) 4];
        System.arraycopy(this.phaseScale, 0, outobj.phaseScale, 0, 4); 
        return outobj;
    }
 
}

