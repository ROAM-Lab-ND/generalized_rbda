/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class desired_state_command_lcmt implements lcm.lcm.LCMEncodable
{
    public double next_point[];
    public double cur_pos[];
    public double cur_yaw;
    public double pos_error_world[];
    public double pos_error_body[];
    public double heading_direction;
    public double yaw_error;
    public double des_vel[];
 
    public desired_state_command_lcmt()
    {
        next_point = new double[2];
        cur_pos = new double[2];
        pos_error_world = new double[2];
        pos_error_body = new double[2];
        des_vel = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x22b865cb04f82213L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.desired_state_command_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.desired_state_command_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.next_point[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.cur_pos[a]); 
        }
 
        outs.writeDouble(this.cur_yaw); 
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.pos_error_world[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.pos_error_body[a]); 
        }
 
        outs.writeDouble(this.heading_direction); 
 
        outs.writeDouble(this.yaw_error); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.des_vel[a]); 
        }
 
    }
 
    public desired_state_command_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public desired_state_command_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.desired_state_command_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.desired_state_command_lcmt o = new lcmtypes.desired_state_command_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.next_point = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.next_point[a] = ins.readDouble();
        }
 
        this.cur_pos = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.cur_pos[a] = ins.readDouble();
        }
 
        this.cur_yaw = ins.readDouble();
 
        this.pos_error_world = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.pos_error_world[a] = ins.readDouble();
        }
 
        this.pos_error_body = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.pos_error_body[a] = ins.readDouble();
        }
 
        this.heading_direction = ins.readDouble();
 
        this.yaw_error = ins.readDouble();
 
        this.des_vel = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.des_vel[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.desired_state_command_lcmt copy()
    {
        lcmtypes.desired_state_command_lcmt outobj = new lcmtypes.desired_state_command_lcmt();
        outobj.next_point = new double[(int) 2];
        System.arraycopy(this.next_point, 0, outobj.next_point, 0, 2); 
        outobj.cur_pos = new double[(int) 2];
        System.arraycopy(this.cur_pos, 0, outobj.cur_pos, 0, 2); 
        outobj.cur_yaw = this.cur_yaw;
 
        outobj.pos_error_world = new double[(int) 2];
        System.arraycopy(this.pos_error_world, 0, outobj.pos_error_world, 0, 2); 
        outobj.pos_error_body = new double[(int) 2];
        System.arraycopy(this.pos_error_body, 0, outobj.pos_error_body, 0, 2); 
        outobj.heading_direction = this.heading_direction;
 
        outobj.yaw_error = this.yaw_error;
 
        outobj.des_vel = new double[(int) 3];
        System.arraycopy(this.des_vel, 0, outobj.des_vel, 0, 3); 
        return outobj;
    }
 
}

