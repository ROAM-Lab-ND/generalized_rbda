/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class kmpc_outputs_lcmt implements lcm.lcm.LCMEncodable
{
    public int iter;
    public int opt_solved;
    public double cpu_opt_time_microseconds;
    public double t_sent;
    public double time_start;
    public double p_body[];
    public double rpy[];
    public double q_leg[];
    public double v_body[];
    public double omega_body[];
    public double c_toe[];
    public double c_heel[];
    public double f_toe[];
    public double f_heel[];
    public double Xopt[];
 
    public kmpc_outputs_lcmt()
    {
        p_body = new double[3];
        rpy = new double[3];
        q_leg = new double[10];
        v_body = new double[3];
        omega_body = new double[3];
        c_toe = new double[6];
        c_heel = new double[6];
        f_toe = new double[6];
        f_heel = new double[6];
        Xopt = new double[506];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x6e4b7889e365d583L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.kmpc_outputs_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.kmpc_outputs_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.iter); 
 
        outs.writeInt(this.opt_solved); 
 
        outs.writeDouble(this.cpu_opt_time_microseconds); 
 
        outs.writeDouble(this.t_sent); 
 
        outs.writeDouble(this.time_start); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.p_body[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.rpy[a]); 
        }
 
        for (int a = 0; a < 10; a++) {
            outs.writeDouble(this.q_leg[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.v_body[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.omega_body[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.c_toe[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.c_heel[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.f_toe[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.f_heel[a]); 
        }
 
        for (int a = 0; a < 506; a++) {
            outs.writeDouble(this.Xopt[a]); 
        }
 
    }
 
    public kmpc_outputs_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public kmpc_outputs_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.kmpc_outputs_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.kmpc_outputs_lcmt o = new lcmtypes.kmpc_outputs_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.iter = ins.readInt();
 
        this.opt_solved = ins.readInt();
 
        this.cpu_opt_time_microseconds = ins.readDouble();
 
        this.t_sent = ins.readDouble();
 
        this.time_start = ins.readDouble();
 
        this.p_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.p_body[a] = ins.readDouble();
        }
 
        this.rpy = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy[a] = ins.readDouble();
        }
 
        this.q_leg = new double[(int) 10];
        for (int a = 0; a < 10; a++) {
            this.q_leg[a] = ins.readDouble();
        }
 
        this.v_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.v_body[a] = ins.readDouble();
        }
 
        this.omega_body = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omega_body[a] = ins.readDouble();
        }
 
        this.c_toe = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.c_toe[a] = ins.readDouble();
        }
 
        this.c_heel = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.c_heel[a] = ins.readDouble();
        }
 
        this.f_toe = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.f_toe[a] = ins.readDouble();
        }
 
        this.f_heel = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.f_heel[a] = ins.readDouble();
        }
 
        this.Xopt = new double[(int) 506];
        for (int a = 0; a < 506; a++) {
            this.Xopt[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.kmpc_outputs_lcmt copy()
    {
        lcmtypes.kmpc_outputs_lcmt outobj = new lcmtypes.kmpc_outputs_lcmt();
        outobj.iter = this.iter;
 
        outobj.opt_solved = this.opt_solved;
 
        outobj.cpu_opt_time_microseconds = this.cpu_opt_time_microseconds;
 
        outobj.t_sent = this.t_sent;
 
        outobj.time_start = this.time_start;
 
        outobj.p_body = new double[(int) 3];
        System.arraycopy(this.p_body, 0, outobj.p_body, 0, 3); 
        outobj.rpy = new double[(int) 3];
        System.arraycopy(this.rpy, 0, outobj.rpy, 0, 3); 
        outobj.q_leg = new double[(int) 10];
        System.arraycopy(this.q_leg, 0, outobj.q_leg, 0, 10); 
        outobj.v_body = new double[(int) 3];
        System.arraycopy(this.v_body, 0, outobj.v_body, 0, 3); 
        outobj.omega_body = new double[(int) 3];
        System.arraycopy(this.omega_body, 0, outobj.omega_body, 0, 3); 
        outobj.c_toe = new double[(int) 6];
        System.arraycopy(this.c_toe, 0, outobj.c_toe, 0, 6); 
        outobj.c_heel = new double[(int) 6];
        System.arraycopy(this.c_heel, 0, outobj.c_heel, 0, 6); 
        outobj.f_toe = new double[(int) 6];
        System.arraycopy(this.f_toe, 0, outobj.f_toe, 0, 6); 
        outobj.f_heel = new double[(int) 6];
        System.arraycopy(this.f_heel, 0, outobj.f_heel, 0, 6); 
        outobj.Xopt = new double[(int) 506];
        System.arraycopy(this.Xopt, 0, outobj.Xopt, 0, 506); 
        return outobj;
    }
 
}

