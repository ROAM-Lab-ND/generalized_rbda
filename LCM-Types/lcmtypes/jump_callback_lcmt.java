/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class jump_callback_lcmt implements lcm.lcm.LCMEncodable
{
    public boolean success;
    public float net_jump_distance;
    public float net_yaw_change;
 
    public jump_callback_lcmt()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9e8b2897eacb68b2L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.jump_callback_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.jump_callback_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte( this.success ? 1 : 0); 
 
        outs.writeFloat(this.net_jump_distance); 
 
        outs.writeFloat(this.net_yaw_change); 
 
    }
 
    public jump_callback_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public jump_callback_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.jump_callback_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.jump_callback_lcmt o = new lcmtypes.jump_callback_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.success = ins.readByte()!=0;
 
        this.net_jump_distance = ins.readFloat();
 
        this.net_yaw_change = ins.readFloat();
 
    }
 
    public lcmtypes.jump_callback_lcmt copy()
    {
        lcmtypes.jump_callback_lcmt outobj = new lcmtypes.jump_callback_lcmt();
        outobj.success = this.success;
 
        outobj.net_jump_distance = this.net_jump_distance;
 
        outobj.net_yaw_change = this.net_yaw_change;
 
        return outobj;
    }
 
}

