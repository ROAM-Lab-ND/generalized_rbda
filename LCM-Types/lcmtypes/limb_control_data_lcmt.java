/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class limb_control_data_lcmt implements lcm.lcm.LCMEncodable
{
    public float q[];
    public float qd[];
    public float tau_est[];
    public float tau_act[];
 
    public limb_control_data_lcmt()
    {
        q = new float[18];
        qd = new float[18];
        tau_est = new float[18];
        tau_act = new float[18];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x15f71d87d11d32a8L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.limb_control_data_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.limb_control_data_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 18; a++) {
            outs.writeFloat(this.q[a]); 
        }
 
        for (int a = 0; a < 18; a++) {
            outs.writeFloat(this.qd[a]); 
        }
 
        for (int a = 0; a < 18; a++) {
            outs.writeFloat(this.tau_est[a]); 
        }
 
        for (int a = 0; a < 18; a++) {
            outs.writeFloat(this.tau_act[a]); 
        }
 
    }
 
    public limb_control_data_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public limb_control_data_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.limb_control_data_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.limb_control_data_lcmt o = new lcmtypes.limb_control_data_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.q = new float[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.q[a] = ins.readFloat();
        }
 
        this.qd = new float[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.qd[a] = ins.readFloat();
        }
 
        this.tau_est = new float[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.tau_est[a] = ins.readFloat();
        }
 
        this.tau_act = new float[(int) 18];
        for (int a = 0; a < 18; a++) {
            this.tau_act[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.limb_control_data_lcmt copy()
    {
        lcmtypes.limb_control_data_lcmt outobj = new lcmtypes.limb_control_data_lcmt();
        outobj.q = new float[(int) 18];
        System.arraycopy(this.q, 0, outobj.q, 0, 18); 
        outobj.qd = new float[(int) 18];
        System.arraycopy(this.qd, 0, outobj.qd, 0, 18); 
        outobj.tau_est = new float[(int) 18];
        System.arraycopy(this.tau_est, 0, outobj.tau_est, 0, 18); 
        outobj.tau_act = new float[(int) 18];
        System.arraycopy(this.tau_act, 0, outobj.tau_act, 0, 18); 
        return outobj;
    }
 
}

