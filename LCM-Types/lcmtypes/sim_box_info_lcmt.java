/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class sim_box_info_lcmt implements lcm.lcm.LCMEncodable
{
    public float position[];
    public float scale[];
 
    public sim_box_info_lcmt()
    {
        position = new float[3];
        scale = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xecb28fabd7d43da3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.sim_box_info_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.sim_box_info_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.position[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.scale[a]); 
        }
 
    }
 
    public sim_box_info_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public sim_box_info_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.sim_box_info_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.sim_box_info_lcmt o = new lcmtypes.sim_box_info_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.position = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.position[a] = ins.readFloat();
        }
 
        this.scale = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.scale[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.sim_box_info_lcmt copy()
    {
        lcmtypes.sim_box_info_lcmt outobj = new lcmtypes.sim_box_info_lcmt();
        outobj.position = new float[(int) 3];
        System.arraycopy(this.position, 0, outobj.position, 0, 3); 
        outobj.scale = new float[(int) 3];
        System.arraycopy(this.scale, 0, outobj.scale, 0, 3); 
        return outobj;
    }
 
}

