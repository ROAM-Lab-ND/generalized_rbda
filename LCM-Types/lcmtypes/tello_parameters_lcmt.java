/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class tello_parameters_lcmt implements lcm.lcm.LCMEncodable
{
    public long control_mode;
    public float key_vertical;
    public float key_horizontal;
    public float key_turn;
    public float key_pitch;
    public float stick_right_vertical;
    public float stick_right_horizontal;
    public float stick_left_vertical;
    public float stick_left_horizontal;
    public boolean jump_trigger;
    public boolean xbox_ctrl;
 
    public tello_parameters_lcmt()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x422d537ae0414949L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.tello_parameters_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.tello_parameters_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.control_mode); 
 
        outs.writeFloat(this.key_vertical); 
 
        outs.writeFloat(this.key_horizontal); 
 
        outs.writeFloat(this.key_turn); 
 
        outs.writeFloat(this.key_pitch); 
 
        outs.writeFloat(this.stick_right_vertical); 
 
        outs.writeFloat(this.stick_right_horizontal); 
 
        outs.writeFloat(this.stick_left_vertical); 
 
        outs.writeFloat(this.stick_left_horizontal); 
 
        outs.writeByte( this.jump_trigger ? 1 : 0); 
 
        outs.writeByte( this.xbox_ctrl ? 1 : 0); 
 
    }
 
    public tello_parameters_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public tello_parameters_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.tello_parameters_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.tello_parameters_lcmt o = new lcmtypes.tello_parameters_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.control_mode = ins.readLong();
 
        this.key_vertical = ins.readFloat();
 
        this.key_horizontal = ins.readFloat();
 
        this.key_turn = ins.readFloat();
 
        this.key_pitch = ins.readFloat();
 
        this.stick_right_vertical = ins.readFloat();
 
        this.stick_right_horizontal = ins.readFloat();
 
        this.stick_left_vertical = ins.readFloat();
 
        this.stick_left_horizontal = ins.readFloat();
 
        this.jump_trigger = ins.readByte()!=0;
 
        this.xbox_ctrl = ins.readByte()!=0;
 
    }
 
    public lcmtypes.tello_parameters_lcmt copy()
    {
        lcmtypes.tello_parameters_lcmt outobj = new lcmtypes.tello_parameters_lcmt();
        outobj.control_mode = this.control_mode;
 
        outobj.key_vertical = this.key_vertical;
 
        outobj.key_horizontal = this.key_horizontal;
 
        outobj.key_turn = this.key_turn;
 
        outobj.key_pitch = this.key_pitch;
 
        outobj.stick_right_vertical = this.stick_right_vertical;
 
        outobj.stick_right_horizontal = this.stick_right_horizontal;
 
        outobj.stick_left_vertical = this.stick_left_vertical;
 
        outobj.stick_left_horizontal = this.stick_left_horizontal;
 
        outobj.jump_trigger = this.jump_trigger;
 
        outobj.xbox_ctrl = this.xbox_ctrl;
 
        return outobj;
    }
 
}

