/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class qkdmpc_outputs_lcmt implements lcm.lcm.LCMEncodable
{
    public int NUM_TIMESTEPS_x3;
    public int NUM_TIMESTEPS_xLEGS_x3;
    public int NUM_TIMESTEPS_xACTJOINT;
    public int NUM_U_TIMESTEPS_xLEGS_x3;
    public int NUM_OPT_VAR_TRAJ;
    public int NUM_G_CONSTRAINTS;
    public int NUM_X_CONSTRAINTS;
    public double Xopt[];
    public double lagrange_mult_G[];
    public double lagrange_mult_X[];
    public double p_body[];
    public double rpy_body[];
    public double omega_body[];
    public double r[];
    public double rdot[];
    public double h[];
    public double f_grf[];
    public double p_feet[];
    public double q[];
    public double qd[];
    public double obj_val;
    public double t_solve;
    public int opt_solved;
    public int iter;
 
    public qkdmpc_outputs_lcmt()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xdc3d8fcbd4115f71L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.qkdmpc_outputs_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.qkdmpc_outputs_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.NUM_TIMESTEPS_x3); 
 
        outs.writeInt(this.NUM_TIMESTEPS_xLEGS_x3); 
 
        outs.writeInt(this.NUM_TIMESTEPS_xACTJOINT); 
 
        outs.writeInt(this.NUM_U_TIMESTEPS_xLEGS_x3); 
 
        outs.writeInt(this.NUM_OPT_VAR_TRAJ); 
 
        outs.writeInt(this.NUM_G_CONSTRAINTS); 
 
        outs.writeInt(this.NUM_X_CONSTRAINTS); 
 
        for (int a = 0; a < this.NUM_OPT_VAR_TRAJ; a++) {
            outs.writeDouble(this.Xopt[a]); 
        }
 
        for (int a = 0; a < this.NUM_G_CONSTRAINTS; a++) {
            outs.writeDouble(this.lagrange_mult_G[a]); 
        }
 
        for (int a = 0; a < this.NUM_X_CONSTRAINTS; a++) {
            outs.writeDouble(this.lagrange_mult_X[a]); 
        }
 
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            outs.writeDouble(this.p_body[a]); 
        }
 
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            outs.writeDouble(this.rpy_body[a]); 
        }
 
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            outs.writeDouble(this.omega_body[a]); 
        }
 
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            outs.writeDouble(this.r[a]); 
        }
 
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            outs.writeDouble(this.rdot[a]); 
        }
 
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            outs.writeDouble(this.h[a]); 
        }
 
        for (int a = 0; a < this.NUM_U_TIMESTEPS_xLEGS_x3; a++) {
            outs.writeDouble(this.f_grf[a]); 
        }
 
        for (int a = 0; a < this.NUM_TIMESTEPS_xLEGS_x3; a++) {
            outs.writeDouble(this.p_feet[a]); 
        }
 
        for (int a = 0; a < this.NUM_TIMESTEPS_xACTJOINT; a++) {
            outs.writeDouble(this.q[a]); 
        }
 
        for (int a = 0; a < this.NUM_TIMESTEPS_xACTJOINT; a++) {
            outs.writeDouble(this.qd[a]); 
        }
 
        outs.writeDouble(this.obj_val); 
 
        outs.writeDouble(this.t_solve); 
 
        outs.writeInt(this.opt_solved); 
 
        outs.writeInt(this.iter); 
 
    }
 
    public qkdmpc_outputs_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public qkdmpc_outputs_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.qkdmpc_outputs_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.qkdmpc_outputs_lcmt o = new lcmtypes.qkdmpc_outputs_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.NUM_TIMESTEPS_x3 = ins.readInt();
 
        this.NUM_TIMESTEPS_xLEGS_x3 = ins.readInt();
 
        this.NUM_TIMESTEPS_xACTJOINT = ins.readInt();
 
        this.NUM_U_TIMESTEPS_xLEGS_x3 = ins.readInt();
 
        this.NUM_OPT_VAR_TRAJ = ins.readInt();
 
        this.NUM_G_CONSTRAINTS = ins.readInt();
 
        this.NUM_X_CONSTRAINTS = ins.readInt();
 
        this.Xopt = new double[(int) NUM_OPT_VAR_TRAJ];
        for (int a = 0; a < this.NUM_OPT_VAR_TRAJ; a++) {
            this.Xopt[a] = ins.readDouble();
        }
 
        this.lagrange_mult_G = new double[(int) NUM_G_CONSTRAINTS];
        for (int a = 0; a < this.NUM_G_CONSTRAINTS; a++) {
            this.lagrange_mult_G[a] = ins.readDouble();
        }
 
        this.lagrange_mult_X = new double[(int) NUM_X_CONSTRAINTS];
        for (int a = 0; a < this.NUM_X_CONSTRAINTS; a++) {
            this.lagrange_mult_X[a] = ins.readDouble();
        }
 
        this.p_body = new double[(int) NUM_TIMESTEPS_x3];
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            this.p_body[a] = ins.readDouble();
        }
 
        this.rpy_body = new double[(int) NUM_TIMESTEPS_x3];
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            this.rpy_body[a] = ins.readDouble();
        }
 
        this.omega_body = new double[(int) NUM_TIMESTEPS_x3];
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            this.omega_body[a] = ins.readDouble();
        }
 
        this.r = new double[(int) NUM_TIMESTEPS_x3];
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            this.r[a] = ins.readDouble();
        }
 
        this.rdot = new double[(int) NUM_TIMESTEPS_x3];
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            this.rdot[a] = ins.readDouble();
        }
 
        this.h = new double[(int) NUM_TIMESTEPS_x3];
        for (int a = 0; a < this.NUM_TIMESTEPS_x3; a++) {
            this.h[a] = ins.readDouble();
        }
 
        this.f_grf = new double[(int) NUM_U_TIMESTEPS_xLEGS_x3];
        for (int a = 0; a < this.NUM_U_TIMESTEPS_xLEGS_x3; a++) {
            this.f_grf[a] = ins.readDouble();
        }
 
        this.p_feet = new double[(int) NUM_TIMESTEPS_xLEGS_x3];
        for (int a = 0; a < this.NUM_TIMESTEPS_xLEGS_x3; a++) {
            this.p_feet[a] = ins.readDouble();
        }
 
        this.q = new double[(int) NUM_TIMESTEPS_xACTJOINT];
        for (int a = 0; a < this.NUM_TIMESTEPS_xACTJOINT; a++) {
            this.q[a] = ins.readDouble();
        }
 
        this.qd = new double[(int) NUM_TIMESTEPS_xACTJOINT];
        for (int a = 0; a < this.NUM_TIMESTEPS_xACTJOINT; a++) {
            this.qd[a] = ins.readDouble();
        }
 
        this.obj_val = ins.readDouble();
 
        this.t_solve = ins.readDouble();
 
        this.opt_solved = ins.readInt();
 
        this.iter = ins.readInt();
 
    }
 
    public lcmtypes.qkdmpc_outputs_lcmt copy()
    {
        lcmtypes.qkdmpc_outputs_lcmt outobj = new lcmtypes.qkdmpc_outputs_lcmt();
        outobj.NUM_TIMESTEPS_x3 = this.NUM_TIMESTEPS_x3;
 
        outobj.NUM_TIMESTEPS_xLEGS_x3 = this.NUM_TIMESTEPS_xLEGS_x3;
 
        outobj.NUM_TIMESTEPS_xACTJOINT = this.NUM_TIMESTEPS_xACTJOINT;
 
        outobj.NUM_U_TIMESTEPS_xLEGS_x3 = this.NUM_U_TIMESTEPS_xLEGS_x3;
 
        outobj.NUM_OPT_VAR_TRAJ = this.NUM_OPT_VAR_TRAJ;
 
        outobj.NUM_G_CONSTRAINTS = this.NUM_G_CONSTRAINTS;
 
        outobj.NUM_X_CONSTRAINTS = this.NUM_X_CONSTRAINTS;
 
        outobj.Xopt = new double[(int) NUM_OPT_VAR_TRAJ];
        if (this.NUM_OPT_VAR_TRAJ > 0)
            System.arraycopy(this.Xopt, 0, outobj.Xopt, 0, this.NUM_OPT_VAR_TRAJ); 
        outobj.lagrange_mult_G = new double[(int) NUM_G_CONSTRAINTS];
        if (this.NUM_G_CONSTRAINTS > 0)
            System.arraycopy(this.lagrange_mult_G, 0, outobj.lagrange_mult_G, 0, this.NUM_G_CONSTRAINTS); 
        outobj.lagrange_mult_X = new double[(int) NUM_X_CONSTRAINTS];
        if (this.NUM_X_CONSTRAINTS > 0)
            System.arraycopy(this.lagrange_mult_X, 0, outobj.lagrange_mult_X, 0, this.NUM_X_CONSTRAINTS); 
        outobj.p_body = new double[(int) NUM_TIMESTEPS_x3];
        if (this.NUM_TIMESTEPS_x3 > 0)
            System.arraycopy(this.p_body, 0, outobj.p_body, 0, this.NUM_TIMESTEPS_x3); 
        outobj.rpy_body = new double[(int) NUM_TIMESTEPS_x3];
        if (this.NUM_TIMESTEPS_x3 > 0)
            System.arraycopy(this.rpy_body, 0, outobj.rpy_body, 0, this.NUM_TIMESTEPS_x3); 
        outobj.omega_body = new double[(int) NUM_TIMESTEPS_x3];
        if (this.NUM_TIMESTEPS_x3 > 0)
            System.arraycopy(this.omega_body, 0, outobj.omega_body, 0, this.NUM_TIMESTEPS_x3); 
        outobj.r = new double[(int) NUM_TIMESTEPS_x3];
        if (this.NUM_TIMESTEPS_x3 > 0)
            System.arraycopy(this.r, 0, outobj.r, 0, this.NUM_TIMESTEPS_x3); 
        outobj.rdot = new double[(int) NUM_TIMESTEPS_x3];
        if (this.NUM_TIMESTEPS_x3 > 0)
            System.arraycopy(this.rdot, 0, outobj.rdot, 0, this.NUM_TIMESTEPS_x3); 
        outobj.h = new double[(int) NUM_TIMESTEPS_x3];
        if (this.NUM_TIMESTEPS_x3 > 0)
            System.arraycopy(this.h, 0, outobj.h, 0, this.NUM_TIMESTEPS_x3); 
        outobj.f_grf = new double[(int) NUM_U_TIMESTEPS_xLEGS_x3];
        if (this.NUM_U_TIMESTEPS_xLEGS_x3 > 0)
            System.arraycopy(this.f_grf, 0, outobj.f_grf, 0, this.NUM_U_TIMESTEPS_xLEGS_x3); 
        outobj.p_feet = new double[(int) NUM_TIMESTEPS_xLEGS_x3];
        if (this.NUM_TIMESTEPS_xLEGS_x3 > 0)
            System.arraycopy(this.p_feet, 0, outobj.p_feet, 0, this.NUM_TIMESTEPS_xLEGS_x3); 
        outobj.q = new double[(int) NUM_TIMESTEPS_xACTJOINT];
        if (this.NUM_TIMESTEPS_xACTJOINT > 0)
            System.arraycopy(this.q, 0, outobj.q, 0, this.NUM_TIMESTEPS_xACTJOINT); 
        outobj.qd = new double[(int) NUM_TIMESTEPS_xACTJOINT];
        if (this.NUM_TIMESTEPS_xACTJOINT > 0)
            System.arraycopy(this.qd, 0, outobj.qd, 0, this.NUM_TIMESTEPS_xACTJOINT); 
        outobj.obj_val = this.obj_val;
 
        outobj.t_solve = this.t_solve;
 
        outobj.opt_solved = this.opt_solved;
 
        outobj.iter = this.iter;
 
        return outobj;
    }
 
}

