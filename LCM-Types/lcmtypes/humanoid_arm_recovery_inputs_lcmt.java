/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class humanoid_arm_recovery_inputs_lcmt implements lcm.lcm.LCMEncodable
{
    public int RS_optim_iter;
    public int fsm_iter;
    public double ctrl_dt;
    public double current_state[];
    public double desired_state[];
    public double gait_phase;
 
    public humanoid_arm_recovery_inputs_lcmt()
    {
        current_state = new double[48];
        desired_state = new double[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9cce1eea0bab1479L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.humanoid_arm_recovery_inputs_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.humanoid_arm_recovery_inputs_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.RS_optim_iter); 
 
        outs.writeInt(this.fsm_iter); 
 
        outs.writeDouble(this.ctrl_dt); 
 
        for (int a = 0; a < 48; a++) {
            outs.writeDouble(this.current_state[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.desired_state[a]); 
        }
 
        outs.writeDouble(this.gait_phase); 
 
    }
 
    public humanoid_arm_recovery_inputs_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public humanoid_arm_recovery_inputs_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.humanoid_arm_recovery_inputs_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.humanoid_arm_recovery_inputs_lcmt o = new lcmtypes.humanoid_arm_recovery_inputs_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.RS_optim_iter = ins.readInt();
 
        this.fsm_iter = ins.readInt();
 
        this.ctrl_dt = ins.readDouble();
 
        this.current_state = new double[(int) 48];
        for (int a = 0; a < 48; a++) {
            this.current_state[a] = ins.readDouble();
        }
 
        this.desired_state = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.desired_state[a] = ins.readDouble();
        }
 
        this.gait_phase = ins.readDouble();
 
    }
 
    public lcmtypes.humanoid_arm_recovery_inputs_lcmt copy()
    {
        lcmtypes.humanoid_arm_recovery_inputs_lcmt outobj = new lcmtypes.humanoid_arm_recovery_inputs_lcmt();
        outobj.RS_optim_iter = this.RS_optim_iter;
 
        outobj.fsm_iter = this.fsm_iter;
 
        outobj.ctrl_dt = this.ctrl_dt;
 
        outobj.current_state = new double[(int) 48];
        System.arraycopy(this.current_state, 0, outobj.current_state, 0, 48); 
        outobj.desired_state = new double[(int) 4];
        System.arraycopy(this.desired_state, 0, outobj.desired_state, 0, 4); 
        outobj.gait_phase = this.gait_phase;
 
        return outobj;
    }
 
}

