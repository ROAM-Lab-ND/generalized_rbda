/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __debug_visualization_lcmt_hpp__
#define __debug_visualization_lcmt_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>
#include <string>


class debug_visualization_lcmt
{
    public:
        int32_t    sphere_count;

        int32_t    sphere_elements;

        int32_t    sphere_position_elements;

        /// sphere_elements*3
        int32_t    sphere_color_elements;

        /// sphere_elements*4
        std::vector< float > sphere_positions;

        std::vector< float > sphere_radii;

        std::vector< float > sphere_colors;

        int32_t    obst_count;

        int32_t    obst_elements;

        int32_t    obst_position_elements;

        /// obst_elements*3
        int32_t    obst_dim_elements;

        /// obst_elements*3
        int32_t    obst_rpy_elements;

        /// obst_elements*3
        int32_t    obst_color_elements;

        /// obst_elements*4
        std::vector< float > obst_positions;

        std::vector< float > obst_oris;

        std::vector< float > obst_dims;

        std::vector< float > obst_colors;

        int32_t    path_count;

        int32_t    path_elements;

        int32_t    path_position_elements;

        /// Sum(path_lengths[i]*3)
        int32_t    path_color_elements;

        /// path_elements*4
        std::vector< int32_t > path_lengths;

        /// array for lengths of each path
        std::vector< int32_t > path_start_idxs;

        std::vector< float > path_widths;

        std::vector< float > path_positions;

        std::vector< float > path_colors;

        int32_t    arrow_count;

        int32_t    arrow_elements;

        int32_t    arrow_position_elements;

        int32_t    arrow_color_elements;

        std::vector< std::string > arrow_ids;

        std::vector< float > arrow_nom;

        std::vector< float > arrow_base_positions;

        std::vector< float > arrow_directions;

        std::vector< float > arrow_colors;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "debug_visualization_lcmt"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int debug_visualization_lcmt::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int debug_visualization_lcmt::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int debug_visualization_lcmt::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t debug_visualization_lcmt::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* debug_visualization_lcmt::getTypeName()
{
    return "debug_visualization_lcmt";
}

int debug_visualization_lcmt::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->sphere_count, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->sphere_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->sphere_position_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->sphere_color_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->sphere_position_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->sphere_positions[0], this->sphere_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->sphere_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->sphere_radii[0], this->sphere_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->sphere_color_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->sphere_colors[0], this->sphere_color_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->obst_count, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->obst_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->obst_position_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->obst_dim_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->obst_rpy_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->obst_color_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->obst_position_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->obst_positions[0], this->obst_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->obst_rpy_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->obst_oris[0], this->obst_rpy_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->obst_position_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->obst_dims[0], this->obst_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->obst_color_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->obst_colors[0], this->obst_color_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->path_count, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->path_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->path_position_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->path_color_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->path_elements > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->path_lengths[0], this->path_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->path_elements > 0) {
        tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->path_start_idxs[0], this->path_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->path_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->path_widths[0], this->path_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->path_position_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->path_positions[0], this->path_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->path_color_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->path_colors[0], this->path_color_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->arrow_count, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->arrow_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->arrow_position_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->arrow_color_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->arrow_elements; a0++) {
        char* __cstr = const_cast<char*>(this->arrow_ids[a0].c_str());
        tlen = __string_encode_array(
            buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->arrow_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->arrow_nom[0], this->arrow_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->arrow_position_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->arrow_base_positions[0], this->arrow_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->arrow_position_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->arrow_directions[0], this->arrow_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->arrow_color_elements > 0) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->arrow_colors[0], this->arrow_color_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int debug_visualization_lcmt::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->sphere_count, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->sphere_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->sphere_position_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->sphere_color_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->sphere_position_elements) {
        this->sphere_positions.resize(this->sphere_position_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->sphere_positions[0], this->sphere_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->sphere_elements) {
        this->sphere_radii.resize(this->sphere_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->sphere_radii[0], this->sphere_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->sphere_color_elements) {
        this->sphere_colors.resize(this->sphere_color_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->sphere_colors[0], this->sphere_color_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->obst_count, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->obst_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->obst_position_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->obst_dim_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->obst_rpy_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->obst_color_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->obst_position_elements) {
        this->obst_positions.resize(this->obst_position_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->obst_positions[0], this->obst_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->obst_rpy_elements) {
        this->obst_oris.resize(this->obst_rpy_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->obst_oris[0], this->obst_rpy_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->obst_position_elements) {
        this->obst_dims.resize(this->obst_position_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->obst_dims[0], this->obst_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->obst_color_elements) {
        this->obst_colors.resize(this->obst_color_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->obst_colors[0], this->obst_color_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->path_count, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->path_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->path_position_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->path_color_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->path_elements) {
        this->path_lengths.resize(this->path_elements);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->path_lengths[0], this->path_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->path_elements) {
        this->path_start_idxs.resize(this->path_elements);
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->path_start_idxs[0], this->path_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->path_elements) {
        this->path_widths.resize(this->path_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->path_widths[0], this->path_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->path_position_elements) {
        this->path_positions.resize(this->path_position_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->path_positions[0], this->path_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->path_color_elements) {
        this->path_colors.resize(this->path_color_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->path_colors[0], this->path_color_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->arrow_count, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->arrow_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->arrow_position_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->arrow_color_elements, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->arrow_ids.resize(this->arrow_elements);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->arrow_elements; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(
            buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->arrow_ids[a0].assign(static_cast<const char*>(buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    if(this->arrow_elements) {
        this->arrow_nom.resize(this->arrow_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->arrow_nom[0], this->arrow_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->arrow_position_elements) {
        this->arrow_base_positions.resize(this->arrow_position_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->arrow_base_positions[0], this->arrow_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->arrow_position_elements) {
        this->arrow_directions.resize(this->arrow_position_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->arrow_directions[0], this->arrow_position_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->arrow_color_elements) {
        this->arrow_colors.resize(this->arrow_color_elements);
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->arrow_colors[0], this->arrow_color_elements);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int debug_visualization_lcmt::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, this->sphere_position_elements);
    enc_size += __float_encoded_array_size(NULL, this->sphere_elements);
    enc_size += __float_encoded_array_size(NULL, this->sphere_color_elements);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, this->obst_position_elements);
    enc_size += __float_encoded_array_size(NULL, this->obst_rpy_elements);
    enc_size += __float_encoded_array_size(NULL, this->obst_position_elements);
    enc_size += __float_encoded_array_size(NULL, this->obst_color_elements);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, this->path_elements);
    enc_size += __int32_t_encoded_array_size(NULL, this->path_elements);
    enc_size += __float_encoded_array_size(NULL, this->path_elements);
    enc_size += __float_encoded_array_size(NULL, this->path_position_elements);
    enc_size += __float_encoded_array_size(NULL, this->path_color_elements);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->arrow_elements; a0++) {
        enc_size += this->arrow_ids[a0].size() + 4 + 1;
    }
    enc_size += __float_encoded_array_size(NULL, this->arrow_elements);
    enc_size += __float_encoded_array_size(NULL, this->arrow_position_elements);
    enc_size += __float_encoded_array_size(NULL, this->arrow_position_elements);
    enc_size += __float_encoded_array_size(NULL, this->arrow_color_elements);
    return enc_size;
}

uint64_t debug_visualization_lcmt::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0x0b9dfd6fd3533d6fLL;
    return (hash<<1) + ((hash>>63)&1);
}

#endif
