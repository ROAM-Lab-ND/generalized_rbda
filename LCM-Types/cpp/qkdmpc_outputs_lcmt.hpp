/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __qkdmpc_outputs_lcmt_hpp__
#define __qkdmpc_outputs_lcmt_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>


class qkdmpc_outputs_lcmt
{
    public:
        int32_t    NUM_TIMESTEPS_x3;

        int32_t    NUM_TIMESTEPS_xLEGS_x3;

        int32_t    NUM_TIMESTEPS_xACTJOINT;

        int32_t    NUM_U_TIMESTEPS_xLEGS_x3;

        int32_t    NUM_OPT_VAR_TRAJ;

        int32_t    NUM_G_CONSTRAINTS;

        int32_t    NUM_X_CONSTRAINTS;

        std::vector< double > Xopt;

        std::vector< double > lagrange_mult_G;

        std::vector< double > lagrange_mult_X;

        std::vector< double > p_body;

        std::vector< double > rpy_body;

        std::vector< double > omega_body;

        std::vector< double > r;

        std::vector< double > rdot;

        std::vector< double > h;

        std::vector< double > f_grf;

        std::vector< double > p_feet;

        std::vector< double > q;

        std::vector< double > qd;

        double     obj_val;

        double     t_solve;

        int32_t    opt_solved;

        int32_t    iter;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "qkdmpc_outputs_lcmt"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int qkdmpc_outputs_lcmt::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int qkdmpc_outputs_lcmt::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int qkdmpc_outputs_lcmt::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t qkdmpc_outputs_lcmt::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* qkdmpc_outputs_lcmt::getTypeName()
{
    return "qkdmpc_outputs_lcmt";
}

int qkdmpc_outputs_lcmt::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_TIMESTEPS_x3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_TIMESTEPS_xLEGS_x3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_TIMESTEPS_xACTJOINT, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_U_TIMESTEPS_xLEGS_x3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_OPT_VAR_TRAJ, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_G_CONSTRAINTS, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_X_CONSTRAINTS, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->NUM_OPT_VAR_TRAJ > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->Xopt[0], this->NUM_OPT_VAR_TRAJ);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_G_CONSTRAINTS > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->lagrange_mult_G[0], this->NUM_G_CONSTRAINTS);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_X_CONSTRAINTS > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->lagrange_mult_X[0], this->NUM_X_CONSTRAINTS);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->p_body[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->rpy_body[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->omega_body[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->r[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->rdot[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->h[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_U_TIMESTEPS_xLEGS_x3 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->f_grf[0], this->NUM_U_TIMESTEPS_xLEGS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_xLEGS_x3 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->p_feet[0], this->NUM_TIMESTEPS_xLEGS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_xACTJOINT > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->q[0], this->NUM_TIMESTEPS_xACTJOINT);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_xACTJOINT > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->qd[0], this->NUM_TIMESTEPS_xACTJOINT);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->obj_val, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->t_solve, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->opt_solved, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->iter, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int qkdmpc_outputs_lcmt::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_TIMESTEPS_x3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_TIMESTEPS_xLEGS_x3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_TIMESTEPS_xACTJOINT, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_U_TIMESTEPS_xLEGS_x3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_OPT_VAR_TRAJ, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_G_CONSTRAINTS, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_X_CONSTRAINTS, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->NUM_OPT_VAR_TRAJ) {
        this->Xopt.resize(this->NUM_OPT_VAR_TRAJ);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->Xopt[0], this->NUM_OPT_VAR_TRAJ);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_G_CONSTRAINTS) {
        this->lagrange_mult_G.resize(this->NUM_G_CONSTRAINTS);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->lagrange_mult_G[0], this->NUM_G_CONSTRAINTS);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_X_CONSTRAINTS) {
        this->lagrange_mult_X.resize(this->NUM_X_CONSTRAINTS);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->lagrange_mult_X[0], this->NUM_X_CONSTRAINTS);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3) {
        this->p_body.resize(this->NUM_TIMESTEPS_x3);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->p_body[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3) {
        this->rpy_body.resize(this->NUM_TIMESTEPS_x3);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->rpy_body[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3) {
        this->omega_body.resize(this->NUM_TIMESTEPS_x3);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->omega_body[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3) {
        this->r.resize(this->NUM_TIMESTEPS_x3);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->r[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3) {
        this->rdot.resize(this->NUM_TIMESTEPS_x3);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->rdot[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_x3) {
        this->h.resize(this->NUM_TIMESTEPS_x3);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->h[0], this->NUM_TIMESTEPS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_U_TIMESTEPS_xLEGS_x3) {
        this->f_grf.resize(this->NUM_U_TIMESTEPS_xLEGS_x3);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->f_grf[0], this->NUM_U_TIMESTEPS_xLEGS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_xLEGS_x3) {
        this->p_feet.resize(this->NUM_TIMESTEPS_xLEGS_x3);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->p_feet[0], this->NUM_TIMESTEPS_xLEGS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_xACTJOINT) {
        this->q.resize(this->NUM_TIMESTEPS_xACTJOINT);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->q[0], this->NUM_TIMESTEPS_xACTJOINT);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_TIMESTEPS_xACTJOINT) {
        this->qd.resize(this->NUM_TIMESTEPS_xACTJOINT);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->qd[0], this->NUM_TIMESTEPS_xACTJOINT);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->obj_val, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->t_solve, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->opt_solved, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->iter, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int qkdmpc_outputs_lcmt::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, this->NUM_OPT_VAR_TRAJ);
    enc_size += __double_encoded_array_size(NULL, this->NUM_G_CONSTRAINTS);
    enc_size += __double_encoded_array_size(NULL, this->NUM_X_CONSTRAINTS);
    enc_size += __double_encoded_array_size(NULL, this->NUM_TIMESTEPS_x3);
    enc_size += __double_encoded_array_size(NULL, this->NUM_TIMESTEPS_x3);
    enc_size += __double_encoded_array_size(NULL, this->NUM_TIMESTEPS_x3);
    enc_size += __double_encoded_array_size(NULL, this->NUM_TIMESTEPS_x3);
    enc_size += __double_encoded_array_size(NULL, this->NUM_TIMESTEPS_x3);
    enc_size += __double_encoded_array_size(NULL, this->NUM_TIMESTEPS_x3);
    enc_size += __double_encoded_array_size(NULL, this->NUM_U_TIMESTEPS_xLEGS_x3);
    enc_size += __double_encoded_array_size(NULL, this->NUM_TIMESTEPS_xLEGS_x3);
    enc_size += __double_encoded_array_size(NULL, this->NUM_TIMESTEPS_xACTJOINT);
    enc_size += __double_encoded_array_size(NULL, this->NUM_TIMESTEPS_xACTJOINT);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t qkdmpc_outputs_lcmt::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0xdc3d8fcbd4115f71LL;
    return (hash<<1) + ((hash>>63)&1);
}

#endif
