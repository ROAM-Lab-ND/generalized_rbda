/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __jto_inputs_casadi_lcmt_hpp__
#define __jto_inputs_casadi_lcmt_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>


class jto_inputs_casadi_lcmt
{
    public:
        int32_t    NUM_X_VAR;

        int32_t    NUM_U_VAR;

        int32_t    NUM_TIMESTEPS;

        int32_t    NUM_U_TIMESTEPS;

        int32_t    NUM_X_VAR_TRAJ;

        int32_t    NUM_U_VAR_TRAJ;

        int32_t    NUM_OPT_VAR_TRAJ;

        int32_t    NUM_LEGS;

        int32_t    NUM_LEGS_x3;

        int32_t    NUM_GAIT_TABLE;

        std::vector< double > Xref;

        std::vector< double > Uref;

        std::vector< double > x0;

        std::vector< double > gait_schedule;

        std::vector< double > gait_schedule_TD;

        std::vector< double > dt_opt;

        double     q_min[6];

        double     q_max[6];

        double     qd_min[6];

        double     qd_max[6];

        double     q_init[6];

        double     qd_init[6];

        std::vector< double > c_init;

        double     q_term_min[6];

        double     q_term_max[6];

        double     qd_term_min[6];

        double     qd_term_max[6];

        double     QX[12];

        double     QN[12];

        double     Qc[3];

        double     Qf[3];

        double     mu_ground;

        double     l_leg_max;

        double     f_max;

        double     mass;

        double     Ib[3];

        double     Ib_inv[3];

        double     flight_duration;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "jto_inputs_casadi_lcmt"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int jto_inputs_casadi_lcmt::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int jto_inputs_casadi_lcmt::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int jto_inputs_casadi_lcmt::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t jto_inputs_casadi_lcmt::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* jto_inputs_casadi_lcmt::getTypeName()
{
    return "jto_inputs_casadi_lcmt";
}

int jto_inputs_casadi_lcmt::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_X_VAR, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_U_VAR, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_TIMESTEPS, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_U_TIMESTEPS, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_X_VAR_TRAJ, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_U_VAR_TRAJ, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_OPT_VAR_TRAJ, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_LEGS, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_LEGS_x3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->NUM_GAIT_TABLE, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->NUM_X_VAR_TRAJ > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->Xref[0], this->NUM_X_VAR_TRAJ);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_U_VAR_TRAJ > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->Uref[0], this->NUM_U_VAR_TRAJ);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_OPT_VAR_TRAJ > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->x0[0], this->NUM_OPT_VAR_TRAJ);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_GAIT_TABLE > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->gait_schedule[0], this->NUM_GAIT_TABLE);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_GAIT_TABLE > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->gait_schedule_TD[0], this->NUM_GAIT_TABLE);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_U_TIMESTEPS > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->dt_opt[0], this->NUM_U_TIMESTEPS);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->q_min[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->q_max[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->qd_min[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->qd_max[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->q_init[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->qd_init[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->NUM_LEGS_x3 > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->c_init[0], this->NUM_LEGS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->q_term_min[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->q_term_max[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->qd_term_min[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->qd_term_max[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->QX[0], 12);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->QN[0], 12);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->Qc[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->Qf[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->mu_ground, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->l_leg_max, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->f_max, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->mass, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->Ib[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->Ib_inv[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->flight_duration, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int jto_inputs_casadi_lcmt::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_X_VAR, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_U_VAR, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_TIMESTEPS, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_U_TIMESTEPS, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_X_VAR_TRAJ, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_U_VAR_TRAJ, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_OPT_VAR_TRAJ, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_LEGS, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_LEGS_x3, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->NUM_GAIT_TABLE, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->NUM_X_VAR_TRAJ) {
        this->Xref.resize(this->NUM_X_VAR_TRAJ);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->Xref[0], this->NUM_X_VAR_TRAJ);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_U_VAR_TRAJ) {
        this->Uref.resize(this->NUM_U_VAR_TRAJ);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->Uref[0], this->NUM_U_VAR_TRAJ);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_OPT_VAR_TRAJ) {
        this->x0.resize(this->NUM_OPT_VAR_TRAJ);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->x0[0], this->NUM_OPT_VAR_TRAJ);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_GAIT_TABLE) {
        this->gait_schedule.resize(this->NUM_GAIT_TABLE);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->gait_schedule[0], this->NUM_GAIT_TABLE);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_GAIT_TABLE) {
        this->gait_schedule_TD.resize(this->NUM_GAIT_TABLE);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->gait_schedule_TD[0], this->NUM_GAIT_TABLE);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->NUM_U_TIMESTEPS) {
        this->dt_opt.resize(this->NUM_U_TIMESTEPS);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->dt_opt[0], this->NUM_U_TIMESTEPS);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->q_min[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->q_max[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->qd_min[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->qd_max[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->q_init[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->qd_init[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->NUM_LEGS_x3) {
        this->c_init.resize(this->NUM_LEGS_x3);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->c_init[0], this->NUM_LEGS_x3);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->q_term_min[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->q_term_max[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->qd_term_min[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->qd_term_max[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->QX[0], 12);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->QN[0], 12);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->Qc[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->Qf[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->mu_ground, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->l_leg_max, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->f_max, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->mass, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->Ib[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->Ib_inv[0], 3);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->flight_duration, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int jto_inputs_casadi_lcmt::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, this->NUM_X_VAR_TRAJ);
    enc_size += __double_encoded_array_size(NULL, this->NUM_U_VAR_TRAJ);
    enc_size += __double_encoded_array_size(NULL, this->NUM_OPT_VAR_TRAJ);
    enc_size += __double_encoded_array_size(NULL, this->NUM_GAIT_TABLE);
    enc_size += __double_encoded_array_size(NULL, this->NUM_GAIT_TABLE);
    enc_size += __double_encoded_array_size(NULL, this->NUM_U_TIMESTEPS);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __double_encoded_array_size(NULL, this->NUM_LEGS_x3);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __double_encoded_array_size(NULL, 12);
    enc_size += __double_encoded_array_size(NULL, 12);
    enc_size += __double_encoded_array_size(NULL, 3);
    enc_size += __double_encoded_array_size(NULL, 3);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 3);
    enc_size += __double_encoded_array_size(NULL, 3);
    enc_size += __double_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t jto_inputs_casadi_lcmt::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0x4a09cf8e00593dc6LL;
    return (hash<<1) + ((hash>>63)&1);
}

#endif
