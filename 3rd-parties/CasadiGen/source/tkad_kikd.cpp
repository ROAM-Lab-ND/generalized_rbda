/* This file was automatically generated by CasADi 3.6.2.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) tkad_kikd_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_s2 CASADI_PREFIX(s2)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

static const casadi_int casadi_s0[6] = {2, 1, 0, 2, 0, 1};
static const casadi_int casadi_s1[9] = {2, 2, 0, 2, 4, 0, 1, 0, 1};
static const casadi_int casadi_s2[7] = {2, 2, 0, 1, 2, 1, 0};

/* tkad_kikd:(i0[2],i1[2],i2[2],i3[2])->(o0[2x2],o1[2x2,2nz],o2[2x2],o3[2x2,2nz]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a3, a4, a5, a6, a7, a8, a9;
  a0=1.6000000000000001e-03;
  a1=13.;
  a2=5.0000000000000000e-01;
  a3=arg[0]? arg[0][0] : 0;
  a4=2.;
  a5=(a3/a4);
  a6=arg[0]? arg[0][1] : 0;
  a7=(a6/a4);
  a5=(a5-a7);
  a7=1.0325367854798453e+00;
  a5=(a5+a7);
  a7=sin(a5);
  a8=(a2*a7);
  a8=(a1*a8);
  a8=(a0*a8);
  a9=1.6000000000000001e-04;
  a10=21.;
  a11=(a3/a4);
  a12=(a6/a4);
  a11=(a11-a12);
  a12=1.3816026358787112e+00;
  a11=(a11+a12);
  a12=sin(a11);
  a13=(a2*a12);
  a13=(a10*a13);
  a13=(a9*a13);
  a8=(a8-a13);
  a13=4.0000000000000002e-04;
  a14=7.;
  a3=(a3/a4);
  a6=(a6/a4);
  a3=(a3-a6);
  a6=arg[1]? arg[1][1] : 0;
  a3=(a3+a6);
  a4=1.4514158059584845e+00;
  a3=(a3+a4);
  a4=cos(a3);
  a15=(a2*a4);
  a15=(a14*a15);
  a15=(a13*a15);
  a8=(a8-a15);
  if (res[0]!=0) res[0][0]=a8;
  a8=-5.0000000000000000e-01;
  if (res[0]!=0) res[0][1]=a8;
  a7=(a8*a7);
  a7=(a1*a7);
  a7=(a0*a7);
  a12=(a8*a12);
  a12=(a10*a12);
  a12=(a9*a12);
  a7=(a7-a12);
  a4=(a8*a4);
  a4=(a14*a4);
  a4=(a13*a4);
  a7=(a7-a4);
  if (res[0]!=0) res[0][2]=a7;
  if (res[0]!=0) res[0][3]=a8;
  a7=1.;
  if (res[1]!=0) res[1][0]=a7;
  a7=2.0000000000000001e-04;
  a4=91.;
  a12=4.1887902047863906e-01;
  a12=(a6+a12);
  a15=cos(a12);
  a15=(a4*a15);
  a15=(a7*a15);
  a16=cos(a3);
  a16=(a14*a16);
  a16=(a13*a16);
  a15=(a15-a16);
  a16=2.0000000000000002e-05;
  a17=147.;
  a18=6.9813170079773182e-02;
  a6=(a6+a18);
  a18=cos(a6);
  a18=(a17*a18);
  a18=(a16*a18);
  a15=(a15-a18);
  if (res[1]!=0) res[1][1]=a15;
  a5=cos(a5);
  a15=arg[2]? arg[2][0] : 0;
  a18=(a2*a15);
  a19=arg[2]? arg[2][1] : 0;
  a20=(a2*a19);
  a18=(a18-a20);
  a5=(a5*a18);
  a18=(a2*a5);
  a18=(a1*a18);
  a18=(a0*a18);
  a11=cos(a11);
  a20=(a2*a15);
  a21=(a2*a19);
  a20=(a20-a21);
  a11=(a11*a20);
  a20=(a2*a11);
  a20=(a10*a20);
  a20=(a9*a20);
  a18=(a18-a20);
  a20=sin(a3);
  a21=(a2*a15);
  a22=(a2*a19);
  a21=(a21-a22);
  a20=(a20*a21);
  a21=(a2*a20);
  a21=(a14*a21);
  a21=(a13*a21);
  a18=(a18+a21);
  a21=sin(a3);
  a22=arg[3]? arg[3][1] : 0;
  a21=(a21*a22);
  a23=(a2*a21);
  a23=(a14*a23);
  a23=(a13*a23);
  a18=(a18+a23);
  if (res[2]!=0) res[2][0]=a18;
  a18=0.;
  if (res[2]!=0) res[2][1]=a18;
  a5=(a8*a5);
  a1=(a1*a5);
  a0=(a0*a1);
  a11=(a8*a11);
  a10=(a10*a11);
  a9=(a9*a10);
  a0=(a0-a9);
  a20=(a8*a20);
  a20=(a14*a20);
  a20=(a13*a20);
  a0=(a0+a20);
  a8=(a8*a21);
  a8=(a14*a8);
  a8=(a13*a8);
  a0=(a0+a8);
  if (res[2]!=0) res[2][2]=a0;
  if (res[2]!=0) res[2][3]=a18;
  if (res[3]!=0) res[3][0]=a18;
  a18=sin(a3);
  a15=(a2*a15);
  a2=(a2*a19);
  a15=(a15-a2);
  a18=(a18*a15);
  a18=(a14*a18);
  a18=(a13*a18);
  a3=sin(a3);
  a3=(a3*a22);
  a14=(a14*a3);
  a13=(a13*a14);
  a12=sin(a12);
  a12=(a12*a22);
  a4=(a4*a12);
  a7=(a7*a4);
  a13=(a13-a7);
  a6=sin(a6);
  a6=(a6*a22);
  a17=(a17*a6);
  a16=(a16*a17);
  a13=(a13+a16);
  a18=(a18+a13);
  if (res[3]!=0) res[3][1]=a18;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_kikd(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_kikd_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_kikd_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_kikd_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_kikd_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_kikd_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_kikd_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_kikd_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int tkad_kikd_n_in(void) { return 4;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int tkad_kikd_n_out(void) { return 4;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real tkad_kikd_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* tkad_kikd_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    case 3: return "i3";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* tkad_kikd_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    case 1: return "o1";
    case 2: return "o2";
    case 3: return "o3";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* tkad_kikd_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s0;
    case 2: return casadi_s0;
    case 3: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* tkad_kikd_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s1;
    case 1: return casadi_s2;
    case 2: return casadi_s1;
    case 3: return casadi_s2;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_kikd_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 4;
  if (sz_res) *sz_res = 4;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}


