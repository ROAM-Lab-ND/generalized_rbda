/* This file was automatically generated by CasADi 3.6.2.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) tkad_K_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

static const casadi_int casadi_s0[6] = {2, 1, 0, 2, 0, 1};
static const casadi_int casadi_s1[15] = {2, 4, 0, 2, 4, 6, 8, 0, 1, 0, 1, 0, 1, 0, 1};

/* tkad_K:(i0[2],i1[2],i2[2],i3[2])->(o0[2x4]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a10, a11, a12, a13, a14, a15, a2, a3, a4, a5, a6, a7, a8, a9;
  a0=-5.0000000000000000e-01;
  if (res[0]!=0) res[0][0]=a0;
  a1=1.6000000000000001e-03;
  a2=13.;
  a3=5.0000000000000000e-01;
  a4=arg[0]? arg[0][0] : 0;
  a5=2.;
  a6=(a4/a5);
  a7=arg[0]? arg[0][1] : 0;
  a8=(a7/a5);
  a6=(a6-a8);
  a8=1.0325367854798453e+00;
  a6=(a6+a8);
  a6=sin(a6);
  a8=(a3*a6);
  a8=(a2*a8);
  a8=(a1*a8);
  a9=1.6000000000000001e-04;
  a10=21.;
  a11=(a4/a5);
  a12=(a7/a5);
  a11=(a11-a12);
  a12=1.3816026358787112e+00;
  a11=(a11+a12);
  a11=sin(a11);
  a12=(a3*a11);
  a12=(a10*a12);
  a12=(a9*a12);
  a8=(a8-a12);
  a12=4.0000000000000002e-04;
  a13=7.;
  a4=(a4/a5);
  a7=(a7/a5);
  a4=(a4-a7);
  a7=arg[1]? arg[1][1] : 0;
  a4=(a4+a7);
  a5=1.4514158059584845e+00;
  a4=(a4+a5);
  a5=cos(a4);
  a3=(a3*a5);
  a3=(a13*a3);
  a3=(a12*a3);
  a8=(a8-a3);
  a3=2.0000000000000001e-04;
  a14=91.;
  a15=4.1887902047863906e-01;
  a15=(a7+a15);
  a15=cos(a15);
  a14=(a14*a15);
  a3=(a3*a14);
  a4=cos(a4);
  a4=(a13*a4);
  a4=(a12*a4);
  a3=(a3-a4);
  a4=2.0000000000000002e-05;
  a14=147.;
  a15=6.9813170079773182e-02;
  a7=(a7+a15);
  a7=cos(a7);
  a14=(a14*a7);
  a4=(a4*a14);
  a3=(a3-a4);
  a8=(a8/a3);
  if (res[0]!=0) res[0][1]=a8;
  if (res[0]!=0) res[0][2]=a0;
  a6=(a0*a6);
  a2=(a2*a6);
  a1=(a1*a2);
  a11=(a0*a11);
  a10=(a10*a11);
  a9=(a9*a10);
  a1=(a1-a9);
  a0=(a0*a5);
  a13=(a13*a0);
  a12=(a12*a13);
  a1=(a1-a12);
  a1=(a1/a3);
  if (res[0]!=0) res[0][3]=a1;
  a1=1.;
  if (res[0]!=0) res[0][4]=a1;
  a3=0.;
  if (res[0]!=0) res[0][5]=a3;
  if (res[0]!=0) res[0][6]=a3;
  if (res[0]!=0) res[0][7]=a1;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_K(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_K_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_K_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_K_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_K_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_K_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_K_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void tkad_K_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int tkad_K_n_in(void) { return 4;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int tkad_K_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real tkad_K_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* tkad_K_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    case 3: return "i3";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* tkad_K_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* tkad_K_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s0;
    case 2: return casadi_s0;
    case 3: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* tkad_K_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int tkad_K_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 4;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}


