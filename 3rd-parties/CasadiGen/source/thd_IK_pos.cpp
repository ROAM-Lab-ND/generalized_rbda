/* This file was automatically generated by CasADi 3.6.2.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) thd_IK_pos_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_sq CASADI_PREFIX(sq)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

casadi_real casadi_sq(casadi_real x) { return x*x;}

static const casadi_int casadi_s0[6] = {2, 1, 0, 2, 0, 1};

/* thd_IK_pos:(i0[2])->(o0[2]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a3, a4, a5, a6, a7, a8, a9;
  a0=6.;
  a1=8.;
  a2=arg[0]? arg[0][1] : 0;
  a3=cos(a2);
  a3=(a1*a3);
  a4=625.;
  a3=(a3/a4);
  a5=2.2800000000000001e-02;
  a6=arg[0]? arg[0][0] : 0;
  a7=cos(a6);
  a7=(a1*a7);
  a8=sin(a2);
  a7=(a7*a8);
  a7=(a7/a4);
  a7=(a5-a7);
  a8=7.;
  a9=sin(a6);
  a9=(a8*a9);
  a9=(a9/a4);
  a7=(a7-a9);
  a9=casadi_sq(a7);
  a10=casadi_sq(a3);
  a9=(a9+a10);
  a10=49.;
  a11=cos(a6);
  a11=(a10*a11);
  a12=5000.;
  a11=(a11/a12);
  a13=399.;
  a14=sin(a6);
  a14=(a13*a14);
  a15=20000.;
  a14=(a14/a15);
  a11=(a11+a14);
  a14=57.;
  a16=cos(a6);
  a16=(a14*a16);
  a17=sin(a2);
  a16=(a16*a17);
  a17=2500.;
  a16=(a16/a17);
  a11=(a11+a16);
  a16=sin(a6);
  a16=(a8*a16);
  a18=sin(a2);
  a16=(a16*a18);
  a16=(a16/a4);
  a11=(a11-a16);
  a16=1.8881249999999999e-02;
  a11=(a11-a16);
  a18=casadi_sq(a11);
  a9=(a9-a18);
  a9=sqrt(a9);
  a18=(a3*a9);
  a19=(a7*a11);
  a18=(a18+a19);
  a7=(a7*a9);
  a3=(a3*a11);
  a7=(a7-a3);
  a18=atan2(a18,a7);
  a18=(a0*a18);
  if (res[0]!=0) res[0][0]=a18;
  a18=cos(a2);
  a18=(a1*a18);
  a18=(a18/a4);
  a7=sin(a6);
  a7=(a8*a7);
  a7=(a7/a4);
  a3=cos(a6);
  a1=(a1*a3);
  a3=sin(a2);
  a1=(a1*a3);
  a1=(a1/a4);
  a7=(a7-a1);
  a7=(a7+a5);
  a5=casadi_sq(a7);
  a1=casadi_sq(a18);
  a5=(a5+a1);
  a1=cos(a6);
  a10=(a10*a1);
  a10=(a10/a12);
  a12=sin(a6);
  a13=(a13*a12);
  a13=(a13/a15);
  a10=(a10-a13);
  a13=cos(a6);
  a14=(a14*a13);
  a13=sin(a2);
  a14=(a14*a13);
  a14=(a14/a17);
  a10=(a10+a14);
  a6=sin(a6);
  a8=(a8*a6);
  a2=sin(a2);
  a8=(a8*a2);
  a8=(a8/a4);
  a10=(a10+a8);
  a10=(a10-a16);
  a16=casadi_sq(a10);
  a5=(a5-a16);
  a5=sqrt(a5);
  a16=(a18*a5);
  a8=(a7*a10);
  a16=(a16+a8);
  a7=(a7*a5);
  a18=(a18*a10);
  a7=(a7-a18);
  a16=atan2(a16,a7);
  a0=(a0*a16);
  if (res[0]!=0) res[0][1]=a0;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int thd_IK_pos(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int thd_IK_pos_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int thd_IK_pos_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void thd_IK_pos_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int thd_IK_pos_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void thd_IK_pos_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void thd_IK_pos_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void thd_IK_pos_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int thd_IK_pos_n_in(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int thd_IK_pos_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real thd_IK_pos_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* thd_IK_pos_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* thd_IK_pos_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* thd_IK_pos_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* thd_IK_pos_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int thd_IK_pos_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 1;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}


